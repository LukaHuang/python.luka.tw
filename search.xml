<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python 到底是 Call by Value, Call by Reference, 還是 Call by Sharing？</title>
      <link href="/2021/09/21/2021-09-21-is-python-call-by-sharing%20copy/"/>
      <url>/2021/09/21/2021-09-21-is-python-call-by-sharing%20copy/</url>
      
        <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/1400/1*u7A0F0uSK_7dXz-cBbw7Wg.jpeg"></p><p>常見的語言的求值策略(Evaluation strategy)大概離不開這幾個，例如：JavaScript (Call by Value, Call by Sharing)、Java (Call by Value)、C (Call by Value)、C++ (Call by Value, Call by Reference)</p><p>這次使用使用淺顯易懂的語言，並搭配圖片來說明到底 Python 中是 Pass by Value, Pass by Reference, 還是 Pass Sharing？</p><p>本篇目錄：  </p><ol><li>用 C++ 理解 Pass by Value  </li><li>用 C++ 理解 Pass by Reference  </li><li>來看看 Python 是不是 Pass by Value  </li><li>來看看 Python 是不是 Pass by Reference  </li><li>來看看 Python 是不是 Pass By Sharing  </li><li>Python 到底是 Pass by Value, Pass Value 還是 Pass Sharing 呢？</li></ol><h2 id="1-用-C-理解-Pass-by-Value"><a href="#1-用-C-理解-Pass-by-Value" class="headerlink" title="1. 用 C++ 理解 Pass by Value"></a>1. 用 C++ 理解 Pass by Value</h2><p>C++ 是探討 Pass by Value 與 Pass by Reference 的最佳選擇。我們先來理解 Pass by Value。</p><h3 id="Pass-by-Value-Output"><a href="#Pass-by-Value-Output" class="headerlink" title="Pass by Value (Output)"></a>Pass by Value (Output)</h3><p><img src="https://miro.medium.com/max/1400/1*_Kv0cQp2ot5CaFq4F-eeeA.png"></p><p>執行結果</p><pre><code>Before: number is 7  Before: the num is 7  After: the num is 3  After: number is 7</code></pre><h3 id="Pass-by-Value-Address"><a href="#Pass-by-Value-Address" class="headerlink" title="Pass by Value (Address)"></a>Pass by Value (Address)</h3><p>可以看到函式內部的數並不會受到影響，遵守作用域( Scope)範圍。我們再執行另一個程式，查看記憶體位址的改變。</p><p><img src="https://miro.medium.com/max/1400/1*_tqEX2mp6P1mmhQXz3giYw.png"></p><p>執行結果:</p><pre><code>The Address of number is 0x7ffd0abe7b74  The Address of num is 0x7ffd0abe7b5c  The Address of num is 0x7ffd0abe7b5c  The Address of number is 0x7ffd0abe7b74</code></pre><p>可以發現 num 的位址遵守作用域 (Scope)，經過這兩個程式之後，可以理解到 Pass by Value 是在呼叫函式的時候，複製一份引數(number)給函式使用。</p><p>Step 1：宣告 number 為 7</p><p><img src="https://miro.medium.com/max/1400/1*COCGC0koxgEwwAcyjIxPqQ.jpeg"></p><p>Step 2：呼叫函式時，複製一份給 number 的值複製一份給 num。</p><p><img src="https://miro.medium.com/max/1400/1*effkI4tD0QRbyshr32eZTQ.jpeg"></p><p>step 3：修改 num 的值時，修改的是複製出來的那一份。因此原本的 number 不受影響。</p><p><img src="https://miro.medium.com/max/1400/1*DmDfGRZBfjNgsJOz0djjTg.jpeg"></p><h2 id="2-用-C-理解-Pass-by-Reference"><a href="#2-用-C-理解-Pass-by-Reference" class="headerlink" title="2. 用 C++ 理解 Pass by Reference"></a>2. 用 C++ 理解 Pass by Reference</h2><h3 id="Pass-by-Reference"><a href="#Pass-by-Reference" class="headerlink" title="Pass by Reference"></a>Pass by Reference</h3><p><img src="https://miro.medium.com/max/1400/1*iq5MtwlbxH2pauCvUn1IlA.png"></p><p>執行結果：</p><pre><code>Before: number is 7  Before: the num is 7  After: the num is 3  After: number is 3</code></pre><h3 id="Pass-by-Reference-Address"><a href="#Pass-by-Reference-Address" class="headerlink" title="Pass by Reference (Address)"></a>Pass by Reference (Address)</h3><p>跟剛剛不同的是，因為 Pass by Reference 傳的是參照，也就是地址，所以裡外等同於是一個變數。接著我們一樣把記憶體位址印出來。看看是不是真的是同樣的記憶體位址。</p><p><img src="https://miro.medium.com/max/1400/1*g5dJuhrsAhHU9KCEG8kv6Q.png"></p><p>執行結果：</p><pre><code>The Address of number is 0x7ffd45470b64  The Address of num is 0x7ffd45470b64  The Address of num is 0x7ffd45470b64  The Address of number is 0x7ffd45470b64</code></pre><p>發現結果如我們推測的，從頭到尾記憶體位址都是 <code>0x7ffd45470b64</code> 。因為我們傳的是記憶體位址嘛。</p><p>Step 1：宣告 number</p><p><img src="https://miro.medium.com/max/1400/1*gJ2brrZQhpC2H_dkak1avw.jpeg"></p><p>Step 2：呼叫 passByReference 時不會複製一份 number 的值，也就是「共用」同一份的值。</p><p><img src="https://miro.medium.com/max/1400/1*_zpwpMD4wtsfNFRvwcmgPA.jpeg"></p><p>Step 3：因為共用一份資料，num 更新時，也更新到了 number。</p><p><img src="https://miro.medium.com/max/1400/1*lQxer-s2-Ajq7SMHxt-ejQ.jpeg"></p><p>Step 4: 看所以最後得到的結果是 <code>After: number is 3</code> ，因為 number 已經被改變</p><p><img src="https://miro.medium.com/max/1400/1*kwzZQt9H5kmtG-2WEJyKDQ.jpeg"></p><h2 id="3-來看看-Python-是不是-Pass-by-Value"><a href="#3-來看看-Python-是不是-Pass-by-Value" class="headerlink" title="3. 來看看 Python 是不是 Pass by Value"></a>3. 來看看 Python 是不是 Pass by Value</h2><p>接著我們來看看 Python 是否是 Pass by Value。</p><p><img src="https://miro.medium.com/max/1400/1*acxTqQr7L_rbJacALb8ZgQ.png"></p><p>執行結果</p><pre><code>Before the function starts, the number is 7  Before the function starts, the number is 7  After the function ends, the number is 1  After the function ends, the number is 7</code></pre><p>執行完 function_1 後，發現原本的 number，並<strong>沒有</strong>因為在函式中重新指派而改變成 1，還是維持原本的 7。</p><p>看起來跟 C++ 的 Pass Value 很像，接著我們再做一個實驗，把記憶體位置印出來。</p><p><img src="https://miro.medium.com/max/1400/1*quhWD010vL1GiWYlr2_SVQ.png"></p><p>執行結果：</p><pre><code>Before the function starts, the id is 4321770416  Before assigning, the num is %d 4321770416  After assigning, the num is %d 4321770224  After the function ends, the id is 4321770416</code></pre><p>可以發現，行為雖然像是 Pass by Value，但是記憶體位址變化的時候，並不是執行 function_1 函式的當下，而是在指派 num = 1 之後。這是為什麼呢？</p><p>Step 1：將 7 指派給變數 number，此時 7 存到記憶體中。</p><p><img src="https://miro.medium.com/max/1400/1*cxodciZzJQTX0Jqds0LoOg.jpeg"></p><p>Step 2：呼叫函式 pass_by_value() 的時候，將 7 傳了進去。此時函式並不會複製一份值進去。</p><p><img src="https://miro.medium.com/max/1400/1*yRz_pkqny6-wtLUKOwB1OA.jpeg"></p><p>Step 3：當執行到 <code>num=1</code>時， num 是整數型別，是 Imuttable Object 不可變物件，值無法改變，因此會新增一塊記憶體來儲存 num。</p><p><img src="https://miro.medium.com/max/1400/1*5YlFf5L6ZQ4g0x_R6tW29g.jpeg"></p><p>Step 4 : 所以最後印出時，不會是 1，而是 7 ，因為 number 與 num 已經沒有共用記憶體位置</p><p><img src="https://miro.medium.com/max/1400/1*Up_KTylJRgd-DTY9--hJEA.jpeg"></p><p>結論：Python 的 function_1 跟 C++的 Call by Value 最後的結果都有分開的記憶體位址。但是從記憶體位址變化的時機可以看得出來，讓 Python 有此現象的，是 Imuttable Object 不可變的特性，而非 Call by Value。</p><h2 id="4-來看看-Python-是不是Pass-By-Reference"><a href="#4-來看看-Python-是不是Pass-By-Reference" class="headerlink" title="4. 來看看 Python 是不是Pass By Reference"></a>4. 來看看 Python 是不是Pass By Reference</h2><p>接著我們來看看 Python 是否是 Pass by Reference。</p><p><img src="https://miro.medium.com/max/1400/1*-cE58YFm5qjm83E1QfFi4Q.png"></p><p>執行結果</p><pre><code>before the function starts, the object is `&#123;‘name’: ‘Leo’, ‘age’: 25&#125;`  before the variable assign, the obj is `&#123;‘name’: ‘Leo’, ‘age’: 25&#125;`  after the variable assign, the obj is `&#123;‘name’: ‘9m88’, ‘age’: 20&#125;`  after the function ends, the object is `&#123;‘name’: ‘9m88’, ‘age’: 20&#125;`</code></pre><p>哇，外面 object 的內容居然被改變了，跟剛剛的 number 行為完全不一樣，這是怎麼回事？難道這是 Call by Reference？ 可是我們沒有傳地址進去呀。</p><p>一樣，我們先把記憶體位址印出來試試看。</p><p><img src="https://miro.medium.com/max/1400/1*9VkabOJ6eL1vxFlRA2tWRA.png"></p><p>執行結果：</p><pre><code>Before variable assign, the object id is 4508274560  Before variable assign, the obj id is 4508274560  After variable assign, the obj id is 4508274560  After variable assign, the object id is 4508274560</code></pre><p>記憶體位址完全沒有改變，這是為什麼呢？因為剛剛我們使用字典 (dict) 這種資料型別，是屬於可變物件 (Mutable Object)，內容可以改變</p><h3 id="深入資料型別字典-dict-的記憶體調用"><a href="#深入資料型別字典-dict-的記憶體調用" class="headerlink" title="深入資料型別字典(dict) 的記憶體調用"></a>深入資料型別字典(dict) 的記憶體調用</h3><p>我們來看看這段程式記憶體的調用。這次的圖表將記憶體更精確的分為儲存空間所儲存的「資料 Data」與儲存空間的「地址 Address」。</p><p>因為字典這種物件是 mutable 可變的，代表這種物件的值是可以改變的，所以想要來看看到底是記憶體怎麼儲存，才是可以改變的</p><p>如果不了解 Imuttable 的人可以參考我寫的另外一篇文章。<a href="https://medium.com/starbugs/python-mutable-%E8%88%87-immutable-8ef7804181cd">Python — Mutable vs Immutable</a>。裡面講解了 Python 中可變與不可變的概念。</p><p><img src="https://miro.medium.com/max/1400/1*zb9rX_Vz5LW6YKjnFfPLjA.jpeg"></p><p>宣告 object 物件的時候，變數 Variable: object，指向一個記憶體位址為 <code>x8</code> 資料為 <code>x7</code>。變數本身不直接儲存資料的，只會儲存資料的記憶體位址。而真正的資料儲存在地址為 <code>x7</code> 資料為 <code>&#123;‘name’: ‘Leo’, ‘age’: 25&#125;</code> 。</p><p><img src="https://miro.medium.com/max/1400/1*Aol6KUSfse1xiSL1NcoKzw.jpeg"></p><p>是呼叫function_2 函式的時候，object 的參照傳進去函式裡面，變數名稱變為 obj 。 變數 obj 將內容的地址，儲存在 x9 記憶體位址，資料為 x7。告訴變數 obj 可以去地址 x7 拿資料，這樣就會找到原本物件內容了。</p><p><img src="https://miro.medium.com/max/1400/1*ZJCeT_6VlT9O3ov8uBodhA.jpeg"></p><p>接著實際執行 pass_by_reference() 函式，因為之前變數 obj 將資料指向跟變數 dict_object 相同的物件，<strong>所以實際修改到的資料，是原本的資料</strong>。最後印出來的時候發現，原始的物件內容已經被改變。</p><p>回顧一下 function_2 的執行結果，函式內部的改變會改變 object 外部的內容。</p><p>執行結果：  </p><pre><code>before the function starts, the object is &#123;‘name’: ‘Leo’, ‘age’: 25&#125;   before the variable assign, the obj is &#123;‘name’: ‘Leo’, ‘age’: 25&#125;   after the variable assign, the obj is &#123;‘name’: ‘9m88’, ‘age’: 20&#125;   after the function ends, the object is &#123;‘name’: ‘9m88’, ‘age’: 20&#125;</code></pre><h2 id="5-來看看-Python-是不是-Pass-by-Sharing"><a href="#5-來看看-Python-是不是-Pass-by-Sharing" class="headerlink" title="5. 來看看 Python 是不是 Pass by Sharing"></a>5. 來看看 Python 是不是 Pass by Sharing</h2><p>接下來我們來看範例 3，將範例 2 稍作改變，來看看會發生什麼事情</p><p><img src="https://miro.medium.com/max/1400/1*HQBLuze2e6fjD3XmuXdPFA.png"></p><p>我們將 function_2() 方法改成 function_3()。並且把將方法的內容改成建立新物件的方式。</p><pre><code class="python">def function\_3(obj):      obj = &#123;        &#39;name&#39;: &#39;Amy&#39;,        &#39;age&#39;: 50      &#125;</code></pre><p>執行結果:</p><pre><code>before the function starts, the dict_object is &#123;‘name’: ‘Leo’, ‘age’: 25&#125;before assign, the obj is &#123;‘name’: ‘Leo’, ‘age’: 25&#125;after assign, the obj is &#123;‘name’: ‘Amy’, ‘age’: 50&#125;after the function ends, the dict_object is &#123;‘name’: ‘Leo’, ‘age’: 25&#125;</code></pre><p>輸出結果再度變回跟 function_1 的結果一樣，無法改變外部物件，這是為什麼呢？</p><p>Step 1: 跟 function_2 完全相同。初始化字典物件內容。</p><p><img src="https://miro.medium.com/max/1400/1*uZkD4xgrcbl5jaPxIFD3qQ.jpeg"></p><p>Step 2: 這時就可以看得出來到底發生了什麼事情了，如果是直接使用建立一個新物件的來賦予變數 obj，那麼將不會改變原本變數 dict_obj 的值。</p><p><img src="https://miro.medium.com/max/1400/1*8N1xB7HsUQr5GKEVMOgy1Q.jpeg"></p><p>我們可以得出一個結論，在使用可變物件(Muttable Object)的時候，如果重新指派新的物件給它，它就不會保持共用記憶體，而是建立一個心的物件。</p><h2 id="6-Python-到底是-Pass-by-Value-Pass-Value-還是-Pass-Sharing-呢？"><a href="#6-Python-到底是-Pass-by-Value-Pass-Value-還是-Pass-Sharing-呢？" class="headerlink" title="6. Python 到底是 Pass by Value, Pass Value 還是 Pass Sharing 呢？"></a>6. Python 到底是 Pass by Value, Pass Value 還是 Pass Sharing 呢？</h2><h3 id="都不是，Python-是-Pass-by-Assignment！"><a href="#都不是，Python-是-Pass-by-Assignment！" class="headerlink" title="都不是，Python 是 Pass by Assignment！"></a>都不是，Python 是 Pass by Assignment！</h3><p>我覺得最清楚的是這篇 Stack Overflow 的回答，簡單解釋，引數傳的是物件的參照(Call by Object Reference)，但此 Reference 是由 Pass by Value 的方式實作。</p><p>可以歸納出兩個結論：</p><ul><li>如果你傳遞的可變物件 (Mutable Object)，傳遞的是物件的參照(記憶體位址)，所以可變物件的值是可以改變的，你可以因此修改到原始的物件的內容。</li><li>可變物件 (Mutable Object) 有一個例外是你重新指派一個新的物件給他，外部的作用域(Scope)將無法得知你做的事情，所以外部作用域會認舊的物件，而不是新指派的物件。</li><li>如果你用的是不可變物件(Imutable Object)，那麼因為每次指派都會是新的物件，但是物件是在函式作用域內部生成的，所以外部作用域無法得知。就變成了兩個物件</li></ul><p><img src="https://miro.medium.com/max/1400/1*g8i5cH_ceTp0t7msLsl6Nw.png"></p><p><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p><p>最後再回到官方文件的定義，確認一下 Python 真的是 Pass by Assignment，打完收工。</p><p><img src="https://miro.medium.com/max/1400/1*OPI1RZvLI-0gCoAvsS8Xog.png"></p><p><a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference">https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python — Mutable vs Immutable</title>
      <link href="/2021/08/24/2021-08-24-mutable-and-imuttable/"/>
      <url>/2021/08/24/2021-08-24-mutable-and-imuttable/</url>
      
        <content type="html"><![CDATA[<p>今天來探討 Python 中的 Mutable 與 Immutable 的概念。Mutable 顧名思意就是「可變的」，而「Immutable」顧名思義是不可變得。</p><p>那麼什麼在 Python 中什麼是「可變的」？什麼是「不可變的」呢？我們來說得具體一點。</p><blockquote><p>Python 中 Mutable 定義，</p><p>物件的「值」可以被改變。</p></blockquote><p>反之，Immutable 就是物件的值不可以被改變。</p><p>聽到這邊你可能產生一些疑惑，為什麼是「物件」？什麼是「值」？可以改變和不可以被改變又是怎麼回事？</p><p>我們先來探討第一個問題，為什麼是物件。</p><blockquote><p>Everything Is an Object by <a href="https://linux.die.net/diveintopython/html/getting_to_know_python/everything_is_an_object.html#d0e4665">DiveIntoPython</a></p></blockquote><p>這是什麼意思呢？ 在 Python 中你所使用的一切東西都是物件。 如果你有寫過其他語言，例如：Java。你可能會產生一些疑惑。Java 中的 int 是基本型別(<a href="http://download.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">Primitive Data Types</a>)。</p><p>我們來看看 Java 中的基本型別是怎麼定義的：</p><blockquote><p>Primitive types are special data types built into the language; they are not objects created from a class. A <em>literal</em> is the source code representation of a fixed value; literals are represented directly in your code without requiring computation.</p></blockquote><p>Java 中的基本型別是語言中特別的資料型別，「不是」物件。</p><p>Python 中一切皆是物件，跟 Java 剛好成為強烈的對比。我們來試試看一下 Python 中的資料型別。</p><p>使用 id(object) 可以找到物件 id。<br>使用 __class__ 特殊方法可以找到物件是由哪個類別(class)生成的。</p><p>由此可知，在 Python 中的基本型別也是物件。其他特殊情況，例如函式，在 Python 中也是物件，這邊講太多會有點失焦，所以我們先回到主軸。</p><p>接下來來談談「可變的物件」，那麼什麼東西是可變的呢？同理，此物件的值可以被改變。</p><p>我們用字典 ( dict) 資料型別來演示，當我們創造出一個字典資料結構的時候，裡面的內容是可以被改變的，而且外部的 id 卻不會改變。這樣的特性就跟 JS 之類的動態語言比較相似。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL - 在 Windows 上打造 Linux 的開發體驗</title>
      <link href="/2020/11/15/2020-11-15-wsl/"/>
      <url>/2020/11/15/2020-11-15-wsl/</url>
      
        <content type="html"><![CDATA[<h2 id="在-Windows-上打造-Linux-的開發體驗-WSL是關鍵"><a href="#在-Windows-上打造-Linux-的開發體驗-WSL是關鍵" class="headerlink" title="在 Windows 上打造 Linux 的開發體驗 WSL是關鍵"></a>在 Windows 上打造 Linux 的開發體驗 WSL是關鍵</h2><p><img src="https://cdn-images-1.medium.com/max/12032/0*EkacF0gY7pC8VNHP"></p><p>延續上一篇，打造舒適的 Windows ＋ Mac 雙系統開發環境，打算用一系列的文章，一一來介紹開發各種環境。<br><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84%E9%9B%99%E7%B3%BB%E7%B5%B1%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-windows-mac-%E9%9B%99%E5%88%80%E6%B5%81-6127ce8583a"><strong>打造舒適的雙系統開發環境 Windows + Mac 雙刀流</strong></a></p><h2 id="重度-Mac-Linux-開發者，嘗試-Windows-開發"><a href="#重度-Mac-Linux-開發者，嘗試-Windows-開發" class="headerlink" title="重度 Mac / Linux 開發者，嘗試 Windows 開發"></a>重度 Mac / Linux 開發者，嘗試 Windows 開發</h2><p>先來說說我是個怎麼樣的人，我是個 Mac / Linux 重度使用者，學生時期使用 Windows 開發實在雷，光是搞環境平均就要花一個禮拜以上。再換成一台二手的 Macbook 之後就一路大順暢，從此只用 Mac / Linux 環境開發。</p><p>直到最近看到強者我朋友用 Windows 用得滿順的，不僅 Web 這些比較通用的東西跑得順，連 Linux 套件和 Docker 甚至 K8S 都可以順利執行。於是我就買了一台 Windows 電腦，那就<strong>來打造出能夠媲美 Linux 開發環境的舒適 Windows 開發體驗吧！</strong></p><h3 id="對-Window-敬而遠之的時期"><a href="#對-Window-敬而遠之的時期" class="headerlink" title="對 Window 敬而遠之的時期"></a>對 Window 敬而遠之的時期</h3><p>過去幾年我的主力開發環境以 Mac 或是 Linux 為主要開發環境，主要的原因是，有許多 Linux 的套件在 Windows 上不太穩定，安裝時發生的錯誤，10 台有 7 台會發生不一樣的情況。可能是軟體發生問題，也有可能是硬體導致，雖然說最終還是可以找到解決方案，可是每台電腦或是重灌都要重複花費大量時間的時間在處理環境。讓我這個 Windows 使用者毅然決然使用 Macbook 做為開發工具，這一用下去，也用了 7 年以上了。</p><h3 id="長年使用-Mac-的我，為什麼想要使用-Windows-開發？"><a href="#長年使用-Mac-的我，為什麼想要使用-Windows-開發？" class="headerlink" title="長年使用 Mac 的我，為什麼想要使用 Windows 開發？"></a>長年使用 Mac 的我，為什麼想要使用 Windows 開發？</h3><p>第一個原因是，看到強者我朋友 Windows 上跑各種環境跑的很順，滿讓我訝異的，因為以往雷到爆的 Windows，好像突然間不雷了？</p><p>但現在的 Windows 滿穩定的，我觀察了一些現象，在安裝了一些套件之後，沒有發生以前動不動就爆炸，卻又非常難排除的情形。</p><h2 id="Cmder-—-類似-Linux-的開發體驗"><a href="#Cmder-—-類似-Linux-的開發體驗" class="headerlink" title="Cmder — 類似 Linux 的開發體驗"></a>Cmder — 類似 Linux 的開發體驗</h2><p><img src="https://cdn-images-1.medium.com/max/2000/1*Qr8dmZO-NTn9U6leLk4Kvg.png"></p><p>Cmder 安裝很簡單，去<a href="https://cmder.net/">官方網站</a>下載即可使用，選擇完全安裝的話，可以連 git 一起安裝起來。可以說是懶人最快建置好環境的方式。</p><p><img src="https://cdn-images-1.medium.com/max/2020/1*xngE0OGWPyxxILjPzSWQhw.png"></p><p>不過由於 Cmder 只是提供一些「類似」Linux 的體驗。並且他是一種「終端機」，所以並不能解鎖好用的 Linux 開發環境。因此接著介紹下一個好冰友 WSL。</p><h2 id="WSL-—-如果想要一勞永逸，選他"><a href="#WSL-—-如果想要一勞永逸，選他" class="headerlink" title="WSL — 如果想要一勞永逸，選他"></a>WSL — 如果想要一勞永逸，選他</h2><p>WSL 讓 Windows 使用者，不必透過虛擬機，就能直接使用 Linux 環境。現在，Windows 變得對 Linux 開發者更友善。</p><p>可以使用 Linux 指令來操作 Windows 系統，令我感到驚豔。以前裝 Linux 套件用一堆奇怪的方法，最後還是裝不好，現在可以直接在 Windows 無縫銜接 Linux，真滴棒！</p><blockquote><h1 id="WSL-讓我們可以在-Windows-上體驗到-Linux-的開發流暢感。"><a href="#WSL-讓我們可以在-Windows-上體驗到-Linux-的開發流暢感。" class="headerlink" title="WSL 讓我們可以在 Windows 上體驗到 Linux 的開發流暢感。"></a>WSL 讓我們可以在 Windows 上體驗到 Linux 的開發流暢感。</h1></blockquote><p>附上 WSL 的架構圖，簡單的說 Linux 的指令會被轉成 NTCore 的 system call，來達到期待的效果。例如：ls 可以列出檔案，</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*TG6RajSFiq-VVYVv.png" alt="[https://blog.jessfraz.com/post/windows-for-linux-nerds/](https://blog.jessfraz.com/post/windows-for-linux-nerds/)"></p><p><em>ps: 想要深入了解 WSL 原理請看這篇 ：<a href="https://hackmd.io/@billsun/Bkh8oAmGX?type=view">**WSL 原理介紹</a></em>**</p><h3 id="WSL-的安裝"><a href="#WSL-的安裝" class="headerlink" title="WSL 的安裝"></a>WSL 的安裝</h3><p>按照下面網頁逐一步驟安裝即可，下面連結中有幾個步驟，依序跑完，即可安裝完成。建議不要參加實驗計畫當白老鼠，跑幾個</p><p>如果沒有加入微軟的實驗計畫，那下面連結中有幾個步驟，依序跑完，即可安裝完成。我自己是沒有參加實驗計畫當白老鼠，指令貼一貼比較省事。<br><a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10"><strong>在 Windows 10 上安裝適用於 Linux 的 Windows 子系統 (WSL)</strong><br><em>Windows 子系統 Linux 版有兩個不同的版本，可在安裝過程中進行選擇。 Windows Subsystem for Linux has two different versions to choose between…</em>docs.microsoft.com</a></p><h2 id="有了-WSL-之後，來個終端機吧！"><a href="#有了-WSL-之後，來個終端機吧！" class="headerlink" title="有了 WSL 之後，來個終端機吧！"></a>有了 WSL 之後，來個終端機吧！</h2><p>安裝好 WSL 以後，你就可以在 Windows 上面使用 Linux 指令，該怎麼使用終端機呢？</p><p>打開終端機，輸入 wsl 即會進入 WSL 的環境，並且會將路徑綁定到 Windows 的檔案系統上。下面使用的終端機為 Windows Terminal。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*2JFsU9UUVv3lLs8L-CfqEA.png" alt="圖片來自 Luka 的 Windows"></p><h2 id="Terminal-終端機的選擇"><a href="#Terminal-終端機的選擇" class="headerlink" title="Terminal 終端機的選擇"></a>Terminal 終端機的選擇</h2><p>終端機有幾個選擇，如果你是 Windows 慣用的使用者，你可使用 Cmder 來開啟 WSL，因為你已經習慣了 Cmder 帶來的整合度與習慣。Cmder 也滿漂亮的，只是有些地方，還是需要設定和調教，才能符合自己的使用習慣，例如：$ 的取代 … 等等瑣碎的小事。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*JhFBTyGKv6Fv1kUm1eiCXg.png" alt="圖片來自 Luka 的 Windows"></p><p>如果你是輕量使用者 ，對終端機不是很熟悉，可以用用看 Windows Terminal。微軟推出了一款 Terminal，簡單素雅的頁面，可以輕鬆切換 Powershell 與 WSL 環境，好像也有很多主題可以客製，算是一個簡單好上手的組合。</p><p><img src="https://cdn-images-1.medium.com/max/2092/1*uMK22R1kZv_NugktY8Xymw.png" alt="圖片來自 Luka 的 Windows"></p><p>順帶一提，來看看 Powershell 原始的終端機有多恐怖！！藍色的底，加上進入 WSL 的藍色字體，根本是眼睛殺手，哎呀～我的眼睛業障重！</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*M63D3S3jNvTmEhGHTwu2pA.png" alt="圖片來自 Luka 的 Windows"></p><p>最後一個選項是使用 VS Code 來整合 WSL，方便大家開發的時候順便使用 VSCode 直接下指令。我覺得這也不失為一個理想的開發環境解決方案。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*UfDGLDWWfcnHTxMr1DKrTQ.png" alt="圖片來自 Luka 的 Windows"></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>讓 Windows 上也可以擁有舒適的開發環境是突破自己舒適圈的一小步，現在微軟越來越邁向開源，給他一次機會，雖然因為 Windows 的更新非常的奇葩，你不更新還要給你強制更新，根本使用者體驗殺手，這個情形讓我不會想要轉移主要開發環境過去，但，現在 Windows 是否已經是一個「還可以」的開發環境了呢？我覺得是 ok 的。</p><p>希望這篇有幫助到 Windows 使用者的你😃</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ArgoCD — 透過 ArgoCD 認識 GitOps</title>
      <link href="/2020/09/21/2020-09-21-introduction-to-gitops-via-argocd/"/>
      <url>/2020/09/21/2020-09-21-introduction-to-gitops-via-argocd/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/2000/1*4Ggl4UF7SjZk4qoapcDBnA.jpeg"></p><h3 id="什麼是-GitOps"><a href="#什麼是-GitOps" class="headerlink" title="什麼是 GitOps ?"></a>什麼是 GitOps ?</h3><p>兩年前初次聽到 GitOps 的時候，我想說是不是只要 Git tag 觸發一些部屬相關的事情，像是下了某個 tag，就會觸發某 Ansible 的工作，部屬某一台伺服器。很遺憾，完全不是我想的那樣。</p><p>在最近實際將 GitOps 整合進開發流程的過程中，深入研究了一下 GitOps。對 GitOps 有了多一點的了解，趁這個機會來跟大家分享一下。</p><p>GitOps 是 Weaveworks 提出的一種持續交付(CD)的概念，透過 Git 來聲明基礎設施(infrastructure)希望的狀態。什麼是聲明基礎設施希望的狀態？</p><h3 id="從聲明基礎設施希望的狀態談到-K8S"><a href="#從聲明基礎設施希望的狀態談到-K8S" class="headerlink" title="從聲明基礎設施希望的狀態談到 K8S"></a>從聲明基礎設施希望的狀態談到 K8S</h3><p>說到聲明希望的狀態，這就要來了解一下屬於 Cloud Native 體系的 Kubernetes 了。</p><p>因為 Kubernetes 是使用 yaml 檔來建立或是修改所擁有的 K8S 元件。例如你想把某個服務擴展從 3 個 pod 擴展到 5 個 pod。那麼你就會修改 yaml 檔裡面的數字。並使用 kubectl 來應用 yaml 檔案至所對應的 K8S 集群。</p><p>簡單說就是 yaml 等於你目前的 K8S 系統狀態。歡迎來到 yaml 的世界！</p><h3 id="GitOps-解決了哪些痛點？"><a href="#GitOps-解決了哪些痛點？" class="headerlink" title="GitOps 解決了哪些痛點？"></a>GitOps 解決了哪些痛點？</h3><p>當我們想要對 K8S 集群做出改變的時候，我們可以做什麼事情？可以直接下 kubectl apply 直接對 K8S 集群進行修改。可是這樣就出現了一個問題，當有許多人都想要對同一個 K8S 進行修改的時候。A 怎麼知道 B 做了什麼修改？如果 B 修改過後，A 並不知道 B 修改了什麼，也進行了一次修改。那麼很有造成系統全面癱瘓。</p><p>Kubernetes 就像一個終極兵器，你可以讓他輕鬆的做到你想做的事情，例如：在幾分鐘內長出具有負載均衡能力的服務。但是也因此如果操作不當，後果會比傳統架構還要嚴重很多。</p><p>這就是 GitOps 出現的原因！</p><h3 id="GitOps-的原則"><a href="#GitOps-的原則" class="headerlink" title="GitOps 的原則"></a>GitOps 的原則</h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*HHeZOMbdqCwuJ5GxiAkNQw.jpeg"></p><p>Weaveworks 提出 GitOps 的概念，並使用 Flux (不是前端的Flux) 來實作之。其中有幾個比較重要的原則：</p><ol><li><p>整個系統必須是聲名式的</p></li><li><p>希望的狀態必須用 Git 做版控</p></li><li><p>在 Git 中獲准(appoved)的改變可以自動應用到系統上</p></li><li><p>軟體代理(Agent)必須確保系統正確性，如果不正確的話需要有警報通知使用者。</p></li></ol><p>核心觀念其實就是讓你的系統具有「可觀測性」，你可以看到系統目前的狀態。並將所有對 K8S 做的操作，都透過 Git 來操作，這樣的話所有的操作過程都會是一個一個的 Commit。</p><p>下圖左邊是希望的狀態，也就是 Git 中定義的狀態。而實際的狀態，則是右邊。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*IDeYMbyPP8-V-L456PRFHg.jpeg" alt="[https://github.com/weaveworks/awesome-](https://github.com/weaveworks/awesome-gitops)"></p><p>如果我們使用的是 ArgoCD 可以輕鬆看到希望狀態與實際狀態的不同。</p><h3 id="用-Argo-CD-來了解-GitOps"><a href="#用-Argo-CD-來了解-GitOps" class="headerlink" title="用 Argo CD 來了解 GitOps"></a>用 Argo CD 來了解 GitOps</h3><p><img src="https://cdn-images-1.medium.com/max/NaN/1*TgJWIt9bE2UDgKLwlp2_hA.jpeg"></p><p>ArogCD 是一款 GitOps 的實現。我們來看看上述說的 GitOps 原則到底是怎麼回事。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*rwgdphu1Aq59cG_stmrtRA.jpeg"></p><p>這是 Argo CD 的圖案，一支外太空章魚(還是什麼生物？)，他提供了強大的觀測介面。可以很好的觀測目前 Kubernetes 集群的狀態。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*8CA6GfxOSSb9t3FLRPUePA.jpeg"></p><p>來動手做做看！做一個小改變</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*j_vkc6z1D78bGRIYqttJxA.jpeg"></p><p>Argo CD 顯示 Out of sync</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*lbeE9qAMq4OzWBpHDLcn2w.jpeg"></p><p>透過 ArgoCD 可以看到到底對 K8S 集群做了哪些改變。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*pkCl-99a3QdDNqLE1r02-w.jpeg"></p><p>手動按下 Sync</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*bCNQ2LDOOEoMKx_4TPra0A.jpeg"></p><p>看看到底發生了什麼事</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*6J7atxk6ZSVwoArW31lAZA.jpeg"></p><p>並且部屬也有版控，萬一不幸弄壞，也可以即時回到上一版本。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*6I5lTwZkVhrYWXCYhSCqMQ.jpeg"></p><p>用起來是不是很輕鬆寫意！</p><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>GitOps 提供 K8S 集群良好可觀測性，並且把開發或是運維對集群的操作記錄在 Git 中，讓任何人可以清楚看到集群做了哪些改變。並且提供了單一的出口，讓開發者和運惟人員不會私自的對集群改變。萬一被改變了，也提供了警報功能來通知主要運維人員。這樣的方式對於 K8S 日常維護來說，無疑是提供了一個非常實用且可靠的方案。</p><h3 id="同場加映"><a href="#同場加映" class="headerlink" title="同場加映"></a>同場加映</h3><p>2021/5/11 update，本篇是 ArgoCD 入門，如果想要看看 ArgoCD 進階運用，請參閱小城老師的文章：<br><a href="https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298"><strong>Argo CD ApplicationSet Controller: 世界為我而轉動！</strong><br><em>新推出的 Argo CD ApplicationSet Controller 讓使用者在單個 YAML 檔案內像是寫 For Loop 程式，隨需求一次性地建立大量的 Application CRD，就讓我們使用實際範例來看它如何解放…</em>medium.com</a></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://www.weave.works/technologies/gitops/">Guide To GitOps</a></li><li><a href="https://www.hwchiu.com/gitops.html">淺談 GitOps 的概念</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>從 Github 開源指南｜學習如何貢獻開源專案</title>
      <link href="/2020/08/15/2020-08-05-introduction-to-open-source-guild/"/>
      <url>/2020/08/15/2020-08-05-introduction-to-open-source-guild/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/7872/0*8Mqb8j7gMZ3_R-UI" alt="Photo by [Tim Mossholder](https://unsplash.com/@timmossholder?utm_source=medium&amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)"></p><p>本週我們來讀一下「如何為開源做貢獻」。這份文件是 Github 的 Open Source Guide 開源指南，約莫兩年前剛出的時候全部是英文版的，已經三年了，拖到現在才讀（汗）。</p><blockquote><p> （這篇是閱讀開源指南的筆記，原創內容偏少，原文在下方連結）<br><a href="https://opensource.guide/zh-hant/how-to-contribute/"><strong>如何為開源做貢獻？</strong><br><em>透過為開源貢獻力量，能從中學習、幫助他人並且從中累積相關技能的經驗 - 任何你能想像得到的技能。 為什麼會有人為開源做出貢獻？有數不清的原因！…</em>opensource.guide</a></p></blockquote><p>是 Github 7000 顆星星的開源專案<br><a href="https://github.com/github/opensource.guide"><strong>github/opensource.guide</strong><br><em>Open Source Guides ( https://opensource.guide/) are a collection of resources for individuals, communities, and…</em>github.com</a></p><h2 id="為何要貢獻開源專案？"><a href="#為何要貢獻開源專案？" class="headerlink" title="為何要貢獻開源專案？"></a><strong>為何要貢獻開源專案？</strong></h2><blockquote><p> 原文寫的很好，我用我的話說出來。</p></blockquote><h3 id="1-打磨你的專業技能"><a href="#1-打磨你的專業技能" class="headerlink" title="1. 打磨你的專業技能"></a>1. 打磨你的專業技能</h3><p>專案中包含了撰寫程式碼、平面設計、使用者體驗設計、撰寫文章 … 等等的工作。只要你想，你就可以在開源專案中找到你的位置。</p><h3 id="2-認識與你有相似興趣的人"><a href="#2-認識與你有相似興趣的人" class="headerlink" title="2. 認識與你有相似興趣的人"></a>2. 認識與你有相似興趣的人</h3><p>我覺得這真的滿重要，在現實生活中要找到相同興趣的人就很困難了，但是透過貢獻開源，你可以無遠弗屆的認識世界各地與你有相似興趣的人。</p><h3 id="3-鍛鍊溝通能力"><a href="#3-鍛鍊溝通能力" class="headerlink" title="3. 鍛鍊溝通能力"></a>3. 鍛鍊溝通能力</h3><p>因為開源專案是一個「共同協做」的專案。你需要向他人解釋自己是用什麼方法實作，也會需要其他人的幫助。</p><h3 id="4-建立名聲"><a href="#4-建立名聲" class="headerlink" title="4. 建立名聲"></a>4. 建立名聲</h3><p>你在開源專案中實作的成果一切都是看的到的，這也意味開源專案是一個能好好火力展示的地方。</p><h3 id="5-學習人際關係的能力"><a href="#5-學習人際關係的能力" class="headerlink" title="5. 學習人際關係的能力"></a>5. 學習人際關係的能力</h3><p>開源為練習領導及管理的能力提供了很好的機會。例如如何解決衝突、組織團隊以及如何為工作的優先順序排列。</p><blockquote><p> 小訣竅：走進開源專案，就像你走進一群陌生人中，想要嘗試融入。這群人討論的非常深入了，你突然打岔肯定會讓人覺得奇怪。<br> 與其盲目地在社群中拋出你自己的看法，不如先觀察一下社群的氛圍後再提出，這樣你的想法被注意到的機會才會增加。</p></blockquote><h2 id="找尋專案開始貢獻"><a href="#找尋專案開始貢獻" class="headerlink" title="找尋專案開始貢獻"></a>找尋專案開始貢獻</h2><p>如果你還未貢獻任何一個開源專案的話，可以想想，你能夠為開源專案做些什麼？</p><p>可以從你有使用過的開源專案開始著手，跟你比較有關係的開源專案，或是你比較感興趣的開源專案，你才會積極的參加。</p><p>平均一個專案有 28% 的貢獻是隨意且偶然的，像是 Readme、改錯字、失效連結 … 等等的小地方。</p><h2 id="找到專案時，先確保專案是否接受貢獻"><a href="#找到專案時，先確保專案是否接受貢獻" class="headerlink" title="找到專案時，先確保專案是否接受貢獻"></a><strong>找到專案時，先確保專案是否接受貢獻</strong></h2><p>可以從幾個地方，看出專案是否活躍，樂於接受貢獻：</p><p>從 Master 分支上看看觀察</p><ul><li><p>最近一次的 Commit 是什麼時候？</p></li><li><p>Commit 的次數頻繁嘛？</p></li><li><p>專案目前有多少貢獻者？</p></li></ul><p>從 Issue 觀察</p><ul><li><p>目前有多少個 issue</p></li><li><p>維護者回覆 issue 是否迅速</p></li><li><p>是否有討論熱絡的 issue</p></li><li><p>issue 是否已經大量累積</p></li><li><p>最近 close 的 issue 是多久以前</p></li></ul><p>從 PR 觀察</p><ul><li><p>有多少處於進行中的 PR</p></li><li><p>提交 PR 後維護者回覆是否迅速</p></li><li><p>最近有多少 PR 被 Merge</p></li></ul><p>觀察專案的友善程度</p><ul><li><p>維護者的回應是否有幫助</p></li><li><p>討論過程是否親切</p></li><li><p>會不會審查 PR</p></li></ul><h2 id="如何將成果貢獻至開源專案"><a href="#如何將成果貢獻至開源專案" class="headerlink" title="如何將成果貢獻至開源專案"></a>如何將成果貢獻至開源專案</h2><p>最重要的是「有效的溝通」，把握幾個要點：</p><h3 id="1-交代來龍去脈"><a href="#1-交代來龍去脈" class="headerlink" title="1. 交代來龍去脈"></a>1. 交代來龍去脈</h3><p>讓他人快速的理解。如果是 Bug 交代清楚你想做的事情是什麼，你當實作了哪些步驟，以便重現錯誤。如果你想要發起一個新的想法，你要解釋為什麼你要這樣做，為什麼你覺得這樣會對專案有幫助。</p><h3 id="2-做好準備工作"><a href="#2-做好準備工作" class="headerlink" title="2. 做好準備工作"></a>2. 做好準備工作</h3><p>在尋求幫助之前，先確保你看過文件、相關 Issue 的討論，當你表達出強烈的意願時，人們會很樂意幫助你的。</p><h3 id="3-溝通時力求精簡明瞭"><a href="#3-溝通時力求精簡明瞭" class="headerlink" title="3. 溝通時力求精簡明瞭"></a>3. 溝通時力求精簡明瞭</h3><p>開源專案每次提交都是需要他人檢閱的，如果你能夠精準的表達你的看法，那麼你得到別人幫助的機會就會大幅提昇。</p><h3 id="4-大膽的提問（但是要有耐心！）"><a href="#4-大膽的提問（但是要有耐心！）" class="headerlink" title="4. 大膽的提問（但是要有耐心！）"></a><strong>4. 大膽的提問（但是要有耐心！）</strong></h3><p>每個人都有新手的時候，不要怕提問。需要注意的是長期維護的人不一定熟悉專案的每一個部分。協作時表現出你的耐心，你會得到相同回報。</p><h3 id="5-尊重社群的決定"><a href="#5-尊重社群的決定" class="headerlink" title="5. 尊重社群的決定"></a>5. 尊重社群的決定</h3><p>有時候你的看法跟社群的看法不一定相同。他們可能不接受你的建議。可能社群最後不接納你的建議。這時你可以試試看討論出折衷方案，或者將專案 fork 另起爐灶。</p><h2 id="提交之後"><a href="#提交之後" class="headerlink" title="提交之後"></a>提交之後</h2><h3 id="😭有可能沒有人理你"><a href="#😭有可能沒有人理你" class="headerlink" title="😭有可能沒有人理你"></a>😭有可能沒有人理你</h3><p>因為大家都很忙，尤其是熱門的開源專案。Issue 很多，維護者的人手不夠，此時就先耐心的等待。</p><blockquote><p> <em>千萬不要私下聯絡，在開源專案中，一切的溝通都應該是公開的。</em></p></blockquote><h3 id="🚧有人希望你修改你的貢獻"><a href="#🚧有人希望你修改你的貢獻" class="headerlink" title="🚧有人希望你修改你的貢獻"></a>🚧有人希望你修改你的貢獻</h3><p>這是好的開始，溝通、改進直到符合維護者得期待。</p><h3 id="👎你的貢獻沒有被採納"><a href="#👎你的貢獻沒有被採納" class="headerlink" title="👎你的貢獻沒有被採納"></a>👎你的貢獻沒有被採納</h3><p>你的工作最後沒有被採納，這時你可以問問維護者，為什麼沒有被採納。需要注意的是別花時間在爭論上，這會讓你樹立更多敵人。</p><h3 id="🎉-你的貢獻被接受。"><a href="#🎉-你的貢獻被接受。" class="headerlink" title="🎉 你的貢獻被接受。"></a>🎉 你的貢獻被接受。</h3><p>太棒了！你完成了一次開源貢獻！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ul><li><a href="https://opensource.guide/zh-hant/starting-a-project/"><strong>發起一個開源專案</strong></a></li><li><a href="https://opensource.guide/zh-hant/best-practices/"><strong>維護者最佳實踐</strong></a></li><li><a href="https://opensource.guide/zh-hant/leadership-and-governance/"><strong>領導與治理</strong></a></li><li><a href="https://opensource.guide/zh-hant/code-of-conduct/"><strong>建立一套行為準則</strong></a></li><li><a href="https://opensource.guide/zh-hant/finding-users/"><strong>找尋專案的使用者</strong></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Open Source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLDR 命令列神兵｜Linux 入門必裝</title>
      <link href="/2020/07/28/2020-07-28-tldr/"/>
      <url>/2020/07/28/2020-07-28-tldr/</url>
      
        <content type="html"><![CDATA[<h3 id="TL-DR-的意思是：哩供蝦？講重點好嘛？"><a href="#TL-DR-的意思是：哩供蝦？講重點好嘛？" class="headerlink" title="TL;DR 的意思是：哩供蝦？講重點好嘛？"></a>TL;DR 的意思是：哩供蝦？講重點好嘛？</h3><p><img src="https://cdn-images-1.medium.com/max/4000/0*UzoUjUPMJFmux31Z"></p><p>TLDR 能夠讓初學程式的新手 ，輕鬆了解命令列工具的各種 Linux 指令，並且自由運用。本篇文章分成幾個兩個部分：</p><ul><li><p>命令列工具 Command line tool 到底是什麼東西？</p></li><li><p>TLDR 是什麼東西？它如何幫助我們快速適應 Linux 命令列工具？</p></li></ul><p>話不多說，我們開始吧。</p><h2 id="命令列工具-Command-line-tool-到底是什麼？"><a href="#命令列工具-Command-line-tool-到底是什麼？" class="headerlink" title="命令列工具 Command line tool 到底是什麼？"></a>命令列工具 Command line tool 到底是什麼？</h2><p>命令列工具的英文是 Command Line Tool。下圖就是常見的命令列工具。那麼他的作用是什麼呢？</p><p><img src="https://cdn-images-1.medium.com/max/2728/0*SpNBj5mNjdNKxJoh.png" alt="source: [http://www.blogjava.net/xiaomage234/archive/2016/04/06/429988.html](http://www.blogjava.net/xiaomage234/archive/2016/04/06/429988.html)"></p><blockquote><p> 命令列工具的作用是「透過下指令的方式來做到你想做的事情」</p></blockquote><p>這是什麼意思？為什麼要透過下指令的方式讓做事？原因是：</p><blockquote><p> 用命令列工具的來做事情非常有效率。</p></blockquote><p>試想如果你想要安裝一個知名影音播放軟體 VLC，你會做些什麼事情？首先你會 Google，開幾個網頁，看看哪個載點比較值得信賴，然後選一個覺得不錯的下載，等到下載完成之後再安裝。</p><p>哪麼換成命令列工具呢，只要下一行指令即可</p><pre><code>brew cask install vlc</code></pre><p>來看看會發生什麼事情？</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*BCtzem0SRoWkPqgmnD2CTA.png"></p><p>VLC 已經裝好了，終端機顯示 VLC 安裝在 /Applications/VLC.app。接著我們打開 /Application 資料夾，VLC 已經安裝好了。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ZL62K8u1qBANq5qvGu5hVg.png"></p><p>也許你覺得用手動點擊也可以幫你做到同樣的事情，但是當這種有效率的小動作逐步累積的時候，就會造成效率上的極大差異。別人用 15 分鐘做好的事情你可能需要花一個小時。隨著做的事情越複雜效率的差異會越大。</p><blockquote><h1 id="命令列工具那麼好用？-那到底要怎麼用？"><a href="#命令列工具那麼好用？-那到底要怎麼用？" class="headerlink" title="命令列工具那麼好用？ 那到底要怎麼用？"></a>命令列工具那麼好用？ 那到底要怎麼用？</h1><h1 id="tldr-就是告訴我們各種-Linux-指令怎麼用的工具。"><a href="#tldr-就是告訴我們各種-Linux-指令怎麼用的工具。" class="headerlink" title="tldr 就是告訴我們各種 Linux 指令怎麼用的工具。"></a>tldr 就是告訴我們各種 Linux 指令怎麼用的工具。</h1></blockquote><h2 id="TLDR-登場，看看它如何大發神威"><a href="#TLDR-登場，看看它如何大發神威" class="headerlink" title="TLDR 登場，看看它如何大發神威"></a>TLDR 登場，看看它如何大發神威</h2><p>這下子就輪到我們的主角登場啦，TLDR！TLDR 能夠用最簡短的方式告訴你各種指令的用法。</p><p>TL;DR 是 too long; didn’t read 的縮寫，初學 Linux 的時候一堆指令的縮寫有夠難懂，什麼 ls、pwd、mv … 諸如此類的指令。當你不懂的時候怎麼辦？用 TLDR 就對了！</p><p>來示範一下怎麼用，假設我們不知道 ls 指令怎麼使用。想破頭也不知道 ls 指令到底用來幹嘛的？ 輸入 tldr ls 立刻了解 ls 如何使用。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*tvVThnRqBgBo-yhGebG62g.png"></p><p>從上圖中的第一行就告訴你，ls 的功用是列出目前資料夾的內容。如果你需要更多的用法，可以參照 tldr 幫你精選出來的各種常用指令。<strong>TLDR 絕對不完整，但是很容易上手！</strong></p><p>另一種對比的 Linux 完整文件的指令是 man，在終端機輸入 man ls ，呈現的樣子如下圖，落落長，跟 TLDR 完全相反，保證完整，但要看很久。我們常常只是要用 Linux 指令做一些簡單的事情，所以並不需要看的那麼仔細。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*nGYQ67CJakspwFZkrsaX3w.png"></p><p>再來試試看 pwd，可以很清楚的看到 pwd的功用是印出目前工作的目錄。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*F3QTTv-8uiohS8hvHr7cMg.png"></p><p>然後你再輸入一次 pwd，就可以很清楚的知道「顯示出來的內容是目前的工作目錄」</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*uwhc7FNdVPZTmBPQXWVe0A.png"></p><h2 id="TLDR-如何安裝？"><a href="#TLDR-如何安裝？" class="headerlink" title="TLDR 如何安裝？"></a>TLDR 如何安裝？</h2><p>既然是新手教學文，最後我們就來講一下怎麼安裝</p><pre><code>npm install -g tldr</code></pre><p>一行指令搞定，就是這麼輕鬆寫意。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>TLDR 的出現，讓我除了<a href="http://linux.vbird.org/">鳥哥的Linux 私房菜</a>以外多了一個認識 Linux 指令的管道。更有趣的它是一個開源專案，如果用 tldr 某某指令 找不到結果，你還可以自行貢獻自己的小抄，讓世界上的其他人用得到。對於新手來講是一個滿好入門的工具。</p><p>如果覺得我的文章對你有幫助 ，<a href="https://medium.com/@LukaTW">來 follow 我吧</a>！最近我會常寫文的呦。<br>也別忘了 follow 星巴哥技術週刊，每週推送優質原創文章！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes IDE | Lens 用圖形化介面管理 K8S</title>
      <link href="/2020/06/30/2020-06-30-lens-the-ide-for-kubernetes/"/>
      <url>/2020/06/30/2020-06-30-lens-the-ide-for-kubernetes/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/2400/0*P3QeV7d9iPBNeOCr.png" alt="https://k8slens.dev"></p><p>以往我們在管理 Kubernetes 集群的時候，需要大量的命令列操作，需要去四處找尋需要的資訊，例如你想看 Node 的狀態你可能需要在 AWS Console 上面看，如果你用的是 GKE 的話你就需要到的 GCP 的後台上看。你想要進入 Pod 你需要先下 kubectl get pods取得 pod 列表，接著再下 kubectl exec -it pod/xxxpod – bash 進入。</p><p>這些功能現在 Lens 全部幫你整合進去了。它能夠讓你快速的瀏覽你的 K8S 集群狀況，並且即時反應 K8S 集群的狀態讓你可以做相對應的反應。我們就來看看 Lens 有哪些殺手級的功能吧！</p><h2 id="Lens-有哪些殺手級功能"><a href="#Lens-有哪些殺手級功能" class="headerlink" title="Lens 有哪些殺手級功能"></a>Lens 有哪些殺手級功能</h2><h2 id="1-實時監控-pod-的狀態-realtime-monitoring"><a href="#1-實時監控-pod-的狀態-realtime-monitoring" class="headerlink" title="1. 實時監控 pod 的狀態 (realtime monitoring)"></a>1. 實時監控 pod 的狀態 (realtime monitoring)</h2><p>可以實時監控 pod 的狀態，不需要手動刷新，這個功能我覺得滿方便的。一般來說你想要重複獲取 pod 的狀態需要在終端機中輸入 kubectl get pods，用終端機下指令的方式只能知道下指令的「當下的狀態」，如果你想要獲得你想要的狀態，你必須不斷下指令。而現在使用 Lens 你只需要瞄一下螢幕，就可以知道 pod 就緒了沒，因為 Lens 會告訴你最即時的 Pod 狀態。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ce7US7IAR0EPDvYlQIrhBQ.png" alt="為了不透漏機密資訊我使用 Lens 官方網站的圖片 ([https://k8slens.dev/](https://k8slens.dev/))"></p><h2 id="2-快速查看-Pod-的-CPU-、記憶體用量"><a href="#2-快速查看-Pod-的-CPU-、記憶體用量" class="headerlink" title="2. 快速查看 Pod 的 CPU 、記憶體用量"></a>2. 快速查看 Pod 的 CPU 、記憶體用量</h2><p>我覺得這是令人滿驚艷的功能，Newrelic 針對 K8S 推出的監控工具操作起來都沒有那麼直覺。因此目前的監控方案用 Newrelic 來看吞吐量與 request 的消耗時間，方便做一些效能調校。而觀看 Kubernetes 整體的狀態則是使用 Lens 為主。能夠快速找到想要的資訊並能夠反應實時(realtime)的狀態真的挺重要。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Jv4voRbrXD7vFogoFwBskg.png" alt="image from [https://k8slens.dev/](https://k8slens.dev/)"></p><h2 id="3-快速觀看-Node-的狀態"><a href="#3-快速觀看-Node-的狀態" class="headerlink" title="3. 快速觀看 Node 的狀態"></a>3. 快速觀看 Node 的狀態</h2><p>Pod 是 Kubernetes 中的最小單位，但最後他還是會跑在某一台實體機器，也就是 Node 上面，所以我們可以快速的看到 Node 的狀態也是很重要的。</p><p>沒錯，Lens 就是那麼的威，可以快速的看到 K8S 中 Node 的 CPU、記憶體用量，還有 Node 上跑了哪些 Pod，運行了哪些資源。</p><p>我覺得根本整合度極高。偏愛用終端機的我，目前也離不開 Lens 的方便。</p><p><img src="https://cdn-images-1.medium.com/max/3340/1*XGv9gmMz73ZKZjw_bEb_ww.png"></p><h2 id="4-Event-列表，能夠即時知道-K8S-集群發生了什麼事"><a href="#4-Event-列表，能夠即時知道-K8S-集群發生了什麼事" class="headerlink" title="4. Event 列表，能夠即時知道 K8S 集群發生了什麼事"></a>4. Event 列表，能夠即時知道 K8S 集群發生了什麼事</h2><p>例如：一個 pod 中的 readiness probe 告訴你：你的 pod 還沒有準備好啦！Lens 就有這個功能，可以即時知道 K8S Cluster 的事件。不然很有可能 Kubernetes 發生了一些事情，但是你沒有察覺。</p><h2 id="5-Pod-gt-Terminal-一鍵搞定"><a href="#5-Pod-gt-Terminal-一鍵搞定" class="headerlink" title="5. Pod -&gt; Terminal 一鍵搞定"></a>5. Pod -&gt; Terminal 一鍵搞定</h2><p>平常要進入某 Pod 的時候先 k get pods，然後複製貼上 pod 的名稱，輸入 k exec -it pod/your-pod-name – /bin/bash 每次做真的有點煩。Lens 直接列出所有 Pod，你只需要點選有問題的 Pod，或是你想要進去的 Pod，點擊終端機鍵，即可連進 Pod 裡面。真～是～太～方～便～啦～！</p><p><img src="https://cdn-images-1.medium.com/max/2790/1*yGkNYU4kdqJ85C7u-Aq0Og.png"></p><h2 id="為什麼-Kubernetes-能夠有一款-IDE？"><a href="#為什麼-Kubernetes-能夠有一款-IDE？" class="headerlink" title="為什麼 Kubernetes 能夠有一款 IDE？"></a>為什麼 Kubernetes 能夠有一款 IDE？</h2><p>最後來聊一聊為什麼 Kubernetes 能夠出一款 IDE？一般來說 IDE 是基於語言設計出的 IDE，例如：java 有 Eclipse，c# 有 visual studio，Python 有 Pycharm，PHP 有 Phpstorm… 等等。</p><p>這些以語言為基礎的 IDE 可以提供語言為基礎的一些好用方法。例如方法的自動完成、原始碼的快速查找，或是提取方法、提取參數 … 等等重構的功能。基於每個語言的特性，IDE 提供不同的特性。</p><p>Kubernetes 的 IDE 是怎麼回事呢？各家提供雲服務的平台紛紛推出相對應 K8S 的服務。例如：Google 有 GKE，AWS 有 EKS，或是也可以自行架設 Kubernetes 集群。</p><p>這些 Kubernetes 服務都遵循著相同的 Kubernetes 規範，聽起來好像有點繞，如果不是因為有 Kubernetes 這樣明確的規範，就不可能有 IDE 產生。</p><p>例如：Google 的雲端平台 GCP 上如果你想要開機器，跟 AWS 平台上你想要開機器，那麼你是無法用一套 IDE 來監控或是控制兩者的機器狀態的。因為 Google 和 AWS 機器呼叫的規格各自有各自的定義，無法共通。</p><p>而 Kubernetes 大家都是透過 kubectl 來跟 Kubenetes Control Panel 溝通。Kubenetes 中的元件，例如：Pod、Service、Deployment … 等等，在各家雲服務商也都是遵照相同規範實作，因此可以使用一款 IDE，就能夠監控各家的 Kubernetes 集群。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a><strong>結語</strong></h2><p>Lens 的出現讓我用最少的力氣就可以快速的看到想看的資訊。而 Newrelic 的方式比較像是以往的 APM 的監控法。跟以前只有機器的時代，多了一層 Kubernetes 多了滿多思考點。另外警報(Alert)又是另一套系統了。如何在問題出現的時候，快速定位問題，在使用者察覺前解決掉，是一個有趣的挑戰。</p><blockquote><p> 最後不免俗的感謝大家觀看，喜歡我的文章請訂閱 Starbugs 星巴哥技術專欄，每週推送原創好文😀😀😀</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TPM — 套件管理工具 ，讓你的 TMUX 更好用</title>
      <link href="/2020/06/02/2020-06-02-tmp-let-your-tmux-better/"/>
      <url>/2020/06/02/2020-06-02-tmp-let-your-tmux-better/</url>
      
        <content type="html"><![CDATA[<p>最近因為工作上需要用到開很多個視窗的情景，研究了一下如何把 tmux 變得更具有生產力。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*wJrJdR3tFO84Tdsd.jpg"></p><h2 id="tmux-是什麼？"><a href="#tmux-是什麼？" class="headerlink" title="tmux 是什麼？"></a>tmux 是什麼？</h2><p><a href="https://github.com/tmux/tmux">tmux</a> 是一個很好用的遠端 session 管理套件，兼具效能與功能性，可以讓你在遠端伺服器中，輕易管理背景執行程式。</p><p>Larry 在 **<a href="https://larrylu.blog/tmux-33a24e595fbc">終端機 session 管理神器 — tmux</a> **文章中介紹了基本的概念、使用方式與經典的使用情景。如果沒有看過的話，請看文章了解一下。<br><a href="https://larrylu.blog/tmux-33a24e595fbc"><strong>終端機 session 管理神器 — tmux</strong><br><em>身為一名開發者對終端機應該不陌生，不管是要執行腳本、ssh 到遠端伺服器都會用到終端機。<br>這邊要介紹給大家一個工具 tmux，tmux 是個 terminal multiplexer，可以讓你的終端機更好用</em>larrylu.blog</a><a href="https://larrylu.blog/tmux-33a24e595fbc">t</a></p><p>不過其實不看也沒什麼關係啦，看我寫得就好<em>。</em></p><h2 id="Hello-tpm"><a href="#Hello-tpm" class="headerlink" title="Hello, tpm"></a>Hello, tpm</h2><p><a href="https://github.com/tmux-plugins/tpm">tpm</a> 是 tmux 的套件管理工具，英文是 Tmux Plugin Manager。tmux 之於 tpm 就如同是 nodejs 之於 npm。是一個在 github 上面有 6100 顆星星的開源專案。</p><p>今天我的重點放在 tpm 的介紹上，如果還沒安裝 tmux，請按照 **<a href="https://larrylu.blog/tmux-33a24e595fbc">終端機 session 管理神器 — tmux</a> **文章中的教學逐步安裝並學習使用方法。</p><p>回過頭來，我們想要用 tpm 來安裝一些好用的套件，先安裝好 tpm。 首先 git clone tpm 至本機。</p><pre><code>git clone [https://github.com/tmux-plugins/tpm](https://github.com/tmux-plugins/tpm) ~/.tmux/plugins/tpm</code></pre><p>接著修改 ~/.tmux.conf 檔案的內容，將下列內容複製貼上至檔案中。</p><pre><code class="bash">    # List of plugins    set -g @plugin &#39;tmux-plugins/tpm&#39;    set -g @plugin &#39;tmux-plugins/tmux-sensible&#39;    # Other examples:    # set -g @plugin &#39;github_username/plugin_name&#39;    # set -g @plugin &#39;git@github.com/user/plugin&#39;    # set -g @plugin &#39;git@bitbucket.com/user/plugin&#39;    # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)    run -b &#39;~/.tmux/plugins/tpm/tpm&#39;</code></pre><p>安裝完成後在終端機中輸入下列指令或是重開終端機即可載入完成。</p><pre><code>tmux source ~/.tmux.conf</code></pre><h2 id="要怎麼使用-tpm-安裝-tmux-套件"><a href="#要怎麼使用-tpm-安裝-tmux-套件" class="headerlink" title="要怎麼使用 tpm 安裝 tmux 套件"></a>要怎麼使用 tpm 安裝 tmux 套件</h2><p>安裝 tpm 套件可能跟你想的不太一樣，直接修改 ~/.tmux.conf 檔案的內容，並且重啟。例如你想要安裝 <a href="https://github.com/tmux-plugins/tmux-copycat">tmux-copycat</a>。</p><pre><code>vim ~/.tmux.conf</code></pre><p>加入這一行</p><pre><code class="bash">    set -g @plugin &#39;tmux-plugins/tmux-copycat&#39;</code></pre><p>接著，重開 tmux session 或是在 tmux 中輸入 prefix (ctrl+b) + I 即可。</p><h2 id="ctrl-b-有點遠，修改-prefix-為-ctrl-a"><a href="#ctrl-b-有點遠，修改-prefix-為-ctrl-a" class="headerlink" title="ctrl+b 有點遠，修改 prefix 為 ctrl + a"></a>ctrl+b 有點遠，修改 prefix 為 ctrl + a</h2><p>tmux 大部分的指令是由組合鍵 prefix + 某某鍵所構成。 prefix 預設是 ctrl + b，外國鄉民大多是將 prefix 修改成 ctrl + a ，你也可以設成你喜歡的樣子，設定方法很簡單。在 .tmux.conf 中加上以下內容即可將 prefix 變成ctrl + a。</p><pre><code class="bash">    # remap prefix from &#39;C-b&#39; to &#39;C-a&#39;    unbind C-b    set-option -g prefix C-a    bind-key C-a send-prefix</code></pre><h2 id="介紹幾個好用的套件"><a href="#介紹幾個好用的套件" class="headerlink" title="介紹幾個好用的套件"></a>介紹幾個好用的套件</h2><h3 id="tmux-yank"><a href="#tmux-yank" class="headerlink" title="tmux-yank"></a><a href="https://github.com/tmux-plugins/tmux-yank">tmux-yank</a></h3><p>讓你的 tmux 可以用系統的剪貼簿，支援 osx, linux, WSL(Windows Subsystem for Linux) … 等等的環境。</p><h3 id="tmux-pain-control"><a href="#tmux-pain-control" class="headerlink" title="tmux-pain-control"></a><a href="https://github.com/tmux-plugins/tmux-pain-control">tmux-pain-control</a></h3><p>這個套件有三大功能，第一是切割視窗，第二是在視窗中跳躍，第三是縮放視窗大小。</p><h3 id="讓切割視窗變得更加簡單"><a href="#讓切割視窗變得更加簡單" class="headerlink" title="讓切割視窗變得更加簡單"></a>讓切割視窗變得更加簡單</h3><p>這兩個是 tmux 預設的切割視窗快捷鍵</p><ol><li><p>prefix + “：進行<strong>水平</strong>分割</p></li><li><p>prefix + %：進行<strong>垂直</strong>分割</p></li></ol><p>這兩個符號我一直記不起來😭，但是在使用<a href="https://github.com/tmux-plugins/tmux-pain-control">tmux-pain-control</a> 之後：</p><ol><li><p>prefix + |：進行<strong>水平</strong>分割</p></li><li><p>prefix + -：進行<strong>垂直</strong>分割</p></li></ol><p>圖型記憶法，真是太好記了。連續技用起來會有這樣的效果：</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*P3MQZDaihxlpHZwBNTvdpQ.gif"></p><h3 id="用-vim-的方向鍵跳轉視窗"><a href="#用-vim-的方向鍵跳轉視窗" class="headerlink" title="用 vim 的方向鍵跳轉視窗"></a>用 vim 的方向鍵跳轉視窗</h3><ol><li><p>prefix + h：往左跳</p></li><li><p>prefix + j：往上跳</p></li><li><p>prefix + k：往下跳</p></li><li><p>prefix + l：往右跳</p></li></ol><p><img src="https://cdn-images-1.medium.com/max/2000/1*F-mk4CsL1oh36EDK_cRr0g.gif"></p><h3 id="用-vim-的方向鍵縮放視窗"><a href="#用-vim-的方向鍵縮放視窗" class="headerlink" title="用 vim 的方向鍵縮放視窗"></a>用 vim 的方向鍵縮放視窗</h3><ol><li><p>prefix + shift + h：視窗邊界往左移</p></li><li><p>prefix + shift + j：視窗邊界往上移</p></li><li><p>prefix + shift + k：視窗邊界往下移</p></li><li><p>prefix + shift + l：視窗邊界往右移</p></li></ol><p><img src="https://cdn-images-1.medium.com/max/2000/1*lv0mJUFUVHmxCZMPuctZRg.gif"></p><h3 id="tmux-copycat"><a href="#tmux-copycat" class="headerlink" title="tmux copycat"></a><a href="https://github.com/tmux-plugins/tmux-copycat">tmux copycat</a></h3><p>tmux copycat 可以讓你不使用滑鼠就能夠複製文字。這個套件非常好用，礙於時間不夠無法錄製完整操作。殘念。</p><h3 id="tmux-resurrect"><a href="#tmux-resurrect" class="headerlink" title="tmux-resurrect"></a><a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a></h3><p>讓系統重啟的時候保持 tmux 的設定。</p><h3 id="tmux-open"><a href="#tmux-open" class="headerlink" title="tmux-open"></a><a href="https://github.com/tmux-plugins/tmux-open">tmux-open</a></h3><p>能夠讓你快速的打開你選取到的文字對應的超連結或是檔案。</p><h3 id="tmux-prefix-highlight"><a href="#tmux-prefix-highlight" class="headerlink" title="tmux-prefix-highlight"></a><a href="https://github.com/tmux-plugins/tmux-prefix-highlight">tmux-prefix-highlight</a></h3><p>讓你知道你有沒有成功觸發 prefix，如果按成功了，在下方顯示列會有成功觸發的圖案。</p><h3 id="tmux-continuum"><a href="#tmux-continuum" class="headerlink" title="tmux-continuum"></a><a href="https://github.com/tmux-plugins/tmux-continuum">tmux-continuum</a></h3><p>持續幫你儲存 tmux 的設定。</p><h3 id="tmux-sensible"><a href="#tmux-sensible" class="headerlink" title="tmux-sensible"></a><a href="https://github.com/tmux-plugins/tmux-sensible">tmux-sensible</a></h3><p>讓 tmux 比較合乎邏輯，不然 tmux 有些預設的設定實在是有點難用，這是必備的 tmux 套件。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>有了 tpm 可以輕鬆安裝好用套件，這讓 tmux 平易進人多了，操作上不再需要記憶太多奇怪的快捷鍵。就可以讓生產力獲得大幅的提升，真滴好。</p><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ul><li><p><a href="https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/">Making tmux Pretty and Usable — A Guide to Customizing your tmux.conf</a></p></li><li><p><a href="https://medium.com/actualize-network/a-minimalist-guide-to-tmux-13675fb160fa">A minimalist guide to tmux</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unit Test 中的替身：搞不清楚的Dummy 、Stub、Spy、Mock、Fake</title>
      <link href="/2020/05/05/2020-05-05-unit-test/"/>
      <url>/2020/05/05/2020-05-05-unit-test/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/2000/0*Xn1CY4WKjOu3AdhL.jpeg"></p><p>最近開始接觸單元測試，一堆名詞看不懂，來狠狠地 K 一下。而單元測試中的最佳男配角，就是替身 Double。藉由寫一篇文章的方式來讓自己更了解單元測試中的重要部分。一起來學寫測試，Go Go !!</p><blockquote><p> <em>註：接觸時間還很短，有錯還請不吝指正，如果之後發現我有理解錯誤再回來更正。</em></p></blockquote><h2 id="單元測試是什麼？"><a href="#單元測試是什麼？" class="headerlink" title="單元測試是什麼？"></a>單元測試是什麼？</h2><p>單元測試可以讓你快速驗證程式的行為。了解單元測的話首先來介紹一下 SUT 目標對象。</p><p>舉個例子：你想要測試一台車是不是可以開，那麼 SUT 目標對象就是這台車。</p><p>為了確保這台車可以開，那麼就可以寫一個「這台車應該要可以開」的測試。如果這台車發生了故障，測試就會告訴你，這台車是壞掉的。</p><p>單元測試讓你的程式更容易維護。原因在於你能夠對程式寫測試，代表你寫的程式的「使用說明書」清楚易懂。使用說明書很容易懂，就可以直接拿來用，減少重複的程式碼，符合 DRY (Don’t Repeat Yourself) 原則。</p><p>寫程式最大的成本在於維護，寫很簡單，但是要維護可就是個不容易的事情了。為了降低維護的成本，導入單元測試可以大大降低出錯的可能性，並且快樂地重構。</p><h2 id="替身是什麼？"><a href="#替身是什麼？" class="headerlink" title="替身是什麼？"></a>替身是什麼？</h2><p>下圖是火影忍者的替身之術，替身之術的原理是：當敵人對你發動攻擊時，你使用替身之術，就可以讓替身承受敵人的攻擊，而自己不會受到傷害。圖中的木頭就是呼叫替身之術後，用來承受敵人攻擊的替身。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*j4xWCtfCJnjEpjvR.png"></p><p>所以火影忍者替身之術跟 Unit Test 的替身有什麼關係？你在程式中使出替身之術的時候，替身 Double 就會出現在你的程式裡面了。</p><h2 id="為什麼要在程式中使用替身-Double-呢？"><a href="#為什麼要在程式中使用替身-Double-呢？" class="headerlink" title="為什麼要在程式中使用替身 Double 呢？"></a>為什麼要在程式中使用替身 Double 呢？</h2><p>原因在於你想要測試的 SUT 目標對象通常會有很多「依賴」DOC。一樣舉個例子：剛剛的 SUT 目標對象是「一台車」很容易寫測試，只要測試這台車可以開就好。</p><p>但是如果一台車停在停車場，然後又爆胎。或是一台車掉到海裡。這些情況，一台車的 DOC 依賴變多了，造成你的測試更加複雜，越多的 DOC 依賴會造成你的測試越難寫，也造成你的程式行為更加複雜，難以預測。</p><p>那麼就進入正題來介紹測試中的幾種替身吧</p><h2 id="測試中的五種替身"><a href="#測試中的五種替身" class="headerlink" title="測試中的五種替身"></a>測試中的五種替身</h2><p>測試中的 Double 替身分為五種：Dummy Object、Test Stub、Test Spy、Mock Object、Fake Object。先來介紹第一種 Dummy Object 冒牌貨</p><h2 id="Dummy-Object"><a href="#Dummy-Object" class="headerlink" title="Dummy Object"></a>Dummy Object</h2><p>Dummy Object 英文直譯冒牌貨，顧名思義就是個冒牌貨。他的用途是用來填充 SUT 目標測試對象中需要的物件。而 Dummy 不會對 SUT 測試目標造成任何的影響。純粹的填充物件，讓測試程式能夠運行。</p><h2 id="Test-Stub"><a href="#Test-Stub" class="headerlink" title="Test Stub"></a>Test Stub</h2><p>我們想要驗證的 SUT 回傳值，這時候 Stub 就可以派上用場啦。聽起來有點玄，一樣舉個例子：例如：現在我們的測試目標 SUT 是一個手電桶，我們想要驗證呼叫打開 on 方法的結果，而一個手電筒裡面需要裝電池，電池可能會沒電，但是我不想讓電池沒電這個因素影響我的測試。所以我做了一組替身電池 (Stub Object) 塞進這個手電筒裡面。讓我可以輕鬆驗證 SUT 的回傳值。</p><pre><code>class Flashlight  attr :battery    def initialize(battery)    @battery = battery  end    def on    battery.have_energy? ? &#39;flashlight is turn on!&#39; : &#39;no energy&#39;  endendFlashlight.new(StubBattery.new).on # 電池有沒有電不會影響結果。</code></pre><h2 id="Test-Spy"><a href="#Test-Spy" class="headerlink" title="Test Spy"></a>Test Spy</h2><p>Spy 用來驗證 SUT 與對其他 DOC 物件造成的效果，例如：今天阿牛去找朋友聊天的時候，朋友物件內部的聊天次數就會加一，而當我們想想要驗證朋友物件的聊天次數是不是如我們所預期的增長時，我們就可以派出間諜朋友，來驗證「 SUT 阿牛是否有跟朋友聊三次天」之類的期待。</p><pre><code class="ruby">    class 阿牛        def initialize(friend)        @friend = friend      end        def chat_to_friends        friend.chat!      end    end    class Friend       attr: chat_count        def chat        @chat_count ||= 0        @chat_count += 1      end    end    cow = 阿牛.new(spy_friend)    cow.chat_to_friends    cow.chat_to_friends    cow.chat_to_friends    expect(spy_friend.chat_count).to eq(3)</code></pre><h2 id="Mock-Object"><a href="#Mock-Object" class="headerlink" title="Mock Object"></a>Mock Object</h2><p>Mock 是一個能夠判斷 SUT 是不是有正確使用 DOC 的替身。Mock 跟 Spy 的最大差別是，Mock 用來驗證 SUT 的行為，而 Spy 用來驗證 SUT 對 DOC 狀態的改變。</p><h2 id="Fake-Object"><a href="#Fake-Object" class="headerlink" title="Fake Object"></a>Fake Object</h2><p>Fake Object 假物件是一個簡化的 DOC (依賴元件)，例如：一台真實的飛機有很多零件，但是我們其實只需要他有外殼，並且可以飛，可以降落 … 等等的行為。所以做一個簡單版的假物件。假物件不需要考慮跟 SUT 目標對象的間接互動(Indirect input , indirect output)。</p><h2 id="其他不錯的資源"><a href="#其他不錯的資源" class="headerlink" title="其他不錯的資源"></a>其他不錯的資源</h2><ul><li><p><a href="https://blog.pragmatists.com/test-doubles-fakes-mocks-and-stubs-1a7491dfa3da">Test Doubles — Fakes, Mocks and Stubs.</a></p></li><li><p><a href="https://julianchu.net/2018/08/16-test.html">測試中常見的名詞：Stub, Dummy, Mock..等等</a></p></li><li><p><a href="https://www.jyt0532.com/2018/01/04/test-double-spy/">測試替身(5) — Spy</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 教學 02 — 在 Minikube 上部屬 Python Flask 應用程式</title>
      <link href="/2020/03/10/2020-03-20-running-flask-on-minikube/"/>
      <url>/2020/03/10/2020-03-20-running-flask-on-minikube/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Minikube、kubectl 終於派上用場囉</p></blockquote><p><img src="https://cdn-images-1.medium.com/max/2088/0*BVfI3gXXICtmPkCu.jpeg"></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在 <a href="https://medium.com/starbugs/954caa9b1558">前一篇</a> 中我們弄懂了 K8S Cluster、Node、Pod 與 Container 的關係，並且在文章末段介紹了能夠與 kubectl -「能夠與 K8S 溝通的命令列工具」。這次我們用實際的操作，來認識容器化的實際過程，並把它部屬到本地的 Kubernetes 上面。</p><h2 id="什麼是-Minikube-？"><a href="#什麼是-Minikube-？" class="headerlink" title="什麼是 Minikube ？"></a>什麼是 Minikube ？</h2><p>Minikube 是一個單節點的 Kubernetes Cluster，可以安裝在本機上，支援 Windows 與 Mac Minikube 只有一個 Node (節點)。</p><p>還記得 Node 是什麼嘛？來複習一下，Node 是一台實體機器，一個工作者 (worker)。上面可以搭載許多個 Pod，而 Pod 是 Kubernetes 的最小部屬單位。一個 Pod 由一個 Container 或是多個 Container 所組成。</p><p>看完之後應該還是覺得有點繞，不過沒關係，因為今天我們就要透過實作來了解 Pod 到底是什麼。</p><h3 id="安裝-Minikube"><a href="#安裝-Minikube" class="headerlink" title="安裝 Minikube"></a>安裝 Minikube</h3><p>首先安裝 Minikube，請到<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">官方網頁</a>下載安裝，Windows、Mac、Linux 都可以安裝。</p><p>Windows 需要先安裝 <a href="https://chocolatey.org/">Chocolatey</a> 套件管理工具，接著輸入指令</p><pre><code>choco install minikube</code></pre><p>即可完成安裝。而 Mac 則可以透過 homebrew 來完成安裝</p><pre><code>brew install minikube </code></pre><h2 id="起步走，開始使用-Minikube-與-kubectl"><a href="#起步走，開始使用-Minikube-與-kubectl" class="headerlink" title="起步走，開始使用 Minikube 與 kubectl"></a>起步走，開始使用 Minikube 與 kubectl</h2><p>安裝完 minikube 之後，第一步先啟動 Minikube，如果你是第一次啟動，Minikube 會幫你建立新的虛擬機器 (VM)。</p><pre><code>minikube start</code></pre><p>眼尖的你看到最後一行，啟動好 minikube 的同時，kubectl 也準備就緒了。來看看 minikube 的狀態。</p><pre><code>minikube status</code></pre><p>上一篇提到的 kubelet 與 api-server 已經成功跑起來。複習一下 api-server 是 Master 的元件，kubelet，則是 Node 上負責跟 Master 溝通的元件。因為 Minikube 只有單一個 Node，所以同時具備 Master 與 Node 的元件。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*g0EkSg37jwB0wHNb.png"><br><a href="https://kubernetes.io/docs/concepts/overview/components/">ref: https://kubernetes.io/docs/concepts/overview/components/</a></p><p>使用 kubectl 查看目前 Cluster 中的狀態</p><pre><code>kubectl get all</code></pre><p>裡面只有一個 kubernetes 的 service，因為我們的 Kubenetes Cluster 中還沒有安裝任何的東西。</p><h2 id="建立一個-Python-的-Flask-Web-應用程式"><a href="#建立一個-Python-的-Flask-Web-應用程式" class="headerlink" title="建立一個 Python 的 Flask Web 應用程式"></a>建立一個 Python 的 Flask Web 應用程式</h2><p>建立資料夾名稱為 flask_app</p><pre><code>mkdir flask_app</code></pre><p>建立一個子資料夾 app ，並在之中建立一個 app.py 檔案</p><pre><code class="py"> # flask_app/app/app.pyfrom flask import Flaskapp = Flask(__name__)@app.route(&quot;/&quot;)def hello():    return &quot;Hello, World!&quot;if __name == &#39;__main__&#39;:    app.run(debug=True, host=&#39;0.0.0.0&#39;)</code></pre><p>建立 requirement.txt</p><pre><code># flask_app/app/requirement.txtFlask</code></pre><p>在本地端試跑，先安裝依賴的套件，目前只有一個就是 flask</p><pre><code>pip3 install -r requirements.txt</code></pre><p>接著執行看看</p><pre><code>python main.py</code></pre><p>打開 <a href="http://0.0.0.0:5000/">0.0.0.0:5000</a> 即可看到以下訊息</p><pre><code>Hello from Python!</code></pre><h2 id="容器化-Flask-Web-應用程式"><a href="#容器化-Flask-Web-應用程式" class="headerlink" title="容器化 Flask Web 應用程式"></a>容器化 Flask Web 應用程式</h2><p>建立一個 Dockerfiile，意思是用 Python 3.7 作為基本的容器，並把專案中的程式碼放進去。並在最後執行 python main.py。</p><pre><code class="dockerfile">FROM python:3.7RUN mkdir /appWORKDIR /appADD ./app /app/RUN pip install -r requirements.txtEXPOSE 5000CMD [&quot;python&quot;, &quot;/app/main.py&quot;]</code></pre><p>製作 docker image，並給他一個名稱flask_app</p><pre><code>    docker build . -t flask_app</code></pre><p>可以成功 build，沒有問題</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*bSSrv5vrsVqBO2xGZbs0qA.png"></p><p>用 docker images 查看剛剛製作的 image</p><p><img src="https://cdn-images-1.medium.com/max/2140/1*ta80syB_HoOKMwLmSLOdQA.png"></p><p>跑跑看剛剛製作好的 image</p><pre><code>    docker run -p 5001:5000 flask_app</code></pre><p>打開 <a href="http://0.0.0.0:5001/">http://0.0.0.0:5001/</a> 一樣會看到</p><pre><code>Hello from Python!</code></pre><p>到這邊我們已經製作完成 Docker image。接下來就要把它部屬到 Minikube 上。</p><h2 id="部屬-Python-Flask-應用程式到-Minikube-上"><a href="#部屬-Python-Flask-應用程式到-Minikube-上" class="headerlink" title="部屬 Python Flask 應用程式到 Minikube 上"></a><strong>部屬 Python Flask 應用程式到 Minikube 上</strong></h2><p>首先我們先來建立一個檔案 k8s.yaml</p><pre><code class="yaml">    apiVersion: v1    kind: Service    metadata:      name: flask-app-service    spec:      selector:        app: flask-app      ports:      - protocol: &quot;TCP&quot;        port: 5000        targetPort: 5000      type: LoadBalancer        ---    apiVersion: apps/v1    kind: Deployment    metadata:      name: flask-app    spec:      selector:        matchLabels:          app: flask-app      replicas: 3      template:        metadata:          labels:            app: flask-app        spec:          containers:          - name: flask-app            image: flask_app:latest            imagePullPolicy: Never            ports:            - containerPort: 5000</code></pre><p>命令列輸入，即可將 flask_app 部屬至 minikube</p><pre><code>kubectl apply -f k8s.yaml</code></pre><p>部屬完的畫面</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*G45yB7h77nfGQ--OtDgG1A.png"></p><p>接著訪問</p><p>剛剛的 k8s.yaml 只有聲明 deployment 與 service 兩種物件，但卻產生了 3 個 pod，原因就在於，deployment 裡面聲明了需要 3 個 pod，所以會擴展出 3 個。</p><p>輸入以下指令查看暴露出來的 IP</p><pre><code>minikube service flask-app-service --url</code></pre><p>訪問 <a href="http://192.168.64.8:30914/">http://192.168.64.8:30914</a> 就可以看到 Kubernetes 上的 Flask 伺服器回傳的畫面。</p><pre><code>Hello from Python!</code></pre><p>剛剛我們撰寫 k8s.yaml 時，Service Type 使用的是 LoadBalancer，所以這可是具有負載均衡能力，並且擁有 3 個 Pod 作為支撐的服務。</p><p>是不是很神奇？今天我們做了三種 Hello from Python，分別是：</p><ul><li><p>在本地端運行 Flask 伺服器</p></li><li><p>在單個 Docker 容器運行 Flask 伺服器</p></li><li><p>在 Kubernetes 中的 Cluster 運行 Flask 伺服器</p></li></ul><p>一步一步的將應用程式，容器化，之後再用 K8S 打造成產品等級的服務。Kubernetes 就是這麼的有趣！</p><p>如果喜歡我寫的文章，歡迎追蹤 本人的帳號 <a href="https://medium.com/@LukaTw">@LukaTW</a> 與 <a href="https://medium.com/starbugs">StarBugs Weekly 星巴哥技術週刊</a> 🙂🙂🙂</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Minikube </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 教學 01 - 概念與架構</title>
      <link href="/2020/02/11/2020-02-11-kubernetes-tutorial-01/"/>
      <url>/2020/02/11/2020-02-11-kubernetes-tutorial-01/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼該學-K8S-？-Pod、Node-是什麼？搞的我好亂呀！"><a href="#為什麼該學-K8S-？-Pod、Node-是什麼？搞的我好亂呀！" class="headerlink" title="為什麼該學 K8S ？ Pod、Node 是什麼？搞的我好亂呀！"></a>為什麼該學 K8S ？ Pod、Node 是什麼？搞的我好亂呀！</h2><p><img src="https://cdn-images-1.medium.com/max/3840/0*CmyuLdGdOQJLKS5t.png"></p><p>適合讀者：</p><ul><li><p>已經會使用 Docker，但是不知道 Kubernetes 是什麼。</p></li><li><p>想看看 Kubernetes 到底在幹嘛的人。</p></li></ul><h2 id="為什麼該用-Kubernetes"><a href="#為什麼該用-Kubernetes" class="headerlink" title="為什麼該用 Kubernetes?"></a>為什麼該用 Kubernetes?</h2><p>Kubernetes 中間共有八個字母有點長，所以大家就將他簡稱為 K8S。但使用 K8S 有什麼好處？</p><h3 id="1-可以更好的運用雲端或是實體資源"><a href="#1-可以更好的運用雲端或是實體資源" class="headerlink" title="1. 可以更好的運用雲端或是實體資源"></a>1. 可以更好的運用雲端或是實體資源</h3><p>所有的資源集中成了一個大平台，所以調度上更靈活，以往我們以實體機為單位的方式很沒有效率，要調度資源的時候需要開一台實體機器，或是虛擬機器，都很耗費 CPU、記憶體等等的資源。</p><p>而 K8S 內所有的東西都是容器，可以很快啟動，很快的刪除，並且靈活部屬在 Kubernetes 所擁有的資源上。</p><h3 id="2-讓一切的基礎設施都寫成程式碼"><a href="#2-讓一切的基礎設施都寫成程式碼" class="headerlink" title="2. 讓一切的基礎設施都寫成程式碼"></a>2. 讓一切的基礎設施都寫成程式碼</h3><p>應用程式容器化之後，所有需要安裝的套件都會寫成 Dockerfile。這樣在新增或修改的時候，不再像是以前的伺服器是個黑盒子，需要花大量的時間除錯。</p><p>部屬的資源則用 Kubernetes 的描述方式撰寫，要前端服務要開幾台，後端服務要開幾台，要自動擴展？ 沒問題，這些 K8S 都可以輕鬆幫你做到。所以你如果要了解整個基礎設施架構時，可以很快的藉由程式碼來認識。</p><h3 id="3-可以幫助開發者聚焦開發"><a href="#3-可以幫助開發者聚焦開發" class="headerlink" title="3. 可以幫助開發者聚焦開發"></a>3. 可以幫助開發者聚焦開發</h3><p>減少開發者在基礎設施上花的時間，將硬體統一看做一個大平台，開發者只需要寫應用的描述，其他的 K8S 幫你搞定。例如：有節點當機，會自動生成一個新的節點，以維持服務的穩定。</p><h2 id="一切從-Container-開始"><a href="#一切從-Container-開始" class="headerlink" title="一切從 Container 開始"></a>一切從 Container 開始</h2><p>使用 Kubernetes 之前，你需要把你的服務先容器化，或者用人家包好的 Image 建立。例如：你有一個 Node.js 的應用程式、一個 MySQL 的資料庫，都可以架設在 K8S 上面。</p><p>K8S 提供了豐富的、可以應用於產品環境的一切資源給你。例如：自動擴展、負載均衡、定時工作 … 等等一切你想得到的東西。</p><p>但是在開始使用 K8S 之前，你需要把你的服務先容器化。雖然一開始很痛苦，需要花很多時間做原本不必要做的事情，但是你容器化你的服務之後會發現，以前需要在不知道被做過什麼事情的機器上摸索的體力活，通通都自動化、或是很易於找到解法，因為在程式碼裡面都有跡可尋。</p><h2 id="理解-Node、Pod、Container-之間的關係"><a href="#理解-Node、Pod、Container-之間的關係" class="headerlink" title="理解 Node、Pod、Container 之間的關係"></a>理解 Node、Pod、Container 之間的關係</h2><p>Node 是 K8S 中的一台實體機器、或是雲端上的一台機器，又稱作是工作者。他有個別名叫做奴隸 (minion) ，挺有趣的。</p><p>Pod 是 K8S 中基本的單位，負責裝一個或多個多個 Container (容器)。</p><p>Container 中就是我們容器化好的應用程式，例如：Node.js 應用程式、MySQL 服務 … 等等</p><p>需要 Pod 來作為基本單位的原因是，如果每個 Container 都作為 K8S 的最小單位，那麼管理網路會變得非常的困難。以 Pod 來區隔，同一個 Pod 裡面的 Container 能夠在本地端互相的連線，只有需要提供給外部呼叫的 API 才需要暴露出來。</p><p>示意圖如下：</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*vJp5o7ABILiIapesES8j6g.png"></p><h2 id="理解-Kubernetes-Cluster"><a href="#理解-Kubernetes-Cluster" class="headerlink" title="理解 Kubernetes Cluster"></a>理解 Kubernetes Cluster</h2><p>Kubernetes 集群由控制面板 Control Panel 與節點 Node 所組成。控制面板又稱為是 Kubernetes Master。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*J4GBXcAOasRI0aPgd4-IYw.png"><br><a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/</a></p><p>控制面板由幾個元件 (Component) 所組成：</p><h3 id="1-Kube-API-Server"><a href="#1-Kube-API-Server" class="headerlink" title="1. Kube API Server"></a>1. Kube API Server</h3><p>控制面板中用來暴露 Kubernetes API 的元件，讓其他服務可以讀寫 K8S 的資源物件 (Resouce Object)。</p><h3 id="2-Kube-Schedular"><a href="#2-Kube-Schedular" class="headerlink" title="2. Kube Schedular"></a>2. Kube Schedular</h3><p>調度器，需要調度軟體、硬體資源的時候就要靠調度器囉。例如：如果新建立的 pod 沒有 node 可以放的時候，調度器就會開啟一個新的 node，來放置剛剛需要建立的 pod。</p><h3 id="3-Kube-Controller-Manager"><a href="#3-Kube-Controller-Manager" class="headerlink" title="3. Kube Controller Manager"></a><strong>3. Kube Controller Manager</strong></h3><p>是一個在背景持續執行的程序 (daemon)，用來調節系統狀態，透過 api-server 可以監視 Cluster 共享的狀態。</p><p>需要變更目前狀態的時候 Kube Controller 就會將目前的狀態變更到想要變更的狀態，例如：本來 2 個副本 (Replica) 擴展到 4 個副本。</p><p>包含了副本控制器 (Replication Controller)，端點控制器 (Endpoint Controller)、命名空間控制器(Namepsace Controller)與服務帳號控制器</p><h3 id="4-Cloud-Controller-Manager"><a href="#4-Cloud-Controller-Manager" class="headerlink" title="4. Cloud Controller Manager"></a><strong>4. Cloud Controller Manager</strong></h3><p>基於 Kube Controller Manager，各個雲平台提供者（Provider）的實作。而每個 Node 則包含：</p><ul><li><p>kubelet — 用來跟 Master 溝通的元件。</p></li><li><p>kube-proxy — 網路代理，用來反應 K8S 各個 Node 上的網路服務</p></li></ul><h2 id="讀-Kubernetes-API-初探-K8S-的資源物件"><a href="#讀-Kubernetes-API-初探-K8S-的資源物件" class="headerlink" title="讀 Kubernetes API 初探 K8S 的資源物件"></a>讀 Kubernetes API 初探 K8S 的資源物件</h2><p>我們可以透過 Kubernetes API 讀寫 K8S 的資源物件 (Resource Object)，剛剛說的 Kubernetes Cluster 就分為 Kubernetes API 總共分為五大類，分別是：</p><ul><li><p>Workload 物件 — 用來「管理或是運行 Container」 在 Cluster 上。</p></li><li><p>服務發現與負載均衡物件 — 讓 Workload 可以「縫住」形成可被外部存取到的服務，或是有負載均衡能力的服務。</p></li><li><p>Config 與 Storage 物件 — Config 用來將配置注入你的應用程式中。Storage 讓 Container 的資料可以永久保存在 Container 之外。</p></li><li><p>Cluster 物件 — 用來定義集群本身的物件。</p></li><li><p>Meta 物件 — 用來配置資源之間的行為的物件。</p></li></ul><p>這種分類法較接近開發者，可以藉此看看開發者在想些什麼。</p><p><img src="https://cdn-images-1.medium.com/max/2880/1*bbG-QtOtZ17CflsIlS7mwA.png"><br><a href="https://kubernetes.io/docs/reference/#api-reference">https://kubernetes.io/docs/reference/#api-reference</a></p><p>還有精美的 kubectl 範例可以使用，很方便。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*_F_r0Wh9822ZWBc3w3jeLQ.png"></p><h2 id="kubectl-—-跟-K8S-Cluster-溝通的工具"><a href="#kubectl-—-跟-K8S-Cluster-溝通的工具" class="headerlink" title="kubectl — 跟 K8S Cluster 溝通的工具"></a>kubectl — 跟 K8S Cluster 溝通的工具</h2><p>我們絕大多數對 K8S 的操作都需要透過 kubectl，kubectl 的是什麼呢？DevOps 開發者用 kubectl 命令列工具，可以透過 Kubernetes Master 上的 api-server 對各個 Node 下達指令。而這些 API 即是上一小節說的 Kubernetes API。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*OhlD7-6XRajuS4QZ.png"><br><a href="https://www.redhat.com/zh/topics/containers/what-is-kubernetes">https://www.redhat.com/zh/topics/containers/what-is-kubernetes</a></p><p>to be continued …</p><p>下一部分會比較偏重實作， Minikube 的基本操作、Kubectl 的基本操作與重要的 資源物件的介紹。</p><p>如果喜歡我寫的文章，歡迎追蹤 本人的帳號 <a href="https://medium.com/@LukaTw">@LukaTW</a> 與 <a href="https://medium.com/starbugs">StarBugs Weekly 星巴哥技術週刊</a> 🙂🙂🙂</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從零開始學 DevOps — 那就選擇最簡單的 Drone CI 開始吧！</title>
      <link href="/2020/01/14/2020-01-14-drone/"/>
      <url>/2020/01/14/2020-01-14-drone/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/10340/0*JN9t3uzpnpf0KCnz" alt="Photo by [Ivan Diaz](https://unsplash.com/@mdi?utm_source=medium&amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)"></p><p>目前 DevOps 已經是 Backend 或 Frontend 多多少少都會碰到的部份。而 Drone，正可以讓開發者專心開發自己的專案，每個專案獨立設定需要的 CI / CD 流程，解放前端、後端工程師的戰鬥力，將測試與部屬結合在開發流程中，降低手動測試需要的時間。話不多說，趕快開始架設第一個 Drone CI 伺服器吧。</p><p>本篇文章分為兩個部分，第一個部分來聊聊，為什麼從 Jenkins -&gt; CircleCI -&gt; Drone ，的過程。第二部分則是架設 Drone 的教學。</p><h2 id="為什麼從-Jenkins-gt-CircleCI-gt-Drone"><a href="#為什麼從-Jenkins-gt-CircleCI-gt-Drone" class="headerlink" title="為什麼從 Jenkins -&gt; CircleCI -&gt; Drone"></a>為什麼從 Jenkins -&gt; CircleCI -&gt; Drone</h2><p>第一次接觸 Drone 已經是兩年前，當時的 Drone 是 0.x 版，跟現在的 1.0 版本有不少的差異。那時候玩了一陣子 DroneCI，Docker 化了一些服務，但因為那時對 CI / CD 不甚熟悉，從 Jenkins、DroneCI 與 CircleCI 中選擇。</p><h3 id="簡單比較-Jenkins、DroneCI、CircleCI-三套工具"><a href="#簡單比較-Jenkins、DroneCI、CircleCI-三套工具" class="headerlink" title="簡單比較 Jenkins、DroneCI、CircleCI 三套工具"></a>簡單比較 Jenkins、DroneCI、CircleCI 三套工具</h3><p>Jenkins 複雜度高，可以操作的東西最多。DroneCI 每個步驟都是由 Docker 產生的環境，高度的容器化，讓每個步驟可以調用不同的 Docker Image 來實現各種測試。</p><p>例如：步驟一可以用 nodejs 的 Docker image 測前端的部分，步驟二可以用 golang 的 Docker image 測試後端的框架，然後接著用傳送訊息專用的 Image 傳送 CI / CD 測試結果到 Slack。</p><h3 id="重新採用-DroneCI-的原因"><a href="#重新採用-DroneCI-的原因" class="headerlink" title="重新採用 DroneCI 的原因"></a>重新採用 DroneCI 的原因</h3><p>這次重新採用 DroneCI 的原因是我們需要大量的 build image，用 CircleCI 來做實在很不划算，因為你用他的雲端空間就是要被吃豆腐。再者，這次已經對 Docker 有很多的熟悉度，也對 CI / CD 流程有更高的理解。</p><p>有一點需要特別說明的是，因為我是 Backend 工程師，所以比較喜歡更開發更貼近的工程師的 DroneCI，每個專案底下都有 .drone.yml，負責不同專案的開發者可以輕鬆設計自己需要的 CI/CD 流程。</p><p>而 Jenkins 還是 DevOps / SRE 的王者，功能性的強大，幾乎無所不能，不過因為我有圖型介面障礙，每次都會忘記在哪邊按，而且想要把任何東西都進版控，所以我當然是選 DroneCI 囉！</p><h3 id="用-DroneCI-就是要自己架"><a href="#用-DroneCI-就是要自己架" class="headerlink" title="用 DroneCI 就是要自己架"></a>用 DroneCI 就是要自己架</h3><p>DroneCI 經過 1.0 的改版後已經提供了雲端服務 <a href="https://cloud.drone.io/">drone cloud</a>。不過 … 既然都用 Drone 了當然是要自己架！第一種架設方式是開一台機器例如： EC2，在上面安裝好 Docker、Docker Compsoe、然後下載 Drone 的壓縮檔，接著解壓縮， cd 進入資料夾後輸入 docker-compose up，這樣就架設完成囉。</p><p>自己架設的好處是，自己開的機器便宜，不想用的時候還可關掉。如果你可以清晰知道需要的 CI / CD 流程的哪些環節，並且可以快速的實作出來，用 Drone 是完全沒有問題的。</p><h3 id="用-K8S-架設更好玩"><a href="#用-K8S-架設更好玩" class="headerlink" title="用 K8S 架設更好玩"></a>用 K8S 架設更好玩</h3><p>踏進 K8S 是個不小的門檻，不過 K8S 絕對是個值得投資的技術，各大雲端霸主不管是 AWS、GCP、Azure 紛紛支援 K8S，雖然乍看之下沒有顯著的好處，但是光是把所有架構的轉成程式碼 ( Infrastructure as Code ，Iac) 就是讓企業體質變好，無形中增加了許多未來的彈性與爆發力。</p><p>既然 K8S 是主流，那當然要用 K8S 來架設 Drone 囉。除了開一台機器以外，Drone 對 K8S 的整合度也是很高的，Helm 有著 <a href="https://hub.helm.sh/">Helm Hub</a> ，就像 Docker hub 一樣，你可以在上面找到各式各樣的 Helm Chart 來建置 Drone。建置完成後還可以進入 K8S 中查看 Drone 的各個工作執行的怎麼樣。</p><h2 id="該怎麼開始使用-Drone"><a href="#該怎麼開始使用-Drone" class="headerlink" title="該怎麼開始使用 Drone ?"></a>該怎麼開始使用 Drone ?</h2><p>還是回到最簡單的方法，在本機或是雲端機器上安裝 docker 與 docker-compose，我們用 Github 來做為說明的範例。</p><h3 id="Step-1-—-安裝-DroneCI"><a href="#Step-1-—-安裝-DroneCI" class="headerlink" title="Step 1 — 安裝 DroneCI"></a>Step 1 — 安裝 DroneCI</h3><p>進入<a href="https://drone.io/">官網</a>，點選 Get Started</p><p><img src="https://cdn-images-1.medium.com/max/2518/1*JeGCj0yZqFzICaBX3q2zqQ.png"></p><p>點選 install</p><p><img src="https://cdn-images-1.medium.com/max/2306/1*y-3jjXLAq18yioLt-8XQaA.png"></p><p>選擇 Github</p><p><img src="https://cdn-images-1.medium.com/max/2386/1*A_1WUlNDwtMcodmSNL4bCg.png"></p><p>進入之後開始學習安裝方式，第一個步驟可以跳過，從第二個步驟開始，輸入 docker pull drone/drone:1 拉下來最新的 docker image。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*oSWpHROfnuWr2wWGp7V5zg.png"></p><p>接著，根據官方的 docker 指令來撰寫 docker-compose 檔案，我已經幫大家寫好了，複製貼上即可，儲存成 docker-compose.yml。</p> <iframe src="https://medium.com/media/a91d32cb40f76295aba401d9e0e74e73" frameborder=0></iframe><p>接著輸入 docker-compose up 啟動 drone，此時可用 docker ps -a 看看 container 有沒有正常啟動</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*vUJFccLcZjhD--24pCRm4g.png"></p><h3 id="Step-2-—-用-ngrok-讓-Port-開放-IP-讓外界存取，並加上-https"><a href="#Step-2-—-用-ngrok-讓-Port-開放-IP-讓外界存取，並加上-https" class="headerlink" title="Step 2 — 用 ngrok 讓 Port 開放 IP 讓外界存取，並加上 https"></a>Step 2 — 用 ngrok 讓 Port 開放 IP 讓外界存取，並加上 https</h3><p>到 <a href="https://dashboard.ngrok.com/">ngrok 官網</a>註冊帳號，不註冊的話過一段時間就會被斷線</p><p><img src="https://cdn-images-1.medium.com/max/2084/1*RRyhzg7_hptFfU5RZfq1Jg.png"></p><p>註冊完之後會顯示以下畫面，mac 可以使用 brew install ngrok 安裝 ngrok。安裝完後使用下圖箭頭指示處的，複製貼上，在本機登入你的帳號。</p><p><img src="https://cdn-images-1.medium.com/max/2060/1*sJjAvifeYuOlNrxEnkdl4Q.png"></p><p>之後就可以開心的使用 ngrok 綁定端口囉！</p><p>例如在終端機中輸入 ngrok http 8081，就會把剛剛架設的 drone 伺服器 localhost 的 8081 端口綁定到特定的 ngrok 網址。這邊的網址等下需要複製貼上綁定到 Github OAuth App 上。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*PuxSJe60XUqpfDBBceZupQ.png"></p><h3 id="Step-3—-Github-設定-OAuth-App"><a href="#Step-3—-Github-設定-OAuth-App" class="headerlink" title="Step 3— Github 設定 OAuth App"></a>Step 3— Github 設定 OAuth App</h3><p>選擇螢幕右上方選單的 Settings</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*7CIiJZbvCKLb5lfsPxN7cg.png"></p><p>進入後選擇左下方的 Developer Settings</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*HdxclQS70dX4FbETCMVxhw.png"></p><p>點選 OAuth Apps</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*UrZn_vFgPmeIceIjjx-4lA.png"></p><p>新增 Oauth 應用程式</p><p><img src="https://cdn-images-1.medium.com/max/2574/1*Zsvs6JFoMdisHqahhb2ltw.png"></p><p>將剛剛建立好的 ngrok 網址填入，註冊 OAuth 應用程式。這邊雷的地方，Drone 0.8 的 callback 網址是 authorize，1.0 換成 login，文件上沒有特別著名。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*3JAoWcFx4BGsG19w6wkY2w.png"></p><p>當以上都設定好的時候代表你的 Drone CI 串接完成囉！訪問你的 ngrok 暫時網址，我的是 <a href="https://844f00ae.ngrok.io/">https://844f00ae.ngrok.io</a> 。還記得 ngrok 是做什麼用的嘛，ngrok 可以讓本地端的端口暴露到網際網路。所以可以在任何地方存取的到。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*UG6pbB8rFnKKctU5lvsnPg.png"></p><p>登入後 drone 已經建立成功囉，紅框的網址可以替代成任何你伺服器上的網址。</p><p><img src="https://cdn-images-1.medium.com/max/2118/1*08dTULm4YIx7v5LFwi_E0Q.png"></p><p>我們來開啟監控一個 drone 的 project，如果這專案有改變就會觸發 CI / CD 流程。大家想要一起玩可以到這邊 fork 專案 <a href="https://github.com/drone-demos/drone-with-nodejs">https://github.com/go-training/drone-nodejs-example</a>。</p><p><img src="https://cdn-images-1.medium.com/max/2144/1*TDNbj7nNu4OrTT5VXaaDig.png"></p><p>開啟後會顯示專案目前是開啟的狀態。只要有 commit push 即可觸發。</p><p><img src="https://cdn-images-1.medium.com/max/NaN/1*sC8f7JVfEJgKOHCHIqvKxg.png"></p><p>來試試看，加一個 commit 並 push，觸發 Drone CI</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*WhSeytz5KRnnZ8hXvra8nQ.png"></p><p>果然成功了！</p><p><img src="https://cdn-images-1.medium.com/max/2106/1*rSC_dLjMghPagl22PQHk6A.png"></p><p>完成之後</p><p><img src="https://cdn-images-1.medium.com/max/2040/1*trGae2DEva01LWxk7jxI8Q.png"></p><p>Great！我們做出了第一個 CI / CD 系統，好處有什麼呢？今天篇幅有點長，我們留著下次再講吧 :D 下一篇 Drone CI / CD 我們來聊聊 CI / CD 的常見流程！</p><p>如果喜歡我寫的文章，歡迎追蹤本人帳號 <a href="https://medium.com/@LukaTw">@LukaTw</a> 與 <a href="https://medium.com/starbugs">StarBugs Weekly 星巴哥技術週刊</a>🙂</p>]]></content>
      
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> DroneCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Harbor 架設 Private Docker Registry</title>
      <link href="/2019/12/17/2019-12-17-harbor/"/>
      <url>/2019/12/17/2019-12-17-harbor/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/2000/1*zYNBpVXtxGID9rttcSYklQ.jpeg"></p><h2 id="什麼是-Docker-Registry？"><a href="#什麼是-Docker-Registry？" class="headerlink" title="什麼是 Docker Registry？"></a>什麼是 Docker Registry？</h2><p>顧名思義就是用來儲存鏡像檔 (Image) 的地方。例如：DockerHub 就是 Docker 官方提供的 Docker Registry，你可以把你自己編寫的 Dockerfile 編譯之後上傳到 Dockerhub ，讓網路上的其他人自由的下載，讓大家站在你的肩膀上寫程式。</p><p><img src="https://cdn-images-1.medium.com/max/2402/1*xCluFgOIs4GgoiAFkxIOJg.png" alt="Dockerhub 首頁"></p><p><img src="https://cdn-images-1.medium.com/max/2328/1*5V65KKaQS5QlDeSEMW6Crg.png" alt="在 dockerhub 上面可以搜尋到 ubuntu 官方釋出的 docker image"></p><h2 id="為什麼要架設私有的-Docker-Registry？"><a href="#為什麼要架設私有的-Docker-Registry？" class="headerlink" title="為什麼要架設私有的 Docker Registry？"></a>為什麼要架設私有的 Docker Registry？</h2><p>在這個容器化的時代， 要使用 Kubernetes 生態系，第一步是將原本的實體機器的配置轉換成程式碼，轉換完成後變成 Dockerfile，Dockerfile 編寫著這台機器上所有的配置。</p><p>我們需要找一個地方存放由這些 Dockerfile 建立 (build) 出來的 Docker 鏡像檔，這些鏡像檔總不能放在 Dockerhub 上給大家一覽無遺吧？因此我們需要一個私有的 Docker Registry 來放置建立的 Docker 鏡像檔。</p><h2 id="Harbor-是什麼？"><a href="#Harbor-是什麼？" class="headerlink" title="Harbor 是什麼？"></a>Harbor 是什麼？</h2><p>Harbor 是由 VMware 發行的鏡像檔儲存倉庫，就是你自行架設一個只有公司內部可以存取到的 Dockerhub，公司內部使用的鏡像檔都上傳到上面，要使用時也都從 Harbor 中拉下來 (pull image)。</p><p>Harbor 的管理介面如下</p><p><img src="https://cdn-images-1.medium.com/max/3052/1*pl2f1k9c_PdW_QWxRf1cAQ.png"></p><p>每一個專案可以有多個 Repository，而每個 Repository 可以上傳多個 Image</p><p><img src="https://cdn-images-1.medium.com/max/3078/1*l76NWolqE7O0t0rGAafk6A.png"></p><h2 id="Harbor-在-CI-CD-中扮演的角色"><a href="#Harbor-在-CI-CD-中扮演的角色" class="headerlink" title="Harbor 在 CI/CD 中扮演的角色"></a>Harbor 在 CI/CD 中扮演的角色</h2><p>用一張圖表來說明 Docker Registry 在 CI / CD 流程中扮演的角色：</p><p><img src="https://cdn-images-1.medium.com/max/2808/1*M69pOie1Kw6U1G36CC6sVA.png"></p><p>首先我們把程式碼推上 Github，觸發 CI / CD (以 Jenkins 為例) Pipeline，Pipeline 中包含跑測試、程式碼品質檢測 … 等等的步驟，依照需求自由定義。</p><p>跑完 CI / CD Pipeline 後便會把 Docker Image 推上 Harbor。接著如果 K8S 需要取用時便會從 Harbor 拉取 (pull) 需要的版本的 Image。</p><p>註：更安全的作法是 Github 用私有的程式碼儲存庫取代，這邊為了簡單示意，用 Github 作為程式碼儲存庫的代表。</p><h2 id="如何架設-Harbor？"><a href="#如何架設-Harbor？" class="headerlink" title="如何架設 Harbor？"></a>如何架設 Harbor？</h2><h3 id="Harbor-的安裝方式"><a href="#Harbor-的安裝方式" class="headerlink" title="Harbor 的安裝方式"></a>Harbor 的安裝方式</h3><p>在 Github 上面可以看到 Harbor 是 1 萬顆星星以上的大型開源專案</p><p><img src="https://cdn-images-1.medium.com/max/2260/1*CH1EH9Z67Zb1Ly-yLwq9Kg.png"></p><p>找到 Install &amp;&amp; Run 區域的說明，上面寫著先下載 binary 檔案，然後跟著安裝手冊操作。</p><p><img src="https://cdn-images-1.medium.com/max/2126/1*B-Q22EUDNzCgm0iMguOZOA.png"></p><p>我們就進入到 <a href="https://github.com/goharbor/harbor/releases">Harbor Release</a> 頁面</p><p><img src="https://cdn-images-1.medium.com/max/2264/1*ROVmxJmXqeKol5YLfjjN8w.png"></p><p>往下卷找到 Assets 區域</p><p><img src="https://cdn-images-1.medium.com/max/2014/1*lNDshHJA-X-ZyF6EG_e_3g.png"></p><p>這時我們點選 online installler 下載，如果在 linux 主機上可以用 wget 取得。</p><h3 id="安裝-Docker-與-Docker-Compose"><a href="#安裝-Docker-與-Docker-Compose" class="headerlink" title="安裝 Docker 與 Docker Compose"></a>安裝 Docker 與 Docker Compose</h3><p>接著到 <a href="https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md">Harbor Installation and Configuration Guide</a> 觀看教學逐步完成安裝，安裝 Harbor 時需要安裝 Docker 與 Docker Compose。</p><p>首先我們需要安裝 Docker，用 Ubuntu 18.04 來演練：參考 <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04">How To Install and Use Docker on Ubuntu 18.04</a> 逐步完成 docker 安裝。</p><p>除了需要 Docker 以外，還需要 docker-compose，參考 <a href="https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04">How To Install Docker Compose on Ubuntu 18.04</a>。</p><h3 id="繼續安裝-Harbor"><a href="#繼續安裝-Harbor" class="headerlink" title="繼續安裝 Harbor"></a>繼續安裝 Harbor</h3><p>取得剛剛 release 畫面獲得的安裝包位置</p><pre><code>wget https://github.com/goharbor/harbor/releases/download/v1.10.0/harbor-online-installer-v1.10.0.tgz</code></pre><p>解壓縮之</p><pre><code>tar xvf harbor-online-installer-v1.10.0.tgz</code></pre><p>現在你有 harbor 安裝檔資料夾</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*oucT344pLoZU6e0MUKr_Cg.png"></p><p>進入 harbor 資料夾，看到有幾個檔案，install.sh 就是安裝檔了，首先我們要先修改 harbor.yml</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*W2KPqrMFv2TC--85ciaIdw.png"></p><p>將 hostname 修改，否則直接運行 install.sh 是會發生錯誤的。除了修改 hostman 以外，修改 admin password 預設管理員密碼，可以增加安全性。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*jDUzW33Dqar1YOkZWwzgpg.png"></p><p>修改完成後執行 sudo ./install.sh，harbor 需要的服務就會依序被建立起來，就是這麼簡單。</p><p>此時訪問這台機器的 ip 位置，就會出現登入畫面囉！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>現在你擁有了一個可以放在公司內網的 Docker Registry，你可以在上面自由的上傳自己建立的 Docker Image，不用怕被看光光，是不是很棒呢。</p><p>如果喜歡我寫的文章，歡迎追蹤本人帳號 <a href="https://medium.com/@LukaTw">@LukaTw</a> 與 <a href="https://medium.com/starbugs">StarBugs Weekly 星巴哥技術週刊</a> 🙂🙂🙂</p>]]></content>
      
      
      
        <tags>
            
            <tag> Harbor </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>駭客是怎麼思考的？｜從 Devcore Conf 學駭客思維</title>
      <link href="/2019/11/19/2019-11-19/"/>
      <url>/2019/11/19/2019-11-19/</url>
      
        <content type="html"><![CDATA[<h2 id="駭客是怎麼思考的？｜從-Devcore-Conf-學駭客思維"><a href="#駭客是怎麼思考的？｜從-Devcore-Conf-學駭客思維" class="headerlink" title="駭客是怎麼思考的？｜從 Devcore Conf 學駭客思維"></a>駭客是怎麼思考的？｜從 Devcore Conf 學駭客思維</h2><h3 id="媽阿，原來電影裡演的都是真的"><a href="#媽阿，原來電影裡演的都是真的" class="headerlink" title="媽阿，原來電影裡演的都是真的"></a>媽阿，原來電影裡演的都是真的</h3><p><img src="https://cdn-images-1.medium.com/max/12048/1*ge80giZjL7EGHSLU5v00eQ.jpeg" alt="Photo by [Clint Patterson](https://unsplash.com/@cbpsc1?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/hacker?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)"></p><p>Hello 大家好，我是 Luka，一名喜歡追新技術並喜歡做些有趣嘗試的工程師。這次來的是分享參加 DEVCORE CONF 2019 的心得與收獲。</p><p>這篇以 Web 前端、後端工程師的角度來分享參加 DEVCORE CONF 2019 的心得。適合「 Web 工程師」或是「想要多了解一點資安觀念的人」閱讀。如果你本身已經是從事資安行業了，那麼這篇文章對你來說可能太淺，請到 <a href="https://devco.re/">DEVCORE 官網</a> 觀看專業的技術文章。</p><p>簡單介紹一下 DEVCORE 戴夫寇爾這家資安公司，在我參加 DEVCORE CONF 之前已耳聞 DEVCORE 的大名，但我一直搞不清楚資安公司的不同之處。</p><p>參加完 DEVCORE CONF 之後，我才知道原來 DEVCORE 這麼厲害，回報了非常多的 CVE 漏洞，在國際的駭客比賽中也常獲得獎項。和他們平常到底做些什麼事情。話不多說，趕快來進入正題。</p><h2 id="全部講者都是駭客的年會"><a href="#全部講者都是駭客的年會" class="headerlink" title="全部講者都是駭客的年會"></a>全部講者都是駭客的年會</h2><p>必須說這個體驗真的超狂的，一家公司獨自舉辦一個研討會，並且所有講者都是「駭客」。議程裡大概有一半是分享「如何攻陷別人的公司」的過程與方法，而且當講到攻陷時的那一刻時，你會感受到講者眼睛裡閃耀著光芒，展現出了純粹的喜悅（抖～～。</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*3ZY1icmt6y_-2X3c0D6tlQ.png" alt="( 因為主辦單位提到勿公開與會者，因此用海苔條保護與會者隱私。)"></p><p>這是 DEVCORE CONFERENCE 2019 的主設計，在牆上貼著有著很大 Attack 字樣的海報，傳遞了一個訊息：</p><blockquote><h1 id="攻擊！攻擊！再攻擊！純攻擊導向的資安研討會"><a href="#攻擊！攻擊！再攻擊！純攻擊導向的資安研討會" class="headerlink" title="攻擊！攻擊！再攻擊！純攻擊導向的資安研討會"></a><strong>攻擊！攻擊！再攻擊！純攻擊導向的資安研討會</strong></h1></blockquote><p>這實在是太有趣了，一般資安大會大部分以防禦者的角度，為了防止某種攻擊方式，所以「要用怎麼樣的方式防守」或是「要安裝怎麼樣的硬體設備來防守」。</p><p>聽完之後往往會覺得疑惑 ： 「這真的是攻擊者會採用的策略？」或是「這樣防禦真的就防的著了嘛？」，這些問題就是 DEVCORE CONF 2019 整個研討會的主軸 「從攻擊者的角度制定防禦策略」要解決的問題。</p><blockquote><h1 id="了解駭客思維，你才能了解從哪邊下手會是有效的防禦策略。"><a href="#了解駭客思維，你才能了解從哪邊下手會是有效的防禦策略。" class="headerlink" title="了解駭客思維，你才能了解從哪邊下手會是有效的防禦策略。"></a>了解駭客思維，你才能了解從哪邊下手會是有效的防禦策略。</h1></blockquote><h2 id="進入駭客的思考領域"><a href="#進入駭客的思考領域" class="headerlink" title="進入駭客的思考領域"></a>進入駭客的思考領域</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*Gg0B6uJGOgbj-ovK.jpg"></p><h2 id="第一個思考點-—-我們如何防禦駭客入侵？"><a href="#第一個思考點-—-我們如何防禦駭客入侵？" class="headerlink" title="第一個思考點 — 我們如何防禦駭客入侵？"></a>第一個思考點 — 我們如何防禦駭客入侵？</h2><p>常見防守方式是「縱深防禦」，意思是用不同的資安設備、安全規範、服務，降低駭客入侵的可能性。</p><p>萬一不幸某個點被駭客入侵了，例如：檔案伺服器被攻陷了，讓損害局限於某處，控制損害範圍。</p><p>縱深防禦常見的被突破點：</p><ol><li><p>防禦邊界超出想像。眼前的防禦邊界不是駭客眼中防禦邊界，通常忽略的地方因為你沒有想到這裡會被打，所以更容易視為被攻擊的點。</p></li><li><p>真的了解資安設備嘛？資安設備的效果是不是如預期？有沒有正確操作，讓資安設備發揮效用？</p></li><li><p>管理不夠落實，例如：帳號、密碼用不安全的方式傳送，讓駭客可以輕易竊取，取得服務的存取權。</p></li><li><p>重兵防守了重要資產，但跟「重要資產的相關資產」卻沒有做好防禦，導致駭客可以選擇防禦較薄弱的相關資產作為中繼點作為入侵點，進而入侵重要資產。</p></li></ol><h2 id="第二個思考點—-駭客想要的是什麼？"><a href="#第二個思考點—-駭客想要的是什麼？" class="headerlink" title="第二個思考點— 駭客想要的是什麼？"></a>第二個思考點— 駭客想要的是什麼？</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*JzhU45_BUeQ4iOCc.png"></p><p>駭客在攻擊時想要取得的是「重要資產」，透過每一層的漏洞逐步的接近重要資產，進而拿下。</p><p>這邊介紹一個名詞叫做<strong>瑞士乳酪模型（Swiss Cheese Model）</strong>，這個模型是在描述的是當威脅透過層層防護層的失誤（乳酪的層數），最終造成危害。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*4fuHcwwH19-Xe_If.png"></p><p>而應用在資安領域上，指的是駭客透過層層防禦的漏洞或是疏私，鑽過了瑞士起司模型的空隙，最終拿下重要資產。</p><p>下圖名詞解釋：FW（Firewall 防火牆），IPS（ Intrusion Prevention System）入侵預防系統，WAF（Web Application Firewall），Antivirus 防毒軟體。</p><p><img src="https://cdn-images-1.medium.com/max/8064/1*ey5xW9SXZheUxK5pc48Baw.png"></p><p>雖然每一個漏洞個別來看風險價值都不高，但以駭客的戰略思維來說，目標是要取得重要資產。也就是說這些「弱點拆開來看價值不高，但結合起來卻可以讓駭客拿下極高價值的重要資產」。</p><p>也就是說，如果我們以駭客的思維來檢視我們的企業防禦機制，我們會更主動的去思考哪些點是重要的、是我們原本沒有注意到的。</p><h2 id="第三個思考點-—-駭客如何決定攻擊的手法"><a href="#第三個思考點-—-駭客如何決定攻擊的手法" class="headerlink" title="第三個思考點 — 駭客如何決定攻擊的手法"></a>第三個思考點 — 駭客如何決定攻擊的手法</h2><p>駭客的攻擊的已經越來越具有系統化的趨勢，美國非營利資安組織 MITRE 提出 <a href="https://attack.mitre.org/">ATT&amp;CK</a>，讓攻擊的流程變成簡單易懂模型，讓資安業者在討論網路攻擊手法時有統一的標準去依循，有共通的名詞來討論攻擊的手法。</p><p><img src="https://cdn-images-1.medium.com/max/2810/1*fOkwKeoDxDYdeLPL9Z3Tlg.png"></p><p>上方紅色框框是可以採用的攻擊策略，直的藍色框框標示的是可以使用的攻擊技巧。</p><p><img src="https://cdn-images-1.medium.com/max/2742/1*kCAjLU6W_NMzwTU3jmQ5Fw.png"></p><p>從這邊我們可以發現，攻擊的策略已經變得非常模組化，並且有很多種攻擊手法可以使用。如果我們想要防禦的話，我們必須知道更貼近駭客的思考方式，哪一種攻擊手法是最有可能被某種駭客組織採用。哪些攻擊手法耗費的時間成本較低，所以需要優先防禦。</p><h2 id="第四個思考點-—-到底駭客會怎麼打？"><a href="#第四個思考點-—-到底駭客會怎麼打？" class="headerlink" title="第四個思考點 — 到底駭客會怎麼打？"></a>第四個思考點 — 到底駭客會怎麼打？</h2><p>我們知道了駭客有一個大型的資料庫，可以決定策略與攻擊技巧，但是駭客到底會用哪一種方式來攻擊？</p><p><strong>「<a href="https://devco.re/services/red-team">紅隊演練</a>」</strong>就是解決這個問題的方法，資安人員模擬駭客全面性的攻擊，在不影響企業營運下，無所不用其極的模仿駭客攻擊企業，協助企業發掘弱點，讓企業面對攻擊時可以更好的應對。</p><p>而 <a href="https://devco.re/">Devcore</a> 就是這一方面的好手，這也是為什麼我說「一個講者都是駭客的研討會」，每位講者都具有頂級駭客的身手，因為他們有頂級的身手，所以他們可以在真實世界的駭客找到你的漏洞之前就先發掘到你的企業的漏洞。讓你更完善的做好防禦。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這次的參加體驗我覺得非常的棒，活動本身是免費的，業配的成份卻很低，議程的資安技術的分享和實戰攻防經驗的分享都是非常珍貴的，從來沒遇到一個研討會有如此系統化的規劃整個議程與帶給與會者完整的概念。</p><p>整個研討會環繞著同一主軸，從攻擊者的角度出發，來思考我們應該如何防禦，如何讓攻擊者覺得很難打，進而放棄。擺脫以往單點式防禦，防禦了一個點，駭客卻選擇其他容易攻陷的地方著手。</p><p>另外值得一提的是， DEVCORE 成員不僅實力非常高強，表現出來的感覺也都非常的有活力，讓我見識到「頂尖的人才如何兼顧技術能力與熱情」。感覺是真的覺得很好玩，所以非常快樂的研究如何攻破人家的防禦系統。</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p>這篇文章大部分資料出自「<a href="https://devco.re/blog/2019/10/09/def-strategy/">以攻擊者的角度制定防禦策略</a>」的學習心得。這些是官方釋出的文章，內容更加全面。</p><p>本篇文章因為想要用簡單通俗的語句讓更多人了解資安，所以省略了滿多細節，如果你是資安人員、想精進資安能力或是企業用戶想要了解更深入的話，請看 DEVCORE 的專業文章：</p><ul><li><p><a href="https://devco.re/blog/2019/10/09/def-strategy/">以攻擊者的角度制定防禦策略</a></p></li><li><p><a href="https://devco.re/blog/2019/10/24/evolution-of-DEVCORE-red-team-and-the-next/">DEVCORE 紅隊的進化，與下一步</a></p></li><li><p><a href="https://devco.re/blog/2019/11/11/HiNet-GPON-Modem-RCE/">你用它上網，我用它進你內網! 中華電信數據機遠端代碼執行漏洞</a></p></li></ul><p>感謝大家看到最後，如果喜歡我的文章，歡迎追蹤我。<br>如果覺得我寫的不錯，請幫我拍個手。<br>你的鼓勵是我的寫作的動力！</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*TXQ2bQyvK30J_-y7Y-Z7Lg.gif"></p><pre><code>用拍手表達你的心情～支持 = 10下不錯 = 20下可以 = 30下很棒 = 40下激推 = 50下*小秘技：按著拍手可以連拍呦！！*</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Harbor </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql - 如何修改 partition 並還原資料</title>
      <link href="/2018/03/04/old%20posts/2018-03-04-modify-and-restore-mysql-partition/"/>
      <url>/2018/03/04/old%20posts/2018-03-04-modify-and-restore-mysql-partition/</url>
      
        <content type="html"><![CDATA[<p>在測試環境中我們想要置換 partition 的分區方式，而我們不想要遺失測試資料，所以需要備份 partition table 的資料。因為要修改的資料欄位很多，我不想要直接使用 alter table 的方式來修改 partition 分區，取而代之的是，我想要用 Migration 的方式來管理，所以會採用先備份 -&gt; 修改 -&gt; 接著再還原的方式。</p><span id="more"></span><h2 id="深入了解-mysqldump"><a href="#深入了解-mysqldump" class="headerlink" title="深入了解 mysqldump"></a>深入了解 mysqldump</h2><p>一般我們在備份還原的時候會使用 Mysqldump，並使用還原指令來還原。但是因為這次我需要回復的資料已經經過 Partition 分區了。用一般的回復方式很可能會失敗。秉持的實驗精神，我就來看看 mysqldump 到底是怎麼運作的。輸入指令備份資料庫：</p><pre><code>mysqldump -u username -p your_database &gt; dump.sql</code></pre><p>產生出來的檔案我們打開來看:</p><pre><code class="sql"># dump.sql-- MySQL dump 10.13  Distrib 5.7.20, for osx10.11 (x86_64)---- Host: localhost    Database: log_sharding-- -------------------------------------------------------- Server version    5.7.20/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!40101 SET NAMES utf8 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;---- Table structure for table `alert_logs`--DROP TABLE IF EXISTS `alert_logs`;/*!40101 SET @saved_cs_client     = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `alert_logs` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `alert_id` int(11) DEFAULT NULL,  `alert_code` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_name` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_time` datetime DEFAULT NULL,  `alert_status` tinyint(2) DEFAULT &#39;0&#39;,  `created_at` datetime NOT NULL DEFAULT &#39;2055-06-01 00:00:00&#39;,  `updated_at` datetime DEFAULT NULL,  PRIMARY KEY (`id`,`created_at`),) ENGINE=InnoDB AUTO_INCREMENT=4899 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci/*!50500 PARTITION BY RANGE  COLUMNS(alert_time)(PARTITION p001 VALUES LESS THAN (&#39;2018-01-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p002 VALUES LESS THAN (&#39;2018-02-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p003 VALUES LESS THAN (&#39;2018-03-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p004 VALUES LESS THAN (&#39;2018-04-01 00:00:00&#39;) ENGINE = InnoDB, . . . . PARTITION p451 VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB) */;/*!40101 SET character_set_client = @saved_cs_client */;---- Dumping data for table `alert_logs`--LOCK TABLES `alert_logs` WRITE;/*!40000 ALTER TABLE `alert_logs` DISABLE KEYS */;# This is fake dataINSERT INTO `alert_logs` VALUES (16,4),(49,12),(9,14),(21,17),(11,57),(71,63),(270,91),(86,180),(125,193),(99,201),(189,385),(271,390),(225,415),(305,484),(251,543),(309,545),(257,579),(258,581),(260,585),(261,588),(279,667);/*!40000 ALTER TABLE `alert_logs` ENABLE KEYS */;UNLOCK TABLES;</code></pre><p>這不就是 SQL 的指令嘛？ 邏輯如下:</p><ol><li>如果 <code>alert_logs</code> table 已經存在，就刪除掉並使用 Dump File 內的備份指令重新建立 <code>alert_logs</code> table</li><li>lock 住整個 table 並加入資料。</li></ol><p>從這些步驟我們可以觀察到即使 db 內已經存在 alert_logs table 了，使用 dump.sql 還原時仍然會先刪除 alert_logs table，再使用 dump.sql 中的 schema 來重建 table。</p><p>知道這些情報之後 partition 的 backup 與 restore 有了頭緒。</p><h2 id="Partition-backup-and-restore"><a href="#Partition-backup-and-restore" class="headerlink" title="Partition backup and restore"></a>Partition backup and restore</h2><p>首先備份原先的 partition</p><pre><code class="sql">mysqldump -h &#39;your-my-sql-ip&#39; -u your_user_name -p your_database_name table_name_1 table_name_2 --no-create-info  --ssl-ca=your_ssl.pem &gt; dump.sql</code></pre><p>關鍵在於: 需要加上 <code>--no-create-info</code> 產生的 dump.sql 不會把本來的 table 刪除，直接 insert 資料。</p><pre><code class="sql"># dump.sql-- MySQL dump 10.13  Distrib 5.7.20, for osx10.11 (x86_64)---- Host: localhost    Database: pro_devel-- -------------------------------------------------------- Server version    5.7.20/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!40101 SET NAMES utf8 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;--alert_logs-- Dumping data for table `alert_logs`--LOCK TABLES `alert_logs` WRITE;/*!40000 ALTER TABLE `alert_logs` DISABLE KEYS */;INSERT INTO `alert_logs` VALUES (16,4),(49,12),(9,14),(21,17),(11,57),(71,63),(270,91),(86,180),(125,193),(99,201),(189,385),(271,390),(225,415),(305,484),(251,543),(309,545),(257,579),(258,581),(260,585),(261,588),(279,667);/*!40000 ALTER TABLE `alert_logs` ENABLE KEYS */;UNLOCK TABLES;</code></pre><p>備份完資料後我們將原有的 database 刪除</p><pre><code>DROP TABLE alert_logs;</code></pre><p>用新的 create partition 方法建立 table，將本來用 alert_time 做分區，改成用 created_at 做分區。</p><pre><code>CREATE TABLE `alert_logs` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `alert_id` int(11) DEFAULT NULL,  `alert_code` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_name` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_time` datetime DEFAULT NULL,  `alert_status` tinyint(2) DEFAULT &#39;0&#39;,  `created_at` datetime NOT NULL DEFAULT &#39;2055-06-01 00:00:00&#39;,  `updated_at` datetime DEFAULT NULL,  PRIMARY KEY (`id`,`created_at`),) ENGINE=InnoDB AUTO_INCREMENT=4899 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci/*!50500 PARTITION BY RANGE  COLUMNS(created_at)(PARTITION p001 VALUES LESS THAN (&#39;2018-01-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p002 VALUES LESS THAN (&#39;2018-02-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p003 VALUES LESS THAN (&#39;2018-03-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p004 VALUES LESS THAN (&#39;2018-04-01 00:00:00&#39;) ENGINE = InnoDB, . . . . PARTITION p451 VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB) */;/*!40101 SET character_set_client = @saved_cs_client */;</code></pre><p>最後將資料還原</p><pre><code>mysql -u username -p database_name &lt; dump.sql</code></pre><p>檢視一下目前的 table</p><pre><code class="sql">SHOW CREATE TABLE alert_logs;</code></pre><p>確認結果是否正確<br>檢視一下目前的 table</p><pre><code class="sql">SHOW CREATE TABLE alert_logs;</code></pre><p>輸出</p><pre><code class="sql">CREATE TABLE `alert_logs` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `alert_id` int(11) DEFAULT NULL,  `alert_code` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_name` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,  `alert_time` datetime DEFAULT NULL,  `alert_status` tinyint(2) DEFAULT &#39;0&#39;,  `created_at` datetime NOT NULL,  `updated_at` datetime DEFAULT NULL,  PRIMARY KEY (`id`,`created_at`),) ENGINE=InnoDB AUTO_INCREMENT=4899 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci/*!50500 PARTITION BY RANGE  COLUMNS(created_at)(PARTITION p001 VALUES LESS THAN (&#39;2018-01-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p002 VALUES LESS THAN (&#39;2018-02-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p003 VALUES LESS THAN (&#39;2018-03-01 00:00:00&#39;) ENGINE = InnoDB, PARTITION p004 VALUES LESS THAN (&#39;2018-04-01 00:00:00&#39;) ENGINE = InnoDB, . . . . PARTITION p451 VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB) */;/*!40101 SET character_set_client = @saved_cs_client */;</code></pre><p>確認建立 table 的資料無誤後，<br>進入 Rails console 試試看 AlertLog 是否可以正常存取，<br>這樣就完成了整個 partition 轉換並還原的流程。</p><h3 id="地雷-created-at"><a href="#地雷-created-at" class="headerlink" title="地雷 - created_at"></a>地雷 - created_at</h3><p>需要特別注意的是 - partition 中 為 key 的值一定必須是 <code>NOT NULL</code>，且<code>不要設 DEFAULT VALUE</code>，否則 Rails 不會幫你自動填入 created_at。</p><h2 id="Rails-Migration"><a href="#Rails-Migration" class="headerlink" title="Rails Migration"></a>Rails Migration</h2><p>如果你使用的是 Rails Migration，步驟是:</p><ol><li>backup entire database</li><li>dump the partition database</li><li>rake db:rollback</li><li>modify migration of partition</li><li>rake db:migrate</li><li>restore partition database</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.dbastuff.net/2014/09/mysql-dump-and-partitions.html">DBAStuff: Mysql Dump and partitions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[譯] 使用 AWS Ruby SDK v2 更新 S3 物件 Metadata</title>
      <link href="/2018/01/25/old%20posts/2018-01-25-use-aws-ruby-sdk-to-update-s3-metadata/"/>
      <url>/2018/01/25/old%20posts/2018-01-25-use-aws-ruby-sdk-to-update-s3-metadata/</url>
      
        <content type="html"><![CDATA[<blockquote><p>From: <a href="https://mattboldt.com/updating-s3-object-metadata-in-ruby/">Updating S3 Object Metadata With the AWS Ruby SDK v2</a><br>Author: Matt<br>posted at: 2017/5/31</p></blockquote><p>今天我在 S3 就如同在玩火一樣 - 弄壞了一個網站. 我做了研究，徹底的測試了我的程式碼，接著按下了 enter. 之後沒多久，我的心掉落的和我的網站掛掉的速度一樣快。我決定寫下一篇速記來防止同樣的錯誤發生在其他人身上。</p><span id="more"></span><h2 id="S3-不是資料庫"><a href="#S3-不是資料庫" class="headerlink" title="S3 不是資料庫"></a>S3 不是資料庫</h2><p>不可能在 S3 中做到「更新」資料庫 - 在S3並沒有更新資料的方法。這在 Ruby SDK 與 AWS CLI 之中都是成立的。如果你項我一樣在找尋更新整個 Bucket 的物件來更新 metadata (舉例來說: 像是名為 <code>Cache-Control</code> 的 headers)，你將會需要使用 <code>copy_to</code> 方法。</p><p>讓我們開始認證和攫取我們的 bucket。</p><pre><code class="rb">require &#39;aws-sdk&#39;Aws.config.update(&#123;  region: &#39;us-east-1&#39;,  credentials: Aws::Credentials.new(&lt;AWS_ACCESS_KEY&gt;, &lt;AWS_SECRET_KEY&gt;)&#125;)s3 = Aws::S3::Resource.newbucket = s3.bucket(&#39;mattboldt-bucket&#39;)</code></pre><p>現在我們可以透過每一個物件和複製它自己並且帶上一些新的 metadata. 注意我們使用 option <code>metadata_directive: &#39;REPLACE&#39;</code> - 這個將會以新的 metadata <em>取代</em>物件原有的 metadata。如果缺少它，我們將無法複製任何新的，而且會得到錯誤訊息如下：</p><pre><code>This copy request is illegal because it is trying to copy an object to itself without changing the object&#39;s metadata, storage class, website redirect location or encryption attributes</code></pre><p>然而，取代 metadata 將會取代其它屬於這個物件的所有東西，例如: 權限(permission). 請勿執行以下的代碼。</p><pre><code># the WRONG waybucket.objects.each do |object_summary|  location = &quot;#&#123;bucket.name&#125;/#&#123;object_summary.key&#125;&quot;  options = &#123;    cache_control: &#39;public, max-age=60&#39;,    metadata_directive: &#39;REPLACE&#39; # options: &#39;COPY&#39; or &#39;REPLACE&#39;  &#125;  object_summary.copy_to(location, options)end</code></pre><p>這是我所搞砸的。我更新的所有的 S3 物件因為缺少了讀的權限(read permissions)，接著 CDN 不再可以存取這些資料。現在看起來是一個很蠢的錯誤，但當時我對出錯的狀況沒有任何頭緒。</p><h2 id="更新-複製物件並且保留原有的資訊"><a href="#更新-複製物件並且保留原有的資訊" class="headerlink" title="更新 / 複製物件並且保留原有的資訊"></a>更新 / 複製物件並且保留原有的資訊</h2><p>讓我們再試一次；這次我們確保 request 包含(include)所有物件的欄位。這邊是一個可能的選項清單( list of possible options)，用途是傳送到 <code>copy_to</code> 方法。</p><pre><code class="rb">COPY_TO_OPTIONS = [:multipart_copy, :content_length, :copy_source_client, :copy_source_region, :acl, :cache_control, :content_disposition, :content_encoding, :content_language, :content_type, :copy_source_if_match, :copy_source_if_modified_since, :copy_source_if_none_match, :copy_source_if_unmodified_since, :expires, :grant_full_control, :grant_read, :grant_read_acp, :grant_write_acp, :metadata, :metadata_directive, :tagging_directive, :server_side_encryption, :storage_class, :website_redirect_location, :sse_customer_algorithm, :sse_customer_key, :sse_customer_key_md5, :ssekms_key_id, :copy_source_sse_customer_algorithm, :copy_source_sse_customer_key, :copy_source_sse_customer_key_md5, :request_payer, :tagging, :use_accelerate_endpoint]</code></pre><p>用這個 List 武裝之後，我們抓取所有存在的資料並且 merge 到新的 option hash。我只想要加上驗證 (valid) 選項而不是使用 <code>get</code> 取得所有資訊，所以我使用 <code>Array#slice</code> 來對之前的清單做處理。</p><p>也需要注意的是，我使用在下面 <code>object_summary.get</code> - 這是因為物件的摘要並不包含 metadata, permission … 之類的東西。這會造成額外的開銷，但是此時我不確定還有其他任何方法可以達到同樣的目的。</p><pre><code class="rb">bucket.objects.each do |object_summary|  object = object_summary.get  location = &quot;#&#123;bucket.name&#125;/#&#123;object_summary.key&#125;&quot;  # Build a new options object  options = &#123;&#125;  # Merge in the object&#39;s existing properties  existing_options = object.to_h.slice(*COPY_TO_OPTIONS)  options.merge!(existing_options)  # Add our new updates  # The `acl` option here was very important in my case!  options.merge!(&#123;    acl: &#39;public-read&#39;, # private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, bucket-owner-full-control    cache_control: &#39;public, max-age=60&#39;,    metadata_directive: &#39;REPLACE&#39;  &#125;)  # multipart_copy is necessary if the object is 5GB+  if object.size &gt;= 5_000_000_000    options.merge!(&#123;multipart_copy: true&#125;)  else    # Only used if multipart_copy is true    options.delete(:content_length)  end  # Execute the copy!  object_summary.copy_to(location, options)end</code></pre><p>如果你的 bucket 的大小很大，這會用到一些時間。然而，你得知道 <code>copy_to</code> 方法發出請求至 S3 和不會從你的本地端上傳任何的資料。所以即使你複製到新的位置，你也不會重新上傳檔案。</p><p><a href="https://gist.githubusercontent.com/mattboldt/6052bac987c16b73563d4d6c56d7509b/raw/d317cde9653592d4553e7665e632937dffb327e8/s3-updater.rb">這邊</a>是完整的程式碼：</p><pre><code class="rb">require &#39;aws-sdk&#39;require &#39;active_support&#39;require &#39;active_support/core_ext&#39;# http://docs.aws.amazon.com/sdkforruby/api/Aws/S3/Object.html#copy_to-instance_methodCOPY_TO_OPTIONS = [:multipart_copy, :content_length, :copy_source_client, :copy_source_region, :acl, :cache_control, :content_disposition, :content_encoding, :content_language, :content_type, :copy_source_if_match, :copy_source_if_modified_since, :copy_source_if_none_match, :copy_source_if_unmodified_since, :expires, :grant_full_control, :grant_read, :grant_read_acp, :grant_write_acp, :metadata, :metadata_directive, :tagging_directive, :server_side_encryption, :storage_class, :website_redirect_location, :sse_customer_algorithm, :sse_customer_key, :sse_customer_key_md5, :ssekms_key_id, :copy_source_sse_customer_algorithm, :copy_source_sse_customer_key, :copy_source_sse_customer_key_md5, :request_payer, :tagging, :use_accelerate_endpoint]Aws.config.update(&#123;  region: &#39;us-east-1&#39;,  credentials: Aws::Credentials.new(AWS_ACCESS_KEY, AWS_SECRET_KEY)&#125;)s3 = Aws::S3::Resource.newbucket = s3.bucket(&#39;mattboldt-bucket&#39;)objects_count = bucket.objects.countcurrent_object = 0bucket.objects.each do |object_summary|  # Get the object and all its metadata, permissions, etc  object = object_summary.get  # Copy to the same location  location = &quot;#&#123;bucket.name&#125;/#&#123;object_summary.key&#125;&quot;  # Build a new options object  options = &#123;&#125;  # Merge in the object&#39;s existing properties, but only keeping valid attributes for the copy_to method  existing_options = object.to_h.slice(*COPY_TO_OPTIONS)  options.merge!(existing_options)  # Add our new updates  options.merge!(&#123;    acl: &#39;public-read&#39;, # private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, bucket-owner-full-control    cache_control: &#39;public, max-age=60&#39;,    metadata_directive: &#39;REPLACE&#39;  &#125;)  # multipart_copy is necessary if the object is 5GB+  if object.size &gt;= 5_000_000_000    options.merge!(&#123;multipart_copy: true&#125;)  else    # Only used if multipart_copy is true    options.delete(:content_length)  end  begin    object_summary.copy_to(location, options)    current_object += 1    puts &quot;Copied #&#123;current_object&#125; of #&#123;objects_count&#125;&quot;  rescue =&gt; e    puts &quot;Excption Raised: #&#123;e&#125;&quot;  endend</code></pre><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>如果你覺得這對你有幫助, 請 <a href="https://twitter.com/atmattb">tweet @atMattb</a>。謝謝閱讀。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[譯] Amazon S3 Delimiter and Prefix</title>
      <link href="/2018/01/03/old%20posts/2018-01-03-aws-s3-delimiter-and-prefix/"/>
      <url>/2018/01/03/old%20posts/2018-01-03-aws-s3-delimiter-and-prefix/</url>
      
        <content type="html"><![CDATA[<blockquote><p>From: <a href="https://realguess.net/2014/05/24/amazon-s3-delimiter-and-prefix/">Amazon S3 Delimiter and Prefix - realguess</a><br>posted at 2014/05/24</p></blockquote><p><a href="https://aws.amazon.com/tw/s3/">AWS S3</a> 是一個不昂貴的線上檔案儲存服務，我們可以透過 <a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html">javascript SDK</a> 來使用 S3。當我使 SDK 的時候有以下幾件令人疑惑的事情:</p><span id="more"></span><ol><li>如何使用參數 <code>Delimiter</code> 和 <code>Prefix</code> ?</li><li><code>CommonPrefixes</code> 與 <code>Contents</code> 的差別是什麼?</li><li>如何透過 Javascript SDK 建立 folder / directory</li></ol><p>取回在 Amazon S3 Bucket 的物件得操作 (operation) 是 <code>listObject</code>. <code>listObjects</code> 不會回傳 (return) 物件的內容, 而會回傳 key 與 meta data 像是物件的大小 (size) 或是物件的擁有者。</p><p>使用指令呼叫以取得 bucket 中的物件清單:</p><pre><code class="js">s3.listObjects(params, function (err, data) &#123;  // ...&#125;);</code></pre><p><code>params</code> 可以設置以下的參數:</p><ul><li>Bucket</li><li>Delimiter</li><li>EncodingType</li><li>Marker</li><li>MaxKeys</li><li>Prefix</li></ul><p>但是什麼是 <code>Delimeter</code> 和 <code>Prefix</code>? 如何使用他們?</p><p>我們開始在 S3 中創建一些物件，格式如下方的檔案結構。這可以用 Aws Console 很快的完成。</p><pre><code>.├── directory│   ├── directory│   │   └── file│   └── file└── file2 directories, 3 files</code></pre><p>在 Amazon S3 中，這些物件為:</p><pre><code>directory/directory/directory/directory/directory/filedirectory/filefile</code></pre><p>一個需要留心的事情是 S3 不是檔案系統。S3 並沒有真正的檔案或是資料夾的概念。<br>從 Console 中看到的是 2 個資料夾和 3 個檔案。但是它們全部都是物件。這些物件<br>會用他們的 Key 值按照字母排序。</p><p>為了讓概念更清楚點，我們來調用 (invoke) 方法 <code>listObjects</code>。而這個操作只需要參數 <code>Bucket</code>。</p><pre><code>params = &#123;  Bucket: &#39;example&#39;&#125;;</code></pre><p>Response <code>data</code> 包含下列的 callback function:</p><pre><code class="json">&#123; Contents:   [ &#123; Key: &#39;directory/&#39;,       LastModified: ...,       ETag: &#39;&quot;d41d8cd98f00b204e9800998ecf8427e&quot;&#39;,       Size: 0,       Owner: [Object],       StorageClass: &#39;STANDARD&#39; &#125;,     &#123; Key: &#39;directory/directory/&#39;,       LastModified: ...,       ETag: &#39;&quot;d41d8cd98f00b204e9800998ecf8427e&quot;&#39;,       Size: 0,       Owner: [Object],       StorageClass: &#39;STANDARD&#39; &#125;,     &#123; Key: &#39;directory/directory/file&#39;,       LastModified: ...,       ETag: &#39;&quot;d41d8cd98f00b204e9800998ecf8427e&quot;&#39;,       Size: 0,       Owner: [Object],       StorageClass: &#39;STANDARD&#39; &#125;,     &#123; Key: &#39;directory/file&#39;,       LastModified: ...,       ETag: &#39;&quot;d41d8cd98f00b204e9800998ecf8427e&quot;&#39;,       Size: 0,       Owner: [Object],       StorageClass: &#39;STANDARD&#39; &#125;,     &#123; Key: &#39;file&#39;,       LastModified: ...,       ETag: &#39;&quot;d41d8cd98f00b204e9800998ecf8427e&quot;&#39;,       Size: 0,       Owner: [Object],       StorageClass: &#39;STANDARD&#39; &#125; ],  CommonPrefixes: [],  Name: &#39;example&#39;,  Prefix: &#39;&#39;,  Marker: &#39;&#39;,  MaxKeys: 1000,  IsTruncated: false &#125;</code></pre><p>如果有檔案結構，你會期待是:</p><pre><code>directory/file</code></pre><p>但是並沒有，因為 bucket 運作的方式不像是 folder 或是 directory, 能夠顯示<br>directory 中的檔案。檔案在 bucket 中會全部攤開來並且照字母排列。</p><p>在 Unit 中, directory 是檔案, 但是在 Amazon S3 中, 所有的東西都是物件,<br>並且他們用 key 來識別。</p><p>所以，該如何讓 Amazon S3 表現的更像是 folder 或是 directory？ 或如何顯示 Bucket 中的第一層右邊的內容?</p><p>為了讓 S3 顯示的更像是 director, 你必須使用 <code>Delimiter</code> 和 <code>Prefix</code>. <code>Delimeter</code> 讓你可以為 key 分組 (use to group keys)。它必須是一個字元或者一個字串。<code>Prefix</code> 限制 response 開始於特別的 prefix。</p><h2 id="Delimiter"><a href="#Delimiter" class="headerlink" title="Delimiter"></a>Delimiter</h2><p>我們開始加入下列的 <code>delimiter</code>:</p><pre><code>params = &#123;  Bucket: &#39;example&#39;,  Delimiter: &#39;/&#39;&#125;;</code></pre><p>你會取得像是 directory 清單的一些資訊:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;file&#39; &#125; ],  CommonPrefixes: [ &#123; Prefix: &#39;directory/&#39; &#125; ],  Name: &#39;example&#39;,  Prefix: &#39;&#39;,  MaxKeys: 1000,  Delimiter: &#39;/&#39;,  IsTruncated: false &#125;</code></pre><p>有一個資料夾叫做 <code>directory/</code> 和一個檔案叫做 <code>file</code>. 發生的事情是下列的物件接受檔案被 delimeter <code>/</code> 分組。</p><pre><code>directory/directory/directory/directory/directory/filedirectory/filefile</code></pre><p>所以，結果是:</p><pre><code>directory/file</code></pre><p>這感覺像是 <code>directory</code> 或是 <code>folder</code> 的清單。但如果我們把 <code>Delimeter</code> 改成 <code>i</code>, 接著你會取得空的 <code>Contents</code> 和 prefix。</p><pre><code>&#123; Contents: [],  CommonPrefixes: [ &#123; Prefix: &#39;di&#39; &#125;, &#123; Prefix: &#39;fi&#39; &#125; ],  Name: &#39;example&#39;,  Prefix: &#39;&#39;,  MaxKeys: 1000,  Delimiter: &#39;i&#39;,  IsTruncated: false &#125;</code></pre><p>所有的 key 被 <code>di</code> 和 <code>fi</code> 這兩個 prefix 分組。因此，Amazon S3 不是檔案系統, 但是他們如果可以設定對的參數，那他們看起來就會像是檔案系統。</p><p>如之前提到的 <code>Delimeter</code> 不需要是單一的字元:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125;,     &#123; Key: &#39;directory/file&#39; &#125;,     &#123; Key: &#39;file&#39; &#125; ],  CommonPrefixes: [ &#123; Prefix: &#39;directory/directory&#39; &#125; ],  Name: &#39;example&#39;,  Prefix: &#39;&#39;,  MaxKeys: 1000,  Delimiter: &#39;/directory&#39;,  IsTruncated: false &#125;</code></pre><p>回想 bucket 的結構:</p><pre><code>directory/directory/directory/directory/directory/filedirectory/filefile</code></pre><p>由於分組字串<code>/directory</code>，<code>directory/directory/</code> 和 <code>directory/directory/file</code> 被 prefix <code>directory/directory</code> 分組了。</p><p>我們來試試其他的 <code>Delimiter: &#39;directory&#39;</code></p><pre><code>&#123; Contents:   [ &#123; Key: &#39;file&#39; &#125; ],  CommonPrefixes: [ &#123; Prefix: &#39;directory&#39; &#125; ],  Name: &#39;example&#39;,  Prefix: &#39;&#39;,  MaxKeys: 1000,  Delimiter: &#39;directory&#39;,  IsTruncated: false &#125;</code></pre><p>好，接著來試試 <code>ry/fi</code></p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/&#39; &#125;,     &#123; Key: &#39;file&#39; &#125; ],  CommonPrefixes:   [ &#123; Prefix: &#39;directory/directory/fi&#39; &#125;,     &#123; Prefix: &#39;directory/fi&#39; &#125; ],  Name: &#39;example,  Prefix: &#39;&#39;,  MaxKeys: 1000,  Delimiter: &#39;ry/fi&#39;,  IsTruncated: false &#125;</code></pre><p>所以記得 <code>Delimeter</code> 只是提供將 key 分組的功能。如果你想要他們表現的像是<br>檔案系統，那麼使用 <code>Delimiter: &#39;/&#39;</code>。</p><h2 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h2><p><code>Prefix</code> 更易於理解。它利用前綴來過濾(filter) keys。</p><p>相同的結構:</p><pre><code>directory/directory/directory/directory/directory/filedirectory/filefile</code></pre><p>我們來設定 <code>Prefix</code> 參數值為 <code>directory</code>:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/file&#39; &#125;,     &#123; Key: &#39;directory/file&#39; &#125; ],  CommonPrefixes: [],  Name: &#39;example&#39;,  Prefix: &#39;directory&#39;,  MaxKeys: 1000,  IsTruncated: false &#125;</code></pre><p>看看設定成 <code>directory/</code> 會怎麼樣:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/file&#39; &#125;,     &#123; Key: &#39;directory/file&#39; &#125; ],  CommonPrefixes: [],  Prefix: &#39;directory/&#39; &#125;</code></pre><p>prefix 設成 <code>directory</code> 和 <code>directory/</code> 是一樣的。<br>如果我們嘗試一些不一樣的, <code>Prefix: &#39;directory/d&#39;</code>:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/directory/&#39; &#125;,     &#123; Key: &#39;directory/directory/file&#39; &#125; ],  CommonPrefixes: [],  Prefix: &#39;directory/d&#39; &#125;</code></pre><p>同時使用 <code>Delimiter: &#39;directory&#39;</code> and<code> Prefix: &#39;directory&#39;</code>:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125;,     &#123; Key: &#39;directory/file&#39; &#125; ],  CommonPrefixes: [ &#123; Prefix: &#39;directory/directory&#39; &#125; ],  Prefix: &#39;directory&#39;,  Delimiter: &#39;directory&#39; &#125;</code></pre><p>第一步，列出 prefix 是 <code>directory</code> 的清單:</p><pre><code>directory/directory/directory/directory/directory/filedirectory/file</code></pre><p>用 delimiter <code>directory</code> 與 prefix <code>directory</code> 來分組:</p><pre><code>directory/directory</code></pre><p>結果的 <code>Contents</code> 會是:</p><pre><code>directory/directory/file</code></pre><p><code>CommonPrefixes</code> 會是:</p><pre><code>directory/directory</code></pre><p>也許改變 <code>Delimeter</code> 成 <code>i</code> 可以更好的理解:</p><pre><code>&#123; Contents:   [ &#123; Key: &#39;directory/&#39; &#125; ],  CommonPrefixes: [ &#123; Prefix: &#39;directory/di&#39; &#125;, &#123; Prefix: &#39;directory/fi&#39; &#125; ],  Prefix: &#39;directory&#39;,  Delimiter: &#39;i&#39; &#125;</code></pre><pre><code>directory/               # key to showdirectory/directory/     # group to &#39;directory/di&#39;directory/directory/file # group to &#39;directory/di&#39;directory/file           # Group to &#39;directory/fi&#39;file                     # ignored due to prefix</code></pre><p>一個使用 Amazon S3 來列出 directory 的好處是你不需要顧慮巢狀的資料夾結構，<br>所有東西都是扁平化的。所以你可以藉由特定的 <code>Prefix</code> 來 <code>loop</code> 出你要的資料。</p><h2 id="Directory-Folder"><a href="#Directory-Folder" class="headerlink" title="Directory / Folder"></a>Directory / Folder</h2><p>如果你使用 Amazon AWS console 來 <code>Create Folder</code>，你可以建立資料夾或是<br>上傳檔案在該資料夾中。實際上，你使用了下列的 key 建立了兩個物件:</p><pre><code>directory/directory/file</code></pre><p>如果你使用下列指令來上傳檔案，資料夾不會被建立:</p><pre><code>aws s3 cp file s3://example/directory/file</code></pre><p>因為，Amazon S3 不是檔案系統，而是 key/value 的儲存空間。如果你使用 <code>listObjects</code> 方法，你可以看到一個物件。<br>同理，你無法複製本地的資料夾：</p><pre><code>$ aws s3 cp directory s3://example/directoryupload failed: aws/ to s3://example/directory [Errno 21] Is a directory: u&#39;/home/chao/tmp/directory/&#39;</code></pre><p>但我們可以用 JavaScript SDK 來創建 <code>directory/folder</code>:</p><pre><code>s3.putObject(&#123; Bucket: &#39;example&#39;, Key: &#39;directory/&#39; &#125;, function (err, data) &#123;  if (err) &#123; return console.error(err); &#125;  console.log(data);&#125;);</code></pre><p>需要筆記的地方是: 你必須使用 <code>directory/</code>，結尾必須是斜線。此外，這只是一個檔案而不是資料夾。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 基本功 - Cookie 與 Session</title>
      <link href="/2017/12/22/old%20posts/2017-12-22-web-foundation-the-different-of-cookie-and-session/"/>
      <url>/2017/12/22/old%20posts/2017-12-22-web-foundation-the-different-of-cookie-and-session/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="1-1-什麼是-Cookie"><a href="#1-1-什麼是-Cookie" class="headerlink" title="1.1 什麼是 Cookie ?"></a>1.1 什麼是 Cookie ?</h3><p>Cookie 在使用者第一次進入網站的時候產生。Browser 記錄一些隱私性較低的資料。<br>例如: 使用者第一次進入網站的時候會跳出教學視窗。當使用者點擊[關閉]後，Cookie<br>內記錄使用者已經看過教學了。使用者在下次登入的時候因為 Cookie 內記錄著使用者<br>已經看過教學，所以就不會跳出教學視窗。</p><h3 id="1-2-Cookie-的特性"><a href="#1-2-Cookie-的特性" class="headerlink" title="1.2 Cookie 的特性"></a>1.2 Cookie 的特性</h3><ul><li>每個網站的 Cookie 是分開的, 例如: <a href="http://www.google.com/">www.google.com</a> 無法取得 <a href="http://www.yahoo.com/">www.yahoo.com</a> 的 cookie。</li><li>能夠設定失效的時間。比如說過一段時間你就需要重新登入，就是由設定 Cookie Expired Time 來完成。有時候為了方便，也可能將 Cookie 設定為永久不失效。</li></ul><h3 id="1-3-Server-端如何讓-Browser-儲存-Cookie"><a href="#1-3-Server-端如何讓-Browser-儲存-Cookie" class="headerlink" title="1.3 Server 端如何讓 Browser 儲存 Cookie"></a>1.3 Server 端如何讓 Browser 儲存 Cookie</h3><ol><li>Client 請求 Server 給予頁面</li><li>Server 回 Response 給 Browser 的時候，HTTP Header 帶上 <code>Set-Cookie</code>。Browser 接收到 Set-Cookie 指令時，會將 Cookie 的名稱和值儲存在 Browser 的 Cookie。</li></ol><p><img src="https://lh3.googleusercontent.com/-ivTQRwbrQzs/WjyiAfiRepI/AAAAAAAAK7Y/8pjRBORXGEIKxyP7bjFTiEHjPYroooXQwCHMYCw/I/15139142578413.jpg"></p><h3 id="1-4-Browser-在每次-Request-的時候會帶上-Cookie"><a href="#1-4-Browser-在每次-Request-的時候會帶上-Cookie" class="headerlink" title="1.4 Browser 在每次 Request 的時候會帶上 Cookie"></a>1.4 Browser 在每次 Request 的時候會帶上 Cookie</h3><p>Browser 在每次對 Server 發出 Request 的時候會帶上 <code>Cookie</code> 的 Header，讓 Server 能夠正確的存取當前 Cookie。</p><p><img src="https://lh3.googleusercontent.com/-316qWgn_JFg/WjyiAwnYu4I/AAAAAAAAK7c/jUqct0G-OeIYDDq5DxyM_rR1azOAClRnwCHMYCw/I/15139133853587.jpg"></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="2-1-什麼是-Session"><a href="#2-1-什麼是-Session" class="headerlink" title="2.1 什麼是 Session"></a>2.1 什麼是 Session</h3><p>Session 就像你進入一個遊樂園，手上先蓋個章，下次進入的時候就知道你是誰。<br>遊樂園就好比是 Server，你就好比是 Client (Browser)。<br>Client 要怎麼儲存這個章呢? 有兩種方法:</p><ol><li>使用 Cookie (set cookie)</li><li>使用 html 儲存，例如: hidden input。</li></ol><p>拿章去 Server 換資料也有兩種方法:</p><ol><li>使用 Cookie</li><li>Query string/POST</li></ol><p>因為實作上的方便程度與效能考量，大部分的網站採用 Cookie 來完成 Session 的實作。</p><h3 id="2-2-Cookie-based-Session-與-Session-Storage"><a href="#2-2-Cookie-based-Session-與-Session-Storage" class="headerlink" title="2.2 Cookie-based Session 與 Session Storage"></a>2.2 Cookie-based Session 與 Session Storage</h3><p>Cookie-based Session 指的 Session 儲存的方式不同，而不是拿章去 Server 換資料的時候有沒有使用 Cookie。</p><p>常見的 Session Storage 有這幾種:</p><ol><li>Database</li><li>Memcached</li><li>Cookie</li></ol><h3 id="2-3-比較-Cookie-based-Session-與-Memcached-Store-Session"><a href="#2-3-比較-Cookie-based-Session-與-Memcached-Store-Session" class="headerlink" title="2.3 比較 Cookie-based Session 與 Memcached Store Session"></a>2.3 比較 Cookie-based Session 與 Memcached Store Session</h3><p>來比較一下這兩者的優缺點。 Cookie-based Session 的優點:</p><ul><li>對伺服器的效能負擔很低</li><li>方便使用</li></ul><p>缺點:</p><ul><li>大小最多存4Kb。</li><li>資料存放在瀏覽器上如果 <code>config/secrets.yml</code> 外流可能存在被破解的風險 (詳見 <a href="http://tech.shaolin.tw/posts/2013/12/17/security-issue-of-rails-cookiestore-mechanism/">Rails CookieStore 的安全議題</a>)。</li></ul><p>Memcached Store Session 的優點:</p><ol><li>memcached 使用記憶體來儲存，讀取速度快。</li><li>可以實現集中式管理。</li><li>不會受到 cookie 4kb 大小的限制。</li></ol><p>缺點：</p><ol><li>儲存方式用記憶體，持久化有疑慮。</li><li>在追求高性能高併發的情景下，cookies 的表現更好，因此很多大網站採用 cookies 作為 session store.</li></ol><h3 id="2-4-Session-傳值"><a href="#2-4-Session-傳值" class="headerlink" title="2.4 Session 傳值"></a>2.4 Session 傳值</h3><p>Session 傳值指的是利用 Session 儲存資料的機制，讓不同頁面間可以互相傳遞資料。</p><ol><li>使用 Query String 或是 POST 把資料往 Server 傳</li><li>Server 將收到的資料存到 Session 中。</li><li>在不同頁面的時候因為你的章是同一個，可以讀取 Session 中儲存的資料也是同一份，達到傳值的目的。</li></ol><h2 id="Rails-中的-Cookie-based-Session-安全性問題"><a href="#Rails-中的-Cookie-based-Session-安全性問題" class="headerlink" title="Rails 中的 Cookie-based Session 安全性問題"></a>Rails 中的 Cookie-based Session 安全性問題</h2><p>Rails 3 以前 cookie-based session 如果不特別設定，可以輕易的被解開:</p><pre><code class="rb">require &#39;base64&#39;session_cookie = &#39;your session cookie&#39;Marshal.load(Base64.decode64(sesson_cookie.split(&#39;--&#39;).first))</code></pre><p>解開後會像這個樣子</p><pre><code class="rb">&#123;        &quot;session_id&quot; =&gt; &quot;3223668cb4b04296c006e190ce2b1a17&quot;,    &quot;user_return_to&quot; =&gt; &quot;/&quot;,             &quot;flash&quot; =&gt; #&lt;ActionDispatch::Flash::FlashHash:0x007f80d1090250 @used=#&lt;Set: &#123;:alert&#125;&gt;, @closed=false, @flashes=&#123;:alert=&gt;&quot;You need to sign in or sign up before continuing.&quot;, :warning=&gt;nil, :error=&gt;nil, :notice=&gt;nil&#125;, @now=nil&gt;,       &quot;_csrf_token&quot; =&gt; &quot;BxX8rLulhq2v2YSKrLxIIkYeV4IYNTNceT2ib1BrO08=&quot;&#125;</code></pre><p>Rails 4 以後的 Cookie-based Session 會經過 Secret 加密。好好保護你的 <code>config/secret.yml</code> 能夠讓 Session 中的隱密資料不會被解開，從下面 code 可以看出要解開的話需要不少的麻煩:</p><pre><code class="rb">require &#39;rubygems&#39;require &#39;cgi&#39;require &#39;active_support&#39;def decrypt_session_cookie(cookie, key)  cookie = CGI::unescape(cookie)  # Default values for Rails 4 apps  key_iter_num = 1000  key_size     = 64  salt         = &quot;encrypted cookie&quot;  signed_salt  = &quot;signed encrypted cookie&quot;  key_generator = ActiveSupport::KeyGenerator.new(key, iterations: key_iter_num)  secret = key_generator.generate_key(salt)  sign_secret = key_generator.generate_key(signed_salt)  encryptor = ActiveSupport::MessageEncryptor.new(secret, sign_secret)  puts encryptor.decrypt_and_verify(cookie)end# Time to test ... (With data from Arbeit327)cookie = &#39;WVFQVTFtbmNxWWJPODZNb3NUMVZzZGtDVjZQNXpMYStFMWdiZlJPMkdjRFRBOGZ5T3pOTzBPKzk3NWxvQUJvTlRRU2t4MXZmdG8rT0I0R2M3Ulh0YXpxRVhNMll5UW1xUHhvVXBLbXozZ3ZyNjB4VDU4dWRIUkxBWjBXbDJhci93YkYrZWswUHdFL0hUNDJaUHo2cEpxbXFvdlFZMjJWVU9KTWhHb3NyalFwTkphd0pUQVZSTXRHbkVqRlFnSGpNVTNFQlVxYlRmT3pWbXNjK0JuQ3FydzQvODRhbmtuU29haGNRbXQ4T3o1ZjhqMk53WTRMa0pVd1hPb2NHTVFQY3dvanE2ZElqUk1Mc21HS0k2SHVuZEZ3OWhjdzZPQnRSMEdVVkQwL2IxSVh5QzNSWVlJZms5c1JJV0lzUE1Zb1NHbEtqYm5nTGRKd1ZSdGpOQ1RZZWthR1A2anRFMEluaTcyWTNaNHJBR1N0dklzMkg1RjVmVmY4azEzV3o0N2Z2LS1wQlowRUZ6cjI3SVFQU0F5bGlYSDNnPT0%3D--19650cc5c3e2599fb43b7235ab4de5a1ce8a46ac&#39;key = &#39;aeb977de013ade650b97e0aa5246813591104017871a7753fe186e9634c9129b367306606878985c759ca4fddd17d955207011bb855ef01ed414398b4ac8317b&#39;decrypt_session_cookie(cookie, key)</code></pre><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="http://blog.hellojcc.tw/2016/01/12/introduce-session-and-cookie/">介紹 Session 及 Cookie 兩者的差別說明</a></p><p><a href="http://fred-zone.blogspot.tw/2014/01/web-session.html">FRED - Web 技術中的 Session 是什麼？</a></p><p><a href="http://tech.shaolin.tw/posts/2013/12/17/security-issue-of-rails-cookiestore-mechanism/">Rails CookieStore 的安全議題 - Shaolin.TW</a></p><p><a href="https://blog.miniasp.com/post/2008/02/22/Explain-HTTP-Cookie-in-Detail.aspx">The Will Will Web - 解釋 Cookie 的特性</a></p><p><a href="https://gist.github.com/profh/e36e5dd0bec124fef04c">A simple script to decode Rails 4 session cookies</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web Foundation </tag>
            
            <tag> Coockie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLTP 與 OLAP</title>
      <link href="/2017/12/22/old%20posts/2017-12-29-oltp-vs-olap/"/>
      <url>/2017/12/22/old%20posts/2017-12-29-oltp-vs-olap/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-OLTP"><a href="#什麼是-OLTP" class="headerlink" title="什麼是 OLTP?"></a>什麼是 OLTP?</h2><p>最近在讀資料庫文件的時候接觸到 <code>OLTP</code> 這個名詞，大致上理解並比記下來。<br>數據處理大致可以分成兩類: OLTP 與 OLAP。OLTP (Online Analytical Processing)指的就是傳統式關聯式資料庫。用在日常的的事物處理，比如說資料庫的增、刪、查、改。有以下特性:</p><span id="more"></span><ul><li>並發性高</li><li>嚴格要求事務的種安全性</li><li>Realtime 要求高</li></ul><h2 id="什麼是-OLAP"><a href="#什麼是-OLAP" class="headerlink" title="什麼是 OLAP?"></a>什麼是 OLAP?</h2><p>OLAP (On-Line Analytical Processing) - 數據分析處理。是一個以決策為導向的數據處理方式，針對你想要做的決策，動態處理資料，用多種維度來解讀資料，讓高階主管可以做出更好的決策。</p><p>OLAP支援的分析包刮下列幾點:</p><ul><li>階層式維度與資料的模組化</li><li>趨勢分析</li><li>解讀深層資訊</li><li>於視覺範圍內轉換於另一維度以作比較</li></ul><p>個人覺得認為 OLAP 更像一種分析方法論，與現今的資料視覺概念相似，將資料經過加工處理後，由萃取出來的數據來幫助做決策。</p><h2 id="比較表"><a href="#比較表" class="headerlink" title="比較表"></a>比較表</h2><p><img src="https://lh3.googleusercontent.com/-_3M8urfGsMo/Wl8lC5-jcoI/AAAAAAAALBE/YIn4itw9oDAxRkQX0GOwY45PwU-dt4PEgCHMYCw/I/15142609010075.jpg"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://courses.cs.washington.edu/courses/cse592/01sp/lectures/class1/sld025.htm">OLTP vs. OLAP</a><br><a href="http://info.csvs.chc.edu.tw/bbhuang/homework%5C8716ds03.htm">OLAP example</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GIT Precommit hooks 防止 Binding.pry 進入 Commit</title>
      <link href="/2017/12/06/old%20posts/2017-12-06-git-precommit-hooks-copy/"/>
      <url>/2017/12/06/old%20posts/2017-12-06-git-precommit-hooks-copy/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>如果不小心把 <code>binding.pry</code> commit 進 git 而且不幸的 push 的話, 勢必要使用另一個 commit 來修正。如果要讓這個 commit 不見可能就需要用 <code>git push -f</code> 來修改。這樣做很醜，不優雅。根治的方法是 - <code>根本不應該將 debug code 進入 commit</code> 。但是人總是會有不小心的時候。最近發現一個工具可以做到這件事情: GIT Precommit hooks。</p><h2 id="What-is-GIT-Precommit-hooks"><a href="#What-is-GIT-Precommit-hooks" class="headerlink" title="What is GIT Precommit hooks?"></a>What is GIT Precommit hooks?</h2><p>GIT Precommit hooks 是一種可以在你每次 Commit 之前的 Callback。每次 Commit 前都會執行。我們利用這個特性，可以用來檢查，防止如 <code>Binding.pry</code> 的 Debug Code    進入 Git 中。</p><h2 id="Solution-1-Use-Script"><a href="#Solution-1-Use-Script" class="headerlink" title="Solution 1 - Use Script"></a>Solution 1 - Use Script</h2><p>在你的 git 專案底下，<code>.git/hooks/pre-commit.sample</code> 這是 Precommit hook 編寫的範本。將 <code>.sample</code> 結尾去除掉，就可以真正作用在當前的 Git 專案目錄上。不過因為我們想作用的是在 Rails 專案上，所以需要客製化腳本。</p><p>這邊已經有寫好的腳本: <a href="https://raw.githubusercontent.com/Luka/githooks/master/pre-commit">Source Code</a></p><h3 id="1-1-How-to-Use"><a href="#1-1-How-to-Use" class="headerlink" title="1.1 How to Use"></a>1.1 How to Use</h3><p>切換到專案底下</p><pre><code>cd project_name</code></pre><p>下載腳本</p><pre><code>curl https://raw.githubusercontent.com/Luka/githooks/master/pre-commit &gt; .git/hooks/pre-commit</code></pre><p>讓腳本擁有執行的權限</p><pre><code>chmod +x .git/hooks/pre-commit</code></pre><p>做完這些已經具有自動檢查的功能了</p><h3 id="1-2-Demo"><a href="#1-2-Demo" class="headerlink" title="1.2 Demo"></a>1.2 Demo</h3><pre><code>git commit -m &quot;hello world&quot;File: app/views/company/jobs/new.html.slim:99:binding.pryThere are some occurrences of console.log|debugger|binding.pry at your modification.Are you sure want to continue? (y/n)</code></pre><p>looks great!</p><h3 id="1-3-reference"><a href="#1-3-reference" class="headerlink" title="1.3 reference"></a>1.3 reference</h3><p><a href="https://cbabhusal.wordpress.com/2014/10/21/ruby-on-rails-githooks-basics/">GIT Precommit hooks Basics : Block debug command from commit</a></p><h2 id="Solution-2-Use-Gem"><a href="#Solution-2-Use-Gem" class="headerlink" title="Solution 2 - Use Gem"></a>Solution 2 - Use Gem</h2><p>如果嫌上述方法麻煩，不好管理。也可以考慮使用 Gem 來管理 Precommit Hook<br><code>Gem &#39;pre-commit&#39;</code> 可以做到這件事情。把 <code>pre-commit</code> 加入你的開發環境。</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><pre><code class="rb">group :development do  gem &quot;pre-commit&quot;, require: falseend</code></pre><p>接著輸入 bundle 更新 Gem Set</p><pre><code>bundle</code></pre><p>設定需要的 check</p><pre><code>git config pre-commit.checks &quot;[pry, debugger,yaml]&quot;</code></pre><p>要取消某個設定</p><pre><code>git config pre-commit.checks &quot;[pry, debugger]&quot;</code></pre><p>可檢查的項目可到 github 查詢</p><p><a href="https://github.com/jish/pre-commit">jish/pre-commit: A slightly improved pre-commit hook for git</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> Time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Time in Rails</title>
      <link href="/2017/10/23/old%20posts/2017-10-23-time-in-rails/"/>
      <url>/2017/10/23/old%20posts/2017-10-23-time-in-rails/</url>
      
        <content type="html"><![CDATA[<h2 id="Rails-中的時間"><a href="#Rails-中的時間" class="headerlink" title="Rails 中的時間"></a>Rails 中的時間</h2><p>Rails 中的時間是個有趣的議題，如果不多加注意，很容易被雷到。<br>尤其是一般在本地端開發的的時候並不會有時區不同的問題，但是一放到 Server 上，就會忽然爆炸。<br>是不能不小心的一個問題。<br>如果你在 <code>config/application.rb</code> 設定 Time.zone，範例如下:</p><pre><code class="rb">config.i18n.default_locale = &quot;zh-TW&quot;</code></pre><p>如果透過 ActiveRecord 來存取，取得的會是你在 <code>application.rb</code> 裡面設定的 Time.zone<br>比如說你有一個 <code>User</code> 物件:</p><pre><code class="rb">user = User.firstuser.created_at.zone# =&gt; &quot;CST&quot;</code></pre><p>CST 即中原標準時間. it’s right!</p><h2 id="Time-now-VS-Time-current"><a href="#Time-now-VS-Time-current" class="headerlink" title="Time.now VS Time.current"></a>Time.now VS Time.current</h2><p>接著來比較 Time.now 和 Time.current</p><pre><code class="rb">Time.now.zone=&gt; &quot;UTC&quot;Time.current.zone=&gt; &quot;CST&quot;</code></pre><p>很明顯的可以看到，如果是 <code>Time.now</code> 的話回傳的會是格林威治時間 <code>UTC</code>, 但若是使用 <code>Time.current</code> 回傳的則會是我們在 <code>config/application.rb</code> 裡面設定的 Time.zone。究竟為什麼會有這個差異呢? 其實很簡單，因為 Time.now 是 Ruby 的原生物件，而 Time.current 是 Rails ActiveSupport 的物件。</p><pre><code class="rb">Time.now.class=&gt; TimeTime.current.class=&gt; ActiveSupport::TimeWithZone</code></pre><p>我們再來做個測試，來看看剛剛的 <code>user.created_at</code> 是不是真的如果們所想:</p><pre><code class="rb">User.last.created_at.class=&gt; ActiveSupport::TimeWithZone</code></pre><p>太棒了! 果然如此，這樣一來是不是很容易理解 Rails 的時間了。</p><h2 id="Rails-時間的另一個重點-SQL"><a href="#Rails-時間的另一個重點-SQL" class="headerlink" title="Rails 時間的另一個重點 - SQL"></a>Rails 時間的另一個重點 - SQL</h2><p>Rails 時間另一個需要注意的地方是 SQL 的時間。來比較一下使用 Time.now 和 Time.current 在 ActiveRecord Relation 中的時間:</p><pre><code class="rb">User.where(&quot;created_at &gt; ?&quot;, Time.now)#=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;deleted_at&quot; IS NULL AND (created_at &gt; &#39;2017-11-17 14:46:01.698018&#39;)User.where(&quot;created_at &gt; ?&quot;, Time.current)#=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;deleted_at&quot; IS NULL AND (created_at &gt; &#39;2017-11-17 14:46:09.655406&#39;)</code></pre><p>筆者在測試的時候是台北時間(CST)晚上 22:46，可以發現兩者依賴的時區都是在 <code>config/application.rb</code> 設定的時區。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> Time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go - 在 OSX 安裝 GVM</title>
      <link href="/2017/05/21/old%20posts/2017-05-21-gvm-in-osx/"/>
      <url>/2017/05/21/old%20posts/2017-05-21-gvm-in-osx/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有寫過一篇用 Brew 安裝 GO，因為習慣上會用 rvm、nvm 來管理程式語言的版本，<br>所以心血來潮也想試試看安裝 GVM 在作業環境，不過如標題所示，<br>gvm Bug 滿多，而且跟我慣用的 Fish shell 不太相容。<br>總結下來，如果使用 OSX 環境推薦大家使用 Brew 來安裝。</p><h2 id="安裝-GVM"><a href="#安裝-GVM" class="headerlink" title="安裝 GVM"></a>安裝 GVM</h2><p>安裝 gvm 完成後會跳出錯誤，沒有 gcc，所以我們來裝 gcc 。</p><h3 id="安裝-gcc"><a href="#安裝-gcc" class="headerlink" title="安裝 gcc"></a>安裝 gcc</h3><pre><code>brew install gcc</code></pre><p>安裝完成後輸入 gcc，結果：</p><pre><code>&gt; Unknown command &#39;gcc&#39;</code></pre><p>brew 安裝的 gcc 並不能讓你直接用指令使用。<br>安裝完成後切換至 <code>/usr/local/bin </code> 資料夾，輸入 <code>ls</code> 查看資料夾。</p><p><img src="media/14951665132417/14951747217993.jpg"></p><p>並沒有直接對應到 gcc，而是 gcc-4.9，來測試看看 gcc-4.9 能否正常動作：</p><pre><code>$ /usr/local/bin/gcc-4.9 -vUsing built-in specs.COLLECT_GCC=/usr/local/bin/gcc-4.9COLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc@4.9/4.9.3/bin/../libexec/gcc/x86_64-apple-darwin15.0.0/4.9.3/lto-wrapperTarget: x86_64-apple-darwin15.0.0Configured with: ../configure --build=x86_64-apple-darwin15.0.0 --prefix=/usr/local/Cellar/gcc49/4.9.3 --libdir=/usr/local/Cellar/gcc49/4.9.3/lib/gcc/4.9 --enable-languages=c,c++,objc,obj-c++ --program-suffix=-4.9 --with-gmp=/usr/local/opt/gmp4 --with-mpfr=/usr/local/opt/mpfr2 --with-mpc=/usr/local/opt/libmpc08 --with-cloog=/usr/local/opt/cloog018 --with-isl=/usr/local/opt/isl011 --with-system-zlib --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --with-build-config=bootstrap-debug --disable-werror --with-pkgversion=&#39;Homebrew gcc49 4.9.3&#39; --with-bugurl=https://github.com/Homebrew/homebrew-versions/issues --enable-plugin --disable-nls --enable-multilibThread model: posixgcc version 4.9.3 (Homebrew gcc49 4.9.3)</code></pre><p>OK 看來沒問題！<br>剩下的是把 <code>gcc</code> 指令對應 <code>/usr/local/bin/gcc-4.9</code>，輸入以下指令：</p><pre><code>ln -s /usr/local/bin/gcc-4.9 gcc</code></pre><p>來測試看看 gcc 指令：</p><pre><code>$ gcc -vUsing built-in specs.COLLECT_GCC=gccCOLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc@4.9/4.9.3/bin/../libexec/gcc/x86_64-apple-darwin15.0.0/4.9.3/lto-wrapperTarget: x86_64-apple-darwin15.0.0Configured with: ../configure --build=x86_64-apple-darwin15.0.0 --prefix=/usr/local/Cellar/gcc49/4.9.3 --libdir=/usr/local/Cellar/gcc49/4.9.3/lib/gcc/4.9 --enable-languages=c,c++,objc,obj-c++ --program-suffix=-4.9 --with-gmp=/usr/local/opt/gmp4 --with-mpfr=/usr/local/opt/mpfr2 --with-mpc=/usr/local/opt/libmpc08 --with-cloog=/usr/local/opt/cloog018 --with-isl=/usr/local/opt/isl011 --with-system-zlib --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --with-build-config=bootstrap-debug --disable-werror --with-pkgversion=&#39;Homebrew gcc49 4.9.3&#39; --with-bugurl=https://github.com/Homebrew/homebrew-versions/issues --enable-plugin --disable-nls --enable-multilibThread model: posixgcc version 4.9.3 (Homebrew gcc49 4.9.3)</code></pre><p>It’s working!!</p><p><a href="https://apple.stackexchange.com/questions/99077/how-to-set-gcc-4-8-as-default-gcc-compiler">lion - How to set gcc 4.8 as default gcc compiler - Ask Different</a></p><h2 id="安裝-GO-1-4"><a href="#安裝-GO-1-4" class="headerlink" title="安裝 GO 1.4"></a>安裝 GO 1.4</h2><p>要安裝 go 1.4 以上的版本前，你得先安裝 go 1.4。<br>而安裝 go 1.4 的時候會遇到以下的 bug:</p><pre><code>$ gvm install go1.4Installing go1.4... * Compiling...ERROR: Failed to compile. Check the logs at /Users/andrew/.gvm/logs/go-go1.4-compile.logERROR: Failed to use installed version</code></pre><p>這邊有個 work around 的方式，使用 binary 檔安裝。</p><pre><code>gvm install go1.4 --binary</code></pre><p><a href="https://github.com/moovweb/gvm/issues/217">go1.4 compile error in Mac OS 10.11 · Issue #217 · moovweb/gvm</a></p><h2 id="安裝-GO-1-8"><a href="#安裝-GO-1-8" class="headerlink" title="安裝 GO 1.8"></a>安裝 GO 1.8</h2><p>安裝完成後要設定 GOROOT_BOOTSTRAP 變數，這樣就可以安裝 go 1.4 以上的版本了</p><pre><code>gvm install go1.4gvm use go1.4export GOROOT_BOOTSTRAP=$GOROOTgvm install go1.8</code></pre><p>expo</p><p><a href="https://github.com/moovweb/gvm/issues/155">Error with go1.5 install · Issue #155 · moovweb/gvm</a></p><h2 id="將-gvm-指定加到-shell"><a href="#將-gvm-指定加到-shell" class="headerlink" title="將 gvm 指定加到 shell"></a>將 gvm 指定加到 shell</h2><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>要將 gvm 指令加到 bash，將以下指令加到 <code>~/.bashsrc</code></p><pre><code># added gvm command to shellsource &quot;$HOME/.gvm/scripts/gvm&quot;# directory path for GOexport GOPATH=$HOME/gopathexport GOROOT=$HOME/goexport PATH=$PATH:$GOROOT/bin</code></pre><h3 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h3><p>要將 gvm 指令加到 fish shell，把以下指令加到 <code>~/.config/fish/config.fish</code></p><pre><code>function gvm   bass source ~/.gvm/scripts/gvm &#39;;&#39; gvm $argvend</code></pre><p><a href="http://hsuzuki.hatenablog.com/entry/2017/03/01/165708">Fish shell環境でgvmを導入する - メンチカツ</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS in Rails</title>
      <link href="/2017/05/20/old%20posts/2017-05-20-cors-in-rails/"/>
      <url>/2017/05/20/old%20posts/2017-05-20-cors-in-rails/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>跨網域存取的時候需要使用 CORS 來讓不同網域也可以存取相同網域的資源。請看下圖，Server 返回的 Response 必須明確指出哪些網域可以存取該 Server 的資源。<br>有這樣的行為模式的話，是不是可以在 Controller 中的 Response 加上 Header 來達成 CORS 呢？</p><p>答案是否定的。</p><p>因為當 PUT 或是 POST … 等等的 HTTP Verb 使用 CORS 時，<br>需要先使用 <code>PATCH</code> 這個 HTTP Verb 來確認有沒有跨網域存取的權限。<br>當 PATCH 動作打到 Rails Route 的時候，就會發現，沒有對應的 Route，於是就回 404 了。</p><p><img src="https://lh3.googleusercontent.com/-_Pes10FnRo4/WSLrN-5YTJI/AAAAAAAAKyw/TS2_O2GiWJocUjlo15glwizmLVOW4JUXQCHM/I/14954599810526.jpg"></p><p>(圖片來源: MDN)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>所以如果以後有 CORS 需求的話，請使用 <a href="https://github.com/cyu/rack-cors">gem ‘rack-cors’</a>，從 middleware 層處理 CORS，會是比較萬用的解法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> CORS </tag>
            
            <tag> gem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(6) - 使用 docker 包裝 Fluentd</title>
      <link href="/2017/05/19/old%20posts/2017-05-19-use-docker-to-build-efk-stack/"/>
      <url>/2017/05/19/old%20posts/2017-05-19-use-docker-to-build-efk-stack/</url>
      
        <content type="html"><![CDATA[<h2 id="Aggregator-與-Forwarder"><a href="#Aggregator-與-Forwarder" class="headerlink" title="Aggregator 與 Forwarder"></a>Aggregator 與 Forwarder</h2><p><img src="https://lh3.googleusercontent.com/-ISAjtMLBHsQ/WSL5U_Aw87I/AAAAAAAAKzA/a5gcrr4jQ508MINa9Yy1aVR23CMFccYuwCHM/I/14954621237379.jpg"></p><h2 id="使用-docker-建立-fluentd-image"><a href="#使用-docker-建立-fluentd-image" class="headerlink" title="使用 docker 建立 fluentd image"></a>使用 docker 建立 fluentd image</h2><p>為了模擬需要的環境，我們來使用 docker 建立 fluentd image</p><p>參考<a href="https://github.com/fluent/fluentd-docker-image">fluent/fluentd-docker-image</a>來製作個人化的 fluentd image</p><h3 id="2-1-準備工作"><a href="#2-1-準備工作" class="headerlink" title="2.1 準備工作"></a>2.1 準備工作</h3><p>建立 custom-fluentd 資料夾</p><pre><code>mkdir custom-fluentd</code></pre><p>建立 plugin 資料夾</p><pre><code>cd custom-fluentdmkdir plugins</code></pre><p>下載 Dockerfile 範例</p><pre><code>curl https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/Dockerfile.sample &gt; Dockerfile</code></pre><p>下載 fluent.conf 範例</p><pre><code>curl https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/fluent.conf.erb &gt; fluent.conf</code></pre><h3 id="2-2-製作-Fluentd-Log-Aggregator-Image"><a href="#2-2-製作-Fluentd-Log-Aggregator-Image" class="headerlink" title="2.2 製作 Fluentd Log Aggregator Image"></a>2.2 製作 Fluentd Log Aggregator Image</h3><pre><code>FROM fluent/fluentd:onbuildLuka &lt;Luka@gmail.com&gt;USER rootRUN apk add --update --virtual .build-deps \        sudo build-base ruby-dev \ # cutomize following instruction as you wish &amp;&amp; sudo -u fluent gem install \        fluent-plugin-secure-forward \ &amp;&amp; sudo -u fluent gem sources --clear-all \ &amp;&amp; apk del .build-deps \ &amp;&amp; rm -rf /var/cache/apk/* \           /home/fluent/.gem/ruby/2.3.0/cache/*.gemUSER fluentEXPOSE 24284</code></pre><p>因為我們需要輸出給 Elasticsearch Kibana 可以接收的格式，<br>所以需要安裝 <code>elasticsearch plugin</code></p><p>在的下面<code>fluent-plugin-secure-forward \</code>加上<code>        fluent-plugin-elasticsearch \</code> 變成：</p><pre><code> # cutomize following instruction as you wish &amp;&amp; sudo -u fluent gem install \        fluent-plugin-secure-forward \        fluent-plugin-elasticsearch \</code></pre><p>Aggregator 與 Forwarder 不同之處會是 config 檔與 plugin 的安裝，因為 Forwarder 不負責過濾與輸出 log 格式，只負責運送 Log，以此觀念下我們來構建 Fluentd 的高可用架構。</p><p>編輯 fluntd.conf (官方 image 所設定路徑)<br>input 使用 forward 來接收從 Fowarder 傳過來的 log。<br>output 傳送到 elasticsearch。</p><pre><code># Input&lt;source&gt;  @type forward  port 24224&lt;/source&gt;# Output&lt;match fluentd.es.**&gt;  @type elasticsearch  logstash_format true  flush_interval 1s # for testing&lt;/match&gt;</code></pre><p>產生 docker image 的方法是到剛剛我們編輯好的 Docker File 資料夾底下(包含 config 檔案)輸入</p><pre><code>docker build -t my-fluentd-aggregator:1.0 ./</code></pre><p>編譯完成後即會有叫做 <code>my-fluentd-aggregator</code> 的 image 可以使用。</p><p>接著輸入 <code>docker run -p 24224:24224 custom-fluentd</code> 即可啟動 container，並 bind 至本機 24224 port 上。</p><h3 id="2-3-製作-Fluentd-Log-Aggregator-Image"><a href="#2-3-製作-Fluentd-Log-Aggregator-Image" class="headerlink" title="2.3 製作 Fluentd Log Aggregator Image"></a>2.3 製作 Fluentd Log Aggregator Image</h3><p>Forwarder 也是如法炮製，差別在於 Dockerfile 不需加上 Elasticsearch Output 套件。</p><p>並修改 fluent.conf 檔：</p><pre><code># input&lt;source&gt;  @type forward  port 24224&lt;/source&gt;# forward to aggregator&lt;match fluentd.forwarder.**&gt;  @type forward  send_timeout 10s  heartbeat_interval 1s  heartbeat_type tcp  # optional  recover_wait 10s  phi_threshold 16  hard_timeout 10s  buffer_type file  buffer_path ~/splashtop/EFK/buffer/  buffer_chunk_limit 8m  buffer_queue_limit 4096  flush_interval 5s  retry_wait 20s  &lt;server&gt;    # primary host    host xxx.xxx.xxx.xxx    port 25225  &lt;/server&gt;  &lt;server&gt;    host 192.168.0.2    port 24224    standby  &lt;/server&gt;&lt;/match&gt;</code></pre><p>完成後輸入</p><pre><code>docker build -t my-fluentd-forwarder:1.0 ./</code></pre><p>編譯完成後即會有叫做 <code>my-fluentd-forwarder</code> 的 image 可以使用。</p><p>接著輸入 <code>docker run -p 24225:24224 custom-fluentd</code> 即可啟動 container，並 bind 至本機 24225 port 上。</p><h2 id="使用-docker-compose-整合容器"><a href="#使用-docker-compose-整合容器" class="headerlink" title="使用 docker-compose 整合容器"></a>使用 docker-compose 整合容器</h2><p>可以使用 docker-compose 節省 build 的動作。<br>新增檔案 <code>docker-compose.yml</code>，輸入以下內容：</p><pre><code>version: &#39;1&#39;services:  forwarder:    build: ./fluentd-forwarder    ports:     - &quot;24224:24224&quot;  aggregator:    build: ./fluentd-aggregator    ports:     - &quot;24225:24224&quot;</code></pre><p>輸入 <code>docker-compose up</code> 一次 build forwarder 和 aggregator 兩個 image，<br>並將容器跑起來。</p><h2 id="實際運作"><a href="#實際運作" class="headerlink" title="實際運作"></a>實際運作</h2><p>實際運作的時候只需將 fluent.conf 中的 ip 位置，改成真實 Server IP，即可開始運作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(5) - Fluentd 高可用架構(High Availibity)</title>
      <link href="/2017/05/18/old%20posts/2017-05-18-efk-high-availbility/"/>
      <url>/2017/05/18/old%20posts/2017-05-18-efk-high-availbility/</url>
      
        <content type="html"><![CDATA[<h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>之前我們的架構是直接由 fluentd td-agent 傳送到 elasticsearch (如下圖)</p><p><img src="https://lh3.googleusercontent.com/-Fw9_PcnHOB4/WSKUWe9olJI/AAAAAAAAKyI/H2z06ueuQYsPC6SxezL40tdTQS1jaME6gCHM/I/14943188485356.jpg"></p><p>為了更高的可用性(High Availibity)，我們在中間加入 aggregator 的角色，讓在 td-agent 扮演 forwarder 角色，職責更加單一，forwarder 只負責「傳送資料給 aggregator」。過濾(filter)資料的工作轉由 aggregator 負責，這樣的架構下降低了原本應用程式伺服器(application server)的負擔，提供了更高的可用性。架構如下：</p><p><img src="https://lh3.googleusercontent.com/-xndXkgeo0mg/WSKUWpAiPKI/AAAAAAAAKyM/jX3_xCaRC3YMEURD4kCgBmCdi0rjcGw3QCHM/I/14943830727801.jpg"></p><h2 id="實際配置方式"><a href="#實際配置方式" class="headerlink" title="實際配置方式"></a>實際配置方式</h2><h3 id="2-1-如何配置-Forwarder"><a href="#2-1-如何配置-Forwarder" class="headerlink" title="2.1 如何配置 Forwarder"></a>2.1 如何配置 Forwarder</h3><pre><code># TCP input&lt;source&gt;  @type forward  port 24224&lt;/source&gt;# HTTP input&lt;source&gt;  @type http  port 8888&lt;/source&gt;# Log Forwarding&lt;match mytag.**&gt;  @type forward  # primary host  &lt;server&gt;    host 192.168.0.1    port 24224  &lt;/server&gt;  # use secondary host  &lt;server&gt;    host 192.168.0.2    port 24224    standby  &lt;/server&gt;  # use longer flush_interval to reduce CPU usage.  # note that this is a trade-off against latency.  flush_interval 60s&lt;/match&gt;</code></pre><h3 id="2-2-如何配置-Aggregator"><a href="#2-2-如何配置-Aggregator" class="headerlink" title="2.2 如何配置 Aggregator"></a>2.2 如何配置 Aggregator</h3><pre><code># Input&lt;source&gt;  @type forward  port 24224&lt;/source&gt;# Output&lt;match mytag.**&gt;  ...&lt;/match&gt;</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://docs.fluentd.org/v0.12/articles/high-availability#network-topology">Fluentd High Availability Configuration - Fluentd</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(4) - 讓 Elasticsearch 與 Kibana 能夠接收 Rails 的 log</title>
      <link href="/2017/05/17/old%20posts/2017-05-17-fluentd-connect-to-elasticsearch-kibana/"/>
      <url>/2017/05/17/old%20posts/2017-05-17-fluentd-connect-to-elasticsearch-kibana/</url>
      
        <content type="html"><![CDATA[<h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p><img src="https://lh3.googleusercontent.com/-d5gQhHd4ylM/WSKepoR8vPI/AAAAAAAAKyc/0BxPY3iDqEkpUttT907x5q__p1z2Cgy1wCHM/I/14943188485356.jpg"></p><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><h3 id="2-1-安裝-elasticsearch"><a href="#2-1-安裝-elasticsearch" class="headerlink" title="2.1 安裝 elasticsearch"></a>2.1 安裝 elasticsearch</h3><pre><code>$ curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.2.tar.gz$ tar zxvf elasticsearch-5.0.2.tar.gz$ cd elasticsearch-5.0.2</code></pre><p>啟動 elasticsearch</p><pre><code>$ ./bin/elasticsearch</code></pre><h3 id="2-2-安裝-Kibana"><a href="#2-2-安裝-Kibana" class="headerlink" title="2.2 安裝 Kibana"></a>2.2 安裝 Kibana</h3><pre><code>curl -O https://artifacts.elastic.co/downloads/kibana/kibana-5.0.2-darwin-x86_64.tar.gz$ tar zxvf kibana-5.0.2-darwin-x86_64.tar.gz$ cd kibana-5.0.2-darwin-x86_64</code></pre><p>啟動 kibana</p><pre><code>$ ./bin/kibana</code></pre><h3 id="2-3-安裝-fluentd"><a href="#2-3-安裝-fluentd" class="headerlink" title="2.3 安裝 fluentd"></a>2.3 安裝 fluentd</h3><p>透過fluentd 的 elasticsearch 套件<code>fluent-plugin-elasticsearch</code>我們可以讓 fluentd 輸出的 log 變成 logstash 輸出的格式，這樣一來 kibana 就可以顯示我們儲存的 log。</p><p>安裝 fluent-plugin-elasticsearch</p><pre><code>fluent-gem install fluent-plugin-elasticsearch --no-document</code></pre><p>設定 fluentd 設定檔</p><pre><code>mkdir td-agenttouch ./td-agent/td-agent.conf</code></pre><p>編輯 <code>td-agent.conf</code><br>因為 Rails 是使用 forward input，我們只需要開啟 forward input 就好。<br>如果你想監測其他的 log 類型例如：syslog，也可以透過設定 source 來達成。</p><pre><code># get logs from syslog#&lt;source&gt;#  @type syslog#  port 42185#  tag syslog#&lt;/source&gt;# get logs from fluent-logger, fluent-cat or other fluentd instances&lt;source&gt;  @type forward&lt;/source&gt;&lt;match syslog.**&gt;  @type elasticsearch  logstash_format true  flush_interval 10s # for testing&lt;/match&gt;</code></pre><p>執行 fluentd</p><pre><code>fluentd -c ./fluent/td-agent.conf -vv</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://docs.fluentd.org/v0.12/articles/free-alternative-to-splunk-by-fluentd">Free Alternative to Splunk Using Fluentd - Fluentd</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(3) - Rails 與 Fluentd 的串接方法</title>
      <link href="/2017/05/16/old%20posts/2017-05-16-rails-connect-to-fluentd/"/>
      <url>/2017/05/16/old%20posts/2017-05-16-rails-connect-to-fluentd/</url>
      
        <content type="html"><![CDATA[<h2 id="幾種可以跟-Rails-串接的方式"><a href="#幾種可以跟-Rails-串接的方式" class="headerlink" title="幾種可以跟 Rails 串接的方式"></a>幾種可以跟 Rails 串接的方式</h2><ol><li><p>gem ‘fluent-logger’<br> <a href="http://docs.fluentd.org/v0.12/articles/ruby">Centralize Logs from Ruby Applications</a></p></li><li><p>自定解析<br> <a href="https://github.com/fluent/fluent-plugin-grok-parser">fluent/fluent-plugin-grok-parser: Fluentd’s Grok parser</a></p></li><li><p>使用 Rails-logger 來蒐集, 如果你的目標是讓 EFK 變成一個 log 整合系統，這個方式是你的最佳選項。搭配 <code>act-fluent-logger-rails&#39; </code> 與 <code>lograge</code> 這兩個 gem, 可以將你的 log 更加的組織化。詳細教學請參照下方連結:<br> <a href="http://www.fluentd.org/datasources/rails">Collecting and Analyzing Ruby on Rails Logs | Fluentd</a></p></li></ol><p>這篇我們採用的方式是 1，優點是可以自定義 log 的形式，缺點是需要自行設計 log 系統。如果你只是想把原本存在於 <code>log/prodcution.log</code> 搜集到 EFK Stack，那可以使用 3 的方式來整合 Rails-app 的 log。而如果你想蒐集 Rails 以外的 log 如 apache 或是 nginx 的 log，則可以使用 2 的方式。</p><h2 id="Fluentd-agent-與-Rails-的串接"><a href="#Fluentd-agent-與-Rails-的串接" class="headerlink" title="Fluentd agent 與 Rails 的串接"></a>Fluentd agent 與 Rails 的串接</h2><h3 id="step-1-使用-Gem-安裝-Fluentd"><a href="#step-1-使用-Gem-安裝-Fluentd" class="headerlink" title="step 1: 使用 Gem 安裝 Fluentd"></a>step 1: 使用 Gem 安裝 Fluentd</h3><p>這邊使用的方法是使用 gem 安裝，<br>配合 rvm 方便管理，不會污染環境</p><pre><code>gem install fluentd -v &quot;~&gt; 0.12.0&quot; --no-ri --no-rdoc</code></pre><blockquote><p>Error: 因為我的開發環境用的 Rails 版本較舊，bundler 使用的是 1.14.4，在開發的時候遇到錯誤訊息<code>gems/bundler-1.14.4/lib/bundler/rubygems_ext.rb:45:in full_gem_path&#39;</code>。<br>Solution：輸入 <code>gem update --system</code> 更新系統 gem 的版本。</p></blockquote><h3 id="step-2-產生設定檔"><a href="#step-2-產生設定檔" class="headerlink" title="step 2: 產生設定檔"></a>step 2: 產生設定檔</h3><p>輸入以下指令</p><pre><code>fluentd --setup ./fluent</code></pre><p>資料夾會變成這樣</p><pre><code>$ tree ..└── fluent    ├── fluent.conf    └── plugin</code></pre><h3 id="step-3-啟動-fluentd"><a href="#step-3-啟動-fluentd" class="headerlink" title="step 3: 啟動 fluentd"></a>step 3: 啟動 fluentd</h3><pre><code>fluentd -c ./fluent/fluent.conf -vv &amp;</code></pre><p>輸入後 fluentd 就可以順利跑起來了</p><p><img src="media/14943115845575/14943128690870.jpg"></p><h3 id="step-4-測試-fluentd-功能是否正常"><a href="#step-4-測試-fluentd-功能是否正常" class="headerlink" title="step 4: 測試 fluentd 功能是否正常"></a>step 4: 測試 fluentd 功能是否正常</h3><pre><code class="rb">require &#39;fluent-logger&#39;</code></pre><p>初始化 Fluentd</p><pre><code>Fluent::Logger::FluentLogger.open(nil, :host=&gt;&#39;localhost&#39;, :port=&gt;24224)</code></pre><p>來測試一下訊息</p><pre><code class="rb">Fluent::Logger.post(&quot;fluentd.test.follow&quot;, &#123;&quot;from&quot;=&gt;&quot;userA&quot;, &quot;to&quot;=&gt;&quot;userB&quot;&#125;)</code></pre><p>結果</p><pre><code>2017-05-09 15:09:00 +0800 [warn]: fluent/agent.rb:170:emit: no patterns matched tag=&quot;fluentd.test.follow&quot;</code></pre><p>可以看到 fluentd 並沒有成功收到我們想記錄的 log，並發現警告訊息，原因是 Fluentd 蒐集 log pattern 並沒有包含 <code>fluentd.test.follow</code></p><h3 id="step-5-讓-Fluentd-可以蒐集到我們要的-log-pattern"><a href="#step-5-讓-Fluentd-可以蒐集到我們要的-log-pattern" class="headerlink" title="step 5: 讓 Fluentd 可以蒐集到我們要的 log pattern"></a>step 5: 讓 Fluentd 可以蒐集到我們要的 log pattern</h3><p>來修改 Fluentd 的設定檔，打開設定檔：</p><pre><code>vim ./fluent/fluent.conf</code></pre><p>加入 pattern</p><pre><code>&lt;match fluentd.test.follow.**&gt;  @type stdout  @id stdout_output&lt;/match&gt;</code></pre><p>重新啟動 fluentd，再記錄一次 log 看看：</p><pre><code class="rb">Fluent::Logger::FluentLogger.open(nil, :host=&gt;&#39;localhost&#39;, :port=&gt;24224)Fluent::Logger.post(&quot;fluentd.test.follow&quot;, &#123;&quot;from&quot;=&gt;&quot;userA&quot;, &quot;to&quot;=&gt;&quot;userB&quot;&#125;)</code></pre><p>結果</p><pre><code>2017-05-09 15:16:19 +0800 fluentd.test.follow: &#123;&quot;from&quot;:&quot;userA&quot;,&quot;to&quot;:&quot;userB&quot;&#125;</code></pre><p>這樣就完成單機上的 fluentd-agent 與 Rails Application 的串接了。</p><h2 id="介紹-Forward-Input-Plugin"><a href="#介紹-Forward-Input-Plugin" class="headerlink" title="介紹 Forward Input Plugin"></a>介紹 Forward Input Plugin</h2><p>Fluentd 蒐集 Rails 的 Log 的時候，並不是使用讀取檔案的方式。<br>而是使用 <code>forward input plugin</code> 來幫助蒐集。<br>forward input plugin 是一個可以蒐集 tcp 或是 utp 協定的 fluentd plugin。</p><p><a href="http://docs.fluentd.org/v0.12/articles/in_forward">forward Input Plugin - Fluentd</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://docs.fluentd.org/v0.12/articles/quickstart">Quickstart Guide - Fluentd</a><br><a href="http://docs.fluentd.org/v0.12/articles/install-by-gem">Installing Fluentd Using Ruby Gem - Fluentd</a><br><a href="http://docs.fluentd.org/v0.12/articles/ruby">Centralize Logs from Ruby Applications - Fluentd</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> OSX </tag>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(2) - 介紹 EFK (Elasticsaerch + Fluentd + Kibana)</title>
      <link href="/2017/05/15/old%20posts/2017-05-15-introduce-to-fluentd-efk/"/>
      <url>/2017/05/15/old%20posts/2017-05-15-introduce-to-fluentd-efk/</url>
      
        <content type="html"><![CDATA[<h2 id="Fluentd-介紹"><a href="#Fluentd-介紹" class="headerlink" title="Fluentd 介紹"></a>Fluentd 介紹</h2><p><img src="https://lh3.googleusercontent.com/-j70_YXz_sk4/WNoTF7xoWDI/AAAAAAAAKvI/2jTCdWgspPs/I/14906863744809.jpg"></p><p>Fluentd 跟 Logstash 扮演的角色相同。<br>過去 Logstash 的歷史有效能不佳的記錄，Fluentd 在效能上的口碑更好。<br>如下圖所示，Fluentd 可以將蒐集 Log 負責的過程統一規格化。我們在使用的時候，選用想要蒐集Log樣式的 input plugin，<br>例如：要蒐集 apache 的 log 我們就選用 fluentd 的 apache input plugin。<br>輸出的時候選擇 output plugin，例如: logstash output plugin，這樣就能夠讓 Elasticsearch 和 Kibana 接受。<br>有著這種特性我們可以用 Fluentd 來取代 Logstash，讓原本的 ELK Stack (Elasticsearch + Logstash + Kibana) 變成 <code>EFK</code>。<br>(Elasticsearch + Fluentd + Kibana)。</p><p><img src="https://lh3.googleusercontent.com/-BOUMzF0Cmtg/WNoTGAw0YeI/AAAAAAAAKvM/ZrdJjwU8rQg/I/14906863534401.jpg"></p><hr><h2 id="Fluentd-是值得信賴的"><a href="#Fluentd-是值得信賴的" class="headerlink" title="Fluentd 是值得信賴的"></a>Fluentd 是值得信賴的</h2><p>Ruby 之父 Matz 與 Heroku co-founder 推薦</p><p><img src="https://lh3.googleusercontent.com/-m44IbmNOduw/WNoTGfUDV9I/AAAAAAAAKvQ/L9rkWT9NDXg/I/14906859399847.jpg"></p><p>企業推薦</p><p><img src="https://lh3.googleusercontent.com/-SeZ7MagNN_I/WNoTGlswbXI/AAAAAAAAKvU/ZNwwJ_hsn0E/I/14906865411614.jpg"></p><p>隸屬 CNCF 聯盟</p><p><img src="https://lh3.googleusercontent.com/-E-X1fwq1UOw/WNoTHMyWrzI/AAAAAAAAKvY/vfTXYe45n3U/I/14906865828825.jpg"></p><hr><h3 id="Fluentd-與-Logstash-比較"><a href="#Fluentd-與-Logstash-比較" class="headerlink" title="Fluentd 與 Logstash 比較"></a>Fluentd 與 Logstash 比較</h3><p>這邊有兩篇很棒的比較：</p><p><a href="https://www.loomsystems.com/single-post/2017/01/30/A-Comparison-of-Fluentd-vs-LogStash-Log-Collector">Loom Systems - AI Log Analysis for All Your Applications</a></p><p><a href="http://dev.haufe.com/log-aggregation/">Log Aggregation with Fluentd, Elasticsearch and Kibana</a></p><hr><h3 id="其他資源"><a href="#其他資源" class="headerlink" title="其他資源"></a>其他資源</h3><p><a href="https://www.fluentd.org/plugins/all">List of All Plugins</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> OSX </tag>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK(1) - 介紹 ELK Stack( Elasticsearch + Logstash + Kibana)</title>
      <link href="/2017/05/14/old%20posts/2017-05-14-introduce-to-elasticsearch-logstash-kibana-aka-elk/"/>
      <url>/2017/05/14/old%20posts/2017-05-14-introduce-to-elasticsearch-logstash-kibana-aka-elk/</url>
      
        <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><h2 id="整體架構"><a href="#整體架構" class="headerlink" title="整體架構"></a>整體架構</h2><ul><li>最左邊的 Logstash Shipper 用來運送 Log 到 Log 處理中心。</li><li>Redis 當做 Buffer 來緩衝資料量瞬間爆量的問題。</li><li>右邊的 Logstash 將 Log 加工成 Elasticserach、Kibana 可以處理的格式。</li><li>Kibana 是一個後台，可以看到我們所有蒐集的 Log，輸入搜尋條件後就可以很快的找到需要的資料。</li></ul><p>為什麼我們要蒐集 log?</p><ul><li>想像一下在被攻擊時我想列出某一ip的所有記錄或是某個使用者的行為蹤跡，以做對應的處理。</li><li>伺服器在記憶體標高的那段時間系統到底做了些什麼事情，可以幫助我們迅速找到系統問題、對症下藥。</li></ul><p><img src="https://lh3.googleusercontent.com/-exOBSKTu4UA/WNoMlrXpgGI/AAAAAAAAKu4/7OhqQpvsR0c/I/14906715245146.jpg"></p><hr><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><p>Logstash 是一套 Log 分析框架，可以幫助我們處理各式各樣的 Log</p><p><img src="https://lh3.googleusercontent.com/-r7elMh7APLA/WNoMk-QolvI/AAAAAAAAKus/4GRMGwJnEiY/I/14906672318390.jpg"></p><h3 id="2-1-Beats-介紹"><a href="#2-1-Beats-介紹" class="headerlink" title="2.1 Beats 介紹"></a>2.1 Beats 介紹</h3><p>Beat 即為 logstash forwarder 又稱為 shipper，因為之前的 logstash forwarder 有著效能問題，elastic.co 公司推出 Beat 來取代之。除了原本的 log 蒐集(<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">filebeat</a>)以外，也可以監控系統狀態(<a href="https://www.elastic.co/guide/en/beats/metricbeat/5.2/metricbeat-overview.html">metricbeat</a>)，或是伺服器網路是否正常運作(<a href="https://www.elastic.co/guide/en/beats/heartbeat/current/heartbeat-configuration.html">heartbeat</a>)<br>除此之外，社群上也有大量各式各樣的 Beat (<a href="https://www.elastic.co/guide/en/beats/libbeat/current/community-beats.html">Community Beats | Beats Platform Reference 5.2 | Elastic</a>) 可以使用</p><p><img src="https://lh3.googleusercontent.com/-H7VboeauWWE/WNoMlJwJpbI/AAAAAAAAKuw/AbpFk96DpIY/I/14906726298053.jpg"></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p>Kibana 是一個可以顯示 Logstash 處理後格式的後台。資料儲存於 Elasticsearch。<br>整理與視覺化我們需要的資料。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> EFK </tag>
            
            <tag> ELK </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 OSX 環境中測試 etc/hosts 是否成功修改</title>
      <link href="/2016/11/09/old%20posts/2016-11-09-testing-ip-after-modifing-etc-hosts/"/>
      <url>/2016/11/09/old%20posts/2016-11-09-testing-ip-after-modifing-etc-hosts/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>透過修改 etc/hosts 讓我們不需要透過 DNS 也能模擬網域名稱連線到伺服器。<br>可是設定是否成功？這時候我們可以用一些測試工具來檢測之。</p><h3 id="OSX環境下"><a href="#OSX環境下" class="headerlink" title="OSX環境下"></a>OSX環境下</h3><p>OSX 內建 <code>dscacheutil</code> 工具，可以用來檢測網址名稱對應 ip 的結果。<br>使用方法</p><pre><code>dscacheutil -q host -a name 檢測的網域名稱</code></pre><p>比如說我想要檢測 google.com 對應的 ip</p><pre><code>$ dscacheutil -q host -a name google.comname: google.comipv6_address: 2404:6800:4008:c03::66lsname: google.comip_address: 74.125.203.101ip_address: 74.125.203.100ip_address: 74.125.203.138ip_address: 74.125.203.139ip_address: 74.125.203.113ip_address: 74.125.203.102</code></pre><p>如果我在 <code>etc/hosts</code> 將 <code>google.com</code> 設定至自定義的 ip。</p><pre><code>111.111.111.111 google.com</code></pre><p>檢測的結果即變成</p><pre><code>$ dscacheutil -q host -a name google.comname: google.comipv6_address: 2404:6800:4008:c03::64name: google.comip_address: 111.111.111.111</code></pre><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://apple.stackexchange.com/questions/44567/how-can-i-install-getent-on-snow-leopard">mac - How can I install getent on Snow Leopard? - Ask Different</a></p><p>其他相關工具</p><p><a href="http://apple.stackexchange.com/questions/158117/os-x-10-10-1-etc-hosts-private-etc-hosts-file-is-being-ignored-and-not-resol">macos - OS X 10.10.1 /etc/hosts &amp; /private/etc/hosts file is being ignored and not resolving - Ask Different</a></p><p>Linux 環境</p><p><a href="http://unix.stackexchange.com/questions/134143/how-to-test-etc-hosts">dns - How to test /etc/hosts - Unix &amp; Linux Stack Exchange</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> OSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby - 讓 irb 更好用</title>
      <link href="/2016/10/24/old%20posts/2016-10-24-let-irb-better/"/>
      <url>/2016/10/24/old%20posts/2016-10-24-let-irb-better/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用<code>pry</code>的時候我們可以回到上一個輸入的指令，擁有記錄指令歷史的功能。其實<code>irb</code>也可以！</p><h3 id="開始修改"><a href="#開始修改" class="headerlink" title="開始修改"></a>開始修改</h3><p>修改<code>~/.irbrc</code></p><pre><code class="rb">require &#39;irb/ext/save-history&#39;IRB.conf[:SAVE_HISTORY] = 200IRB.conf[:HISTORY_FILE] = &quot;#&#123;ENV[&#39;HOME&#39;]&#125;/.irb-history&quot;</code></pre><p>修改完之後按下方向鍵上和下即可使用上一個用過的指令。而實際上，歷史紀錄是儲存在<code>~/.irb_history</code>。</p><p>另一個常用的功能 - <code>autocomplete </code> 我們也順便把它開起來。<br>在<code>~/.irbrc</code>中<code>irb/completion</code>即可，現在你的 irb 按下 tab 即可以自動補完。</p><pre><code class="rb">require &#39;irb/ext/save-history&#39;require &#39;irb/completion&#39;IRB.conf[:SAVE_HISTORY] = 200IRB.conf[:HISTORY_FILE] = &quot;#&#123;ENV[&#39;HOME&#39;]&#125;/.irb-history&quot;IRB.conf[:AUTO_INDENT] = true</code></pre><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><ul><li><p><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/irb/rdoc/IRB.html">Module: IRB (Ruby 2.0.0)</a></p></li><li><p><a href="https://kitt.hodsden.org/comment/1656#comment-1656">Have ruby irb console save history - kitt hodsden’s nags of a similar ilk</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby metaprogramming - Open Class and Refine </title>
      <link href="/2016/09/11/old%20posts/2016-09-11-ruby-meta-programming-refine/"/>
      <url>/2016/09/11/old%20posts/2016-09-11-ruby-meta-programming-refine/</url>
      
        <content type="html"><![CDATA[<h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>Open Class 是 Ruby 常用的技巧，指的是我們可以覆寫已經存在的方法，來修改物件或類別的行為。<br>在這邊我沒有要講詳細的作法，要介紹的是在 Ruby 2.0 中新增的 <code>refine</code></p><h3 id="Refine"><a href="#Refine" class="headerlink" title="Refine"></a>Refine</h3><p>Refine 是 ruby 2.0 之後加入的元素。<br>會使用 Refine 的原因是使用一般 Open Class 的技巧時並不會有明顯的提示。<br>所以我們如果沒有用比較清楚的方法標示 Open Class 作用的地方，造成的後果是非常難以維護且可怕的。<br>透過 refine 我們可以更安全的覆寫原本的 Class，尤其是系統中本來存在的一些方法。<br>用法是先定義一個 Module ，Module 裡面寫下你要覆寫的 Class 與要覆寫的方法。<br>並且用 Using 決定在何時使用。</p><pre><code class="rb">class Cat  def meow    puts &quot;Meow&quot;  endendmodule IAmRefineModule  refine Cat do    def meow      puts &quot;meow in Refine Module&quot;    end  endendc = Cat.newc.meowusing IAmRefineModulec = Cat.newc.meow</code></pre><p>執行結果：</p><pre><code>$ ruby refine_ex.rb-&gt; Meow-&gt; meow in Refine Module</code></pre><p>要呼叫<code>using IAmRefineModule</code>後，我們定義的 refine Module，那麼 Class 方法才會被覆寫到原有的 class。</p><h3 id="Method-Lookup"><a href="#Method-Lookup" class="headerlink" title="Method Lookup"></a>Method Lookup</h3><p>接下來我們來跟 Module 的 Prepend 來比較看看，看看 refine 定義的方法，是否會優先於 prepend module 所引入的方法。</p><pre><code class="rb">module IAmModuleInclude  def meow    puts &quot;Module include Meow&quot;  endendmodule IAmModulePrepend  def meow    puts &quot;Module prepend Meow&quot;  endendclass Cat  prepend IAmModulePrepend  # include IAmModuleInclude  def meow    puts &quot;Meow&quot;  endendmodule IAmRefineModule  refine Cat do    def meow      puts &quot;meow in Refine Module&quot;    end  endendc = Cat.newc.meowusing IAmRefineModulec = Cat.newc.meow</code></pre><p>來執行看看</p><pre><code class="rb">$ ruby refine_prepend_compare.rb-&gt; Module prepend Meow-&gt; meow in Refine Module</code></pre><p>我們發現，即使 prepend Module 之後，只要我們使用 refine，就會優先使用 refine 所定義的方法。<br>實際上使用 refine 的時候，因為語意上非常明顯，作為 open class 的選擇我覺得是很棒的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Metaprogramming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 筆記</title>
      <link href="/2016/09/11/old%20posts/2016-09-11-Elastic%20Search%20Note/"/>
      <url>/2016/09/11/old%20posts/2016-09-11-Elastic%20Search%20Note/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近工作上使用的資料庫主要以 Elasticsearch 為主。而 Elasticsearch 跟傳統的關聯式資料庫有諸多的不同之處。初期在開發的時候並不是那麼快的上手。所以記錄下該如何使用 Elasticsearch 與如何在官方文件中找到自己需要的功能。</p><h2 id="1-準備工作"><a href="#1-準備工作" class="headerlink" title="1. 準備工作"></a>1. 準備工作</h2><h3 id="1-1-你需要知道的名詞"><a href="#1-1-你需要知道的名詞" class="headerlink" title="1.1 你需要知道的名詞"></a>1.1 你需要知道的名詞</h3><p>一開始我對名詞的對應並不是特別的重視，隨著實戰上的需求，我開始需要查找 API 的時候，發現文件有點不知道從何看起。後來隨著使用的功能越來越多。必須對 Elasticsearch 有更深一層的了解，於是花了大約兩天左右的時間把文件重要的部份大略的看過一次。這樣的過程讓我理解了哪些功能可以在哪些地方找到，也是我寫下這篇筆記的動機，</p><p><code>index</code> 對應關聯式資料庫中的 <code>database</code>。<br><code>type</code> 對應關聯式資料庫中的 <code>table</code>。<br><code>docuement</code> 對應的是關聯式資料庫中的一筆資料。<br><code>mapping</code> 對應關聯式資料庫中的 <code>schema</code>。</p><h3 id="1-2-文件導覽"><a href="#1-2-文件導覽" class="headerlink" title="1.2 文件導覽"></a>1.2 文件導覽</h3><p>常用的文件分為兩部分 <code>definitive guide</code> 與 <code>referenece</code> 。為了直接對應官方文件這邊就直接用英文名詞。</p><p>基本的資料操作和一些基本的用法可以在 <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/getting-started.html">The Definitive Guide</a> 中找到，Definitive Guide 整體比較偏向 <code>如何達成你要做的事情</code>。包括以下幾種：</p><ul><li>文件的新增刪除</li><li>如何做全文搜索</li><li>如何搜尋</li></ul><p>而 API 的詳細分類和用法的範例則可以在 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/index.html">Elasticsearch Reference</a> 中找到。比較常用的有：</p><ul><li>Document API - 單筆資料的操作在這邊查找</li><li>Search API - Elasticsearch 支援的搜尋方法非常多種，Search API 是非常重要的一環。了解 search api 後可以搭配 <code>update_by_query</code> 或 <code>delete_by_query</code> 等等的 api 來做更新或刪除的動作</li><li>Cat API - 可以獲得系統目前的資訊</li><li>Indice API - 用來管理 <code>index</code> 的 api。這邊我一開始看到疑惑了一下。過了一會兒才聯想到 elasticsearch 的 index 等於關聯式資料庫的 db。所以其實每個 api 開的名稱都是很有條理和整齊度的</li><li>Aggregations - aggregation 對應關聯式資料庫的 <code>GROUP</code>，做分組後取得結果。</li><li>Query DSL - 如果需要自定義搜尋，elasticsearch 有提供query DSL 讓你可以高度彈性的組出想要的搜尋。</li></ul><p>另外 Elasticsearch Ruby 的 API 位置在<a href="http://www.rubydoc.info/gems/elasticsearch-api/Elasticsearch/API/Actions">這邊</a>。因為文件的連結沒有在官方 github 中明顯的寫出來，一開始讓我疑惑了一下。</p><h3 id="1-3-可以用哪些方法存取-Elasticsearch"><a href="#1-3-可以用哪些方法存取-Elasticsearch" class="headerlink" title="1.3 可以用哪些方法存取 Elasticsearch"></a>1.3 可以用哪些方法存取 Elasticsearch</h3><p>跟 Elasticsearch 的溝通只要透過 HTTP Request 就可以存取。這也是雖然 Elasticsearch 是以 Java 作為底層，但是卻可以跟大多數其他程式語言製作系統輕鬆串接重要原因。所以操作上只要你可以發出 HTTP Request 就可以跟 Elasticsearch 溝通。而因為安全性的關係，Elasticsearch 常常架設在內網。需要在遠端存取的時候透過VPN 會是比較安全的作法。</p><p>我比較常用的方法有以下幾種：</p><ol><li>直接在終端機下使用 curl 取得結果，指令由官網複製下來修改成自己的格式。好處是這樣做可以排除很多不確定因素，例如gem是否有bug等等的問題。壞處是取得的結果並不好看。如果要好看的話需要自行處理。</li><li>使用 Restclient 將 curl 指令包起來發 HTTP Reqeust 給 Elasticsearch。跟 Elasticsearch-ruby 比較起來，這是單純的 HTTP Request，比較不容易有 Gem 中的 Bug。如果在終端機中確定指令可用，可以直接用 Restclient打造。直接使用<code>system call</code>也是這邊的替代方案之一。</li><li>使用外掛(plugin)存取，好處是方便存取，看到的結果也會是整理過的。缺點是要架設需要花一段時間先把環境整理好。</li><li>使用 <a href="http://www.rubydoc.info/gems/elasticsearch-api/Elasticsearch/API/Actions">Elasticsearch-ruby</a>存取 Elasticsearch 。好處是搜尋出來的結果已經經過包裝。缺點是需要大量新增或更新資料的時候因為過度包裝速度會比較慢。一開始使用的時候會擔心有些API不是官方的最新版本。實際測試的心得是大部分都是可行的。如果得不到預期的結果再使用 curl 來下原始的指令。到這邊可以發現，你需要對 elasticsearch的行為有一定的認識，不然你是無法好好的使用他。</li></ol><h2 id="2-mapping"><a href="#2-mapping" class="headerlink" title="2. mapping"></a>2. mapping</h2><h3 id="2-1-Schema-Free-更要嚴謹的定義資料庫"><a href="#2-1-Schema-Free-更要嚴謹的定義資料庫" class="headerlink" title="2.1 Schema Free 更要嚴謹的定義資料庫"></a>2.1 Schema Free 更要嚴謹的定義資料庫</h3><p><code>mapping</code> 即關聯式資料庫中的 <code>schema</code>。但是 Elasticsearch 有著 <code>schema free</code> 的特性。即如果你想存入的欄位的型別與 <code>mapping</code>的型別不同時你仍然可以存入。還未定義過的欄位也可以直接存入資料庫。</p><p>有著 <code>schema free</code> 的特性更需要注重資料的格式與資料欄位的設計，如果不當的使用很可能讓資料庫中資料變成一堆難以整理的垃圾。</p><h3 id="2-2-特別需要注意的-String-型態"><a href="#2-2-特別需要注意的-String-型態" class="headerlink" title="2.2 特別需要注意的 String 型態"></a>2.2 特別需要注意的 String 型態</h3><p>Elasticsearch 的 String 比較特別。如果不做特別設定的話，Elasticsearch 會預設處理方式為 <code>full text</code>，也就是會幫你的 string 做切字的動作。如果要把整個 string 欄位視為一個 <code>keyword</code> ，則需要在 mapping 的時候加上 <code>index: &quot;not_analyzed&quot;</code>。</p><pre><code class="json">PUT my_index&#123;  &quot;mappings&quot;: &#123;    &quot;my_type&quot;: &#123;      &quot;properties&quot;: &#123;        &quot;full_name&quot;: &#123;          &quot;type&quot;:  &quot;string&quot;        &#125;,        &quot;status&quot;: &#123;          &quot;type&quot;:  &quot;string&quot;,          &quot;index&quot;: &quot;not_analyzed&quot;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><p>相關連結:</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/string.html">String datatype - Elasticsearch Reference [2.4] - Elastic</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-types.html">Field datatypes - Elasticsearch Reference [2.4] - Elastic</a></p><h3 id="2-3-keyword-、-full-text-與-analyzer"><a href="#2-3-keyword-、-full-text-與-analyzer" class="headerlink" title="2.3 keyword 、 full text 與 analyzer"></a>2.3 keyword 、 full text 與 analyzer</h3><p><code>keyword</code>的行為跟關聯式資料庫的欄位行為比較像。除了用字串比對的方式以外沒什麼其他的搜尋方法。而<code>full text</code> 則會通過 <code>analyzer</code> 進行分析，你可以使用系統提供的 <code>analyzer</code>。系統提供的 analyzer 只能切英文字。如果要切中文可以用一套叫做 <code>elasticsearch-analysis-ik</code>的開源解決方案來處理。或是自行撰寫也是一個選項。</p><h3 id="2-4-查詢-mapping-的語法"><a href="#2-4-查詢-mapping-的語法" class="headerlink" title="2.4 查詢 mapping 的語法"></a>2.4 查詢 mapping 的語法</h3><p>在終端機中使用 curl</p><pre><code>curl -XGET &#39;http://localhost:9200/spider/_mapping/tkecw&#39;</code></pre><p>使用<code>RestClient</code></p><pre><code class="rb">res = RestClient.get &quot;http://localhost:9200/spider/_mapping/tkecw&quot;JSON.parse res.body</code></pre><p>相關連結：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">Get Field Mapping - Elasticsearch Reference [2.4] - Elastic</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/getting-started.html">Getting Started - Elasticsearch: The Definitive Guide [2.x] - Elastic</a><br><a href="http://www.rubydoc.info/gems/elasticsearch-api/Elasticsearch/API/Actions">Module: Elasticsearch::API::Actions — Documentation for elasticsearch-api (2.0.0)</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-types.html">Field datatypes - Elasticsearch Reference [2.4] - Elastic</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby metaprogramming - Method Lookup</title>
      <link href="/2016/09/10/old%20posts/2016-09-10-ruby-metaprogramming-method-lookup/"/>
      <url>/2016/09/10/old%20posts/2016-09-10-ruby-metaprogramming-method-lookup/</url>
      
        <content type="html"><![CDATA[<h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>ruby metaprogramming 這本書除了教如何用 ruby 來生成其他的程式語言外，對語言特性的描述是比較深入的。因此在研讀這本書的同時，記錄下一些我覺得重要的部份。這些筆記不會依照章節的順序性。而是隨機記錄我需要的部分。</p><p>Method Lookup 即 Ruby 物件中查找方法的順序。從 Module 得到的方法與從 Class 繼承的方法其實是有順序性的。<br>知道其順序性後我們在編寫的程式碼的時候才可以比較清楚的預想程式行為的發生的情況。在追蹤原始碼的時候對語言特性多一份的理解追起來就會順利一點快速一點。</p><h3 id="prepend-與-include"><a href="#prepend-與-include" class="headerlink" title="prepend 與 include"></a>prepend 與 include</h3><p>這邊是 Method Lookup 的順序圖，左邊是 instance method 右邊是 class method。使用 include 的時候可以發現，如果 class 中原本就有方法，那 include 進來優先權還是無法比 class 原有的方法高。但是如果使用 prepend ，則可以取代。我們用個小例子來證實這點。</p><p><img src="https://lh3.googleusercontent.com/-CgYcBgfLE3M/V9ULwiOLqHI/AAAAAAAAKeU/x8xowPvc7k8/I/14735377495263.jpg"></p><p>ex1 - 使用 <code>include</code> 引入方法</p><pre><code class="rb">module IAmModule  def meow    puts &quot;Module Meow&quot;  endendclass Cat  include IAmModule  def meow    puts &quot;Meow&quot;  endendc = Cat.newc.meow</code></pre><p>執行結果：</p><pre><code>$ ruby ex1.rb-&gt; Meow</code></pre><p>ex2 - 使用 <code>prepend</code> 引入方法</p><pre><code class="rb">module IAmModule  def meow    puts &quot;Module Meow&quot;  endendclass Cat  prepend IAmModule  def meow    puts &quot;Meow&quot;  endendc = Cat.newc.meow</code></pre><pre><code>$ ruby ex2.rb-&gt; Module Meow</code></pre><p>我們可以使用 <code>ancestor</code> 方法來看看優先順序：</p><p>ex1</p><pre><code>[ Cat, IAmModule, Object, Kernel ,BasicObject ]</code></pre><p>ex2</p><pre><code>[IAmModule, Cat, Object, Kernel, BasicObject]</code></pre><p>ex1 使用 include 所以 Module 在 Class 之後，會優先呼叫 Class 的方法。<br>ex2 使用 prepend ， Module 引入的順序在 Class 之前，因此會優先執行 Module 的方法。</p><p>相關的還有與 refine 的比較，不過我想要把 refine 整理在 open class 獨立成一篇。敬請期待~</p><h3 id="參考資料-amp-圖片來源"><a href="#參考資料-amp-圖片來源" class="headerlink" title="參考資料 &amp; 圖片來源"></a>參考資料 &amp; 圖片來源</h3><p><a href="https://www.sitepoint.com/get-the-low-down-on-ruby-modules/">Get the Lowdown on Ruby Modules</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Metaprogramming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby - 爬網頁時遇到的編碼錯亂問題</title>
      <link href="/2016/09/10/old%20posts/2016-09-10-ruby-crawler-encoding-problem/"/>
      <url>/2016/09/10/old%20posts/2016-09-10-ruby-crawler-encoding-problem/</url>
      
        <content type="html"><![CDATA[<h3 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h3><p>編碼問題是寫爬蟲常會遇到的問題。當你沒有處理好編碼問題，爬回來的網頁無法進行字串的切割，也無法使用 nokogiri 抽離需要的部份。</p><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><ol><li>找到原始網頁的編碼<code>chartset=&#39;big&#39;</code></li><li>把網頁 force_encoding 至原始格式</li><li>將網頁轉換成 utf-8，這是 ruby 預設的編碼，也是 nokogiri 接受的編碼。</li></ol><p><code>force_encoding</code> 的意思是強制使用某種編碼格式，但是其實不會進行編碼的轉換，因為ruby預設是utf-8，<br>所以如果網頁是 big5 我們就得先幫網頁加上網頁原有的編碼格式。</p><p>設定好網頁原始的編碼之後，我們才可以將載下來的網頁轉成我們要的格式，所以最後得使用<code>encode</code>指令來轉換成我們要的utf-8格式。</p><p>完成以上步驟之後，你就可以順利的進行字串的處理了:)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby - 利用 ARGV 特性執行指定的方法</title>
      <link href="/2016/08/26/old%20posts/2016-08-26-using-the-argv-characteristic-method-to-excute-specific-method/"/>
      <url>/2016/08/26/old%20posts/2016-08-26-using-the-argv-characteristic-method-to-excute-specific-method/</url>
      
        <content type="html"><![CDATA[<h3 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h3><p>我想手動執行 class 的某個方法。這邊的例子是當我想移動的時候，我可以選擇走路、跑步或是游泳。</p><h3 id="方法一：-在-irb-中引入-Ruby-檔"><a href="#方法一：-在-irb-中引入-Ruby-檔" class="headerlink" title="方法一： 在 irb 中引入 Ruby 檔"></a>方法一： 在 irb 中引入 Ruby 檔</h3><pre><code class="rb">class Move  def self.walking    puts &quot;walking&quot;  end  def self.running    puts &quot;running&quot;  end  def self.swimming    puts &quot;swimming&quot;  endend</code></pre><p>打開 irb ，輸入 <code>require_relative argv_ex1.rb</code>，argv_ex1.rb 是上面程式碼的檔名。</p><pre><code class="rb">[1] pry(main)&gt; require_relative &#39;argv_ex1.rb&#39;=&gt; true[2] pry(main)&gt; Move.swimmingswimming=&gt; nil</code></pre><p>用這樣的方式我們可以執行 Class 中的某個方法，不過還是麻煩了點。現在我們來試試透過 ARGV 來執行 Move 中的方法。</p><h3 id="方法二：使用-ARGV-執行指定的-method"><a href="#方法二：使用-ARGV-執行指定的-method" class="headerlink" title="方法二：使用 ARGV 執行指定的 method"></a>方法二：使用 ARGV 執行指定的 method</h3><h4 id="2-1-簡單介紹-ARGV"><a href="#2-1-簡單介紹-ARGV" class="headerlink" title="2.1 簡單介紹 ARGV"></a>2.1 簡單介紹 ARGV</h4><p>當你在 Command line 模式中輸入除了原本檔名以外的參數，會自動被儲存成一個 ARGV 陣列。</p><pre><code class="rb">argv = ARGVputs &quot;ARGV Type is: &quot; + argv.class.to_sputs &quot;array elements are: &quot;puts argv</code></pre><p>打開 Terminal 輸入<code>ruby argv_ex1.rb cat dog rabbit snake</code>，會得到：</p><pre><code>ARGV Type is:Arrayarray elements are:catdograbbitsnake</code></pre><p>簡單的說參數的第一個會對應 ARGV[0]，第二個會對應 ARGV[1]，運用這個特性我們可以依照需求來決定要執行的方法或內容。</p><h4 id="2-2-應用到例子"><a href="#2-2-應用到例子" class="headerlink" title="2.2 應用到例子"></a>2.2 應用到例子</h4><pre><code class="rb">class TryARGV  def self.execute( command )    if command.to_sym == :walk      self.walking    elsif command.to_sym == :swim      self.swimming    else      puts &quot;swim or walk?&quot;    end  end  def self.walking    puts &quot;walking&quot;  end  def self.running    puts &quot;running&quot;  end  def self.swimming    puts &quot;swimming&quot;  endendTryARGV.execute( ARGV[0] )</code></pre><p>現在我們只要在 terminal 中輸入 <code>swim</code> 或是 <code>walk</code> 即會呼叫對應的方法。</p><pre><code>$ argv_practice ruby argv.rb swimswimming$ argv_practice ruby argv.rb walkwalking</code></pre><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>可以用來呼叫類別方法的還有 rake 也可以達到相同效果。不過如果要使用的話還需要另外設定 <code>.rake</code> 檔。ARGV 的方式在輕量使用的時候是個不錯的選擇。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby 爬蟲小技巧 - 處理 Html Entity</title>
      <link href="/2016/08/12/old%20posts/2016-08-12-a-ruby-tip-html-entity-encode/"/>
      <url>/2016/08/12/old%20posts/2016-08-12-a-ruby-tip-html-entity-encode/</url>
      
        <content type="html"><![CDATA[<p>這是一個在工作上遇到的小問題。<br>把網頁爬回來的時候有 HTML Entity 的編碼，看起來很不美觀。<br>舉例來說，爬回來的標題如果含有 HTML Entity 會是這個樣子:</p><pre><code>PURUS空氣清淨器&amp;#40;鴻海集團創星出品&amp;#41;</code></pre><p>如果我想要使用資料建立自己資料庫的時候勢必要對 html entity 做一些處理<br>這時候 Gem<code>htmlentities</code>就派上用場了。使用方法：</p><pre><code class="rb">require &#39;htmlentities&#39;str = &quot;PURUS空氣清淨器&amp;#40;鴻海集團創星出品&amp;#41;&quot;puts HTMLEntities.new.decode(str)=&gt; PURUS空氣清淨器(鴻海集團創星出品)</code></pre><p>現在你可以把品名存進資料庫了 :D<br>其實這篇只是想記錄一下，HTML Entity這個名詞。歸類到編碼的類別方便以後查找。</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><p><a href="http://htmlentities.rubyforge.org/">htmlentities.rubyforge.org</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveRecord - 更新大量資料</title>
      <link href="/2016/08/03/old%20posts/2016-08-03-active-record-batch-update/"/>
      <url>/2016/08/03/old%20posts/2016-08-03-active-record-batch-update/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文使用的兩種方法，實際上都是用一個 sql 插入或更新所有的資料。<br>原因是使用其他的方法都沒有使用一個sql插入快。<br>如果插入的筆數過多，需要調整 sql buffer 的大小。<br>本例子的情景是一次更新100筆資料，資料量不大，所以不會遇到這個問題。</p><h3 id="方法一：純-SQL"><a href="#方法一：純-SQL" class="headerlink" title="方法一：純 SQL"></a>方法一：純 SQL</h3><ol><li>因為欄位很多，我要傳送的欄位又是完整的一個不少，所以我用 <code>Model.attribute_names</code> 來組合要傳入的欄位名稱。</li><li>然後將要更新的 Hash 組成 <code>VALUES (x1, y1, z1, ...), (x2, y2, z2, ...), ...</code>字串</li><li>最後將要更新的欄位組成 <code>flag_string=VALUES(flag_string)</code> 這種格式</li></ol><p>想要組出的 sql</p><pre><code class="rb">    ActiveRecord::Base.connection.execute(&quot;      INSERT INTO linkouts (#&#123;linkouts_attr_names_string&#125;)        VALUES #&#123;query_string&#125;        ON DUPLICATE KEY UPDATE #&#123;equal_val_string&#125;    &quot;)</code></pre><p>組出來的結果</p><p>query string 這邊比較難處理，因為是 raw sql，如果在 integer 型態的欄位塞入 <code>&#39;&#39;</code>，或是在字串的欄位沒有用引號括起來都會噴錯。這也是使用 raw sql 撰寫的缺點。</p><pre><code class="terminal">[1] pry(#&lt;MastersController&gt;)&gt; linkouts_attr_names_string=&gt; &quot;id,kind,report_id,keyword_id,ezpd_id,url,name,price,full_match,created_at,updated_at,merchant_price,price_check,status,merchant_id,remark,out_of_stock,flag_at,flag_string,remark_status&quot;[2] pry(#&lt;MastersController&gt;)&gt; query_string=&gt; &quot;(22442,&#39;0&#39;,8,126,&#39;https://www.etungo.com.tw/inside/413/419/608/20711.html&#39;,&#39;【CLENSURE可蘭秀】美容離子導入儀 (SNOWY)&#39;,1580,1/1,&#39;2016-08-01 17:31:20&#39;,&#39;2016-08-01 18:01:52&#39;,2)&quot;[3] pry(#&lt;MastersController&gt;)&gt; equal_val_string=&gt; &quot;kind=VALUES(kind),report_id=VALUES(report_id),keyword_id=VALUES(keyword_id),ezpd_id=VALUES(ezpd_id),url=VALUES(url),name=VALUES(name),price=VALUES(price),full_match=VALUES(full_match),created_at=VALUES(created_at),updated_at=VALUES(updated_at),merchant_price=VALUES(merchant_price),price_check=VALUES(price_check),status=VALUES(status),merchant_id=VALUES(merchant_id),remark=VALUES(remark),out_of_stock=VALUES(out_of_stock),flag_at=VALUES(flag_at),flag_string=VALUES(flag_string),remark_status=VALUES(remark_status)&quot;</code></pre><p>完整程式碼：</p><pre><code class="rb">linkouts_attr_names = Linkout.attribute_names    linkouts_attr_names_string = linkouts_attr_names.join(&quot;,&quot;)    string_arr = []    bm[:linkout_list].each_with_index do |l, i|      l[&quot;status&quot;] = 2      l[&quot;flag_string&quot;] = nil      l[&quot;flag_at&quot;] = nil      if i == 0 # 這邊只拿出一組來組合sql，以免sql太亂難除錯        current_arr = []        l.each_pair do |k, v|          if k == &quot;created_at&quot; || k == &quot;updated_at&quot;            current_arr &lt;&lt; + &quot;&#39;&quot; + v.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;) + &quot;&#39;&quot;          elsif v.class == &#39;boolean&#39;            &quot;#&#123;v&#125;&quot;          elsif v.to_i &gt; 0            current_arr &lt;&lt; &quot;#&#123;v&#125;&quot;          elsif v != nil            current_arr &lt;&lt; &quot;&#39;#&#123;v&#125;&#39;&quot;          end        end        string_arr &lt;&lt; &quot;(&quot; + current_arr.join(&quot;,&quot;) + &quot;)&quot;      end    end    query_string = string_arr.join(&quot;,&quot;)    linkouts_attr_names.delete(&quot;id&quot;)    equal_val_string = linkouts_attr_names.inject([]) do |result, attr|      result &lt;&lt; &quot;#&#123;attr&#125;=VALUES(#&#123;attr&#125;)&quot;    end    equal_val_string = equal_val_string.join(&quot;,&quot;)    ActiveRecord::Base.connection.execute(&quot;      INSERT INTO linkouts (#&#123;linkouts_attr_names_string&#125;)        VALUES #&#123;query_string&#125;        ON DUPLICATE KEY UPDATE #&#123;equal_val_string&#125;    &quot;)</code></pre><p>這樣組出的 SQL 結果如下</p><pre><code>INSERT INTO linkouts (id,kind,report_id,keyword_id,ezpd_id,url,name,price,full_match,created_at,updated_at,merchant_price,price_check,status,merchant_id,remark,out_of_stock,flag_at,flag_string,remark_status)        VALUES (22442,&#39;0&#39;,8,126,&#39;https://www.etungo.com.tw/inside/413/419/608/20711.html&#39;,&#39;【CLENSURE可蘭秀】美容離子導入儀 (SNOWY)&#39;,1580,1/1,&#39;2016-08-01 17:31:20&#39;,&#39;2016-08-01 18:01:52&#39;,2)        ON DUPLICATE KEY UPDATE kind=VALUES(kind),report_id=VALUES(report_id),keyword_id=VALUES(keyword_id),ezpd_id=VALUES(ezpd_id),url=VALUES(url),name=VALUES(name),price=VALUES(price),full_match=VALUES(full_match),created_at=VALUES(created_at),updated_at=VALUES(updated_at),merchant_price=VALUES(merchant_price),price_check=VALUES(price_check),status=VALUES(status),merchant_id=VALUES(merchant_id),remark=VALUES(remark),out_of_stock=VALUES(out_of_stock),flag_at=VALUES(flag_at),flag_string=VALUES(flag_string),remark_status=VALUES(remark_status)    )</code></pre><h3 id="方法二：使用-AcitveRecord-import"><a href="#方法二：使用-AcitveRecord-import" class="headerlink" title="方法二：使用 AcitveRecord-import"></a>方法二：使用 AcitveRecord-import</h3><p>AcitveRecord Import 是一個專門用來批次新增或是修改資料的 gem。<br>用法很簡單，在原本的 Model 後面加上要新的陣列，並指定要更新的欄位即可。<br>要更新的欄位也支援使用 sql 語句。</p><pre><code class="rb">Model.import array_to_be_update, on_duplicate_key_update: [:title]Model.import [book1, book2], on_duplicate_key_update: &quot;author = values(author)&quot;</code></pre><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>組 Sql 不需要先把資料包成物件，效能會比較好。<br>不過相對來說需要多花一些時間處理資料欄位型態的問題，<br>而本例中的 mysql 因為是一個指令加上要更新的欄位可能很多，<br>所以 debug 的難度比較高。<br>這時候就看取捨了，如果初期趕著功能上線可以先用 activeRecord-import 來寫，<br>當遇到效能需要最佳化的時候再改成純 sql 會是比較好的處理方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> ActiveRecord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux - 如何查詢 OS 版本</title>
      <link href="/2016/07/29/old%20posts/2016-07-29-linux-how-to-check-os/"/>
      <url>/2016/07/29/old%20posts/2016-07-29-linux-how-to-check-os/</url>
      
        <content type="html"><![CDATA[<p>要接手 Server 第一件事情就是要了解 server 的環境啦。<br>這邊要記錄的是如何判別 Linux 系統類別的方式</p><h3 id="1-確認-Kernel-版本"><a href="#1-確認-Kernel-版本" class="headerlink" title="1. 確認 Kernel 版本"></a>1. 確認 Kernel 版本</h3><p>使用 <code>uname -or</code> 可以取得 kernel 的版本</p><pre><code>$ uname -or=&gt; 3.10.0-327.el7.x86_64 GNU/Linux</code></pre><p>如果要知道詳細的資訊，輸入 <code>uname -a</code>，但即使這樣也無法清楚的看出 OS 的種類。</p><pre><code>$ uname -a=&gt; Linux username 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</code></pre><h3 id="2-針對不同-OS-查找對應的說明系統名稱的文件"><a href="#2-針對不同-OS-查找對應的說明系統名稱的文件" class="headerlink" title="2. 針對不同 OS 查找對應的說明系統名稱的文件"></a>2. 針對不同 OS 查找對應的說明系統名稱的文件</h3><p>如果是 Ubuntu，輸入 <code>cat /etc/lsb-release</code>。有找到的情況會出現以下訊息</p><pre><code>$ cat /etc/lsb-releaseDISTRIB_ID=UbuntuDISTRIB_RELEASE=14.04DISTRIB_CODENAME=trustyDISTRIB_DESCRIPTION=&quot;Ubuntu 14.04.5 LTS&quot;</code></pre><p>如果你的系統不是 Ubuntu，則會出現以下訊息</p><pre><code>$ cat /etc/lsb-releasecat: /etc/lsb-release: No such file or directory</code></pre><p>Debian</p><p>雖然跟 Ubuntu 同體系但是存放版本號文件的位置不太一樣，<br>輸入<code>cat /etc/debian_version</code></p><pre><code>$  cat /etc/debian_version8.0</code></pre><p>Fedora, Red Hat and CentOS have:</p><pre><code>Fedora: $ cat /etc/fedora-releaseFedora release 10 (Cambridge)Red Hat/older CentOS: $ cat /etc/redhat-releaseCentOS release 5.3 (Final)newer CentOS: $ cat /etc/centos-releaseCentOS Linux release 7.1.1503 (Core)</code></pre><p>最後用表格來整理以上資訊</p><table><thead><tr><th align="center">系統</th><th align="left">位置</th></tr></thead><tbody><tr><td align="center">ubuntu</td><td align="left">/etc/lsb-release</td></tr><tr><td align="center">debian</td><td align="left">/etc/debian_version</td></tr><tr><td align="center">Fadoara</td><td align="left">/etc/fedora-release</td></tr><tr><td align="center">Red Hat/older CentOS</td><td align="left">/etc/redhat-release</td></tr><tr><td align="center">newer CentOS</td><td align="left">/etc/centos-release</td></tr></tbody></table><p>如果你的 OS 上面列表都找不到的話，可以找 etc 資料夾內的有 release 這個詞的</p><pre><code>cat /etc/*&#123;release,version&#125;</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://superuser.com/questions/11008/how-do-i-find-out-what-version-of-linux-im-running">command line - How do I find out what version of Linux I’m running? - Super User</a><br><a href="https://www.rackaid.com/blog/check-your-centos-version-number/">How to Check CentOS Version Number</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails: 使用 Whenever 產生 Cronjob </title>
      <link href="/2016/07/08/old%20posts/2016-07-08-rails-gem-use-whenever-the-schedule-of-daily-routine/"/>
      <url>/2016/07/08/old%20posts/2016-07-08-rails-gem-use-whenever-the-schedule-of-daily-routine/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-Crontab-介紹"><a href="#Part-1-Crontab-介紹" class="headerlink" title="Part 1 - Crontab 介紹"></a>Part 1 - Crontab 介紹</h3><p>Crontab 是 Linux 中用來管理例行事務的程式，而 whenever 實際上的作用就是用來產生 cronjob 的，所以先介紹一下 Linux 系統中的 crontab 如何操作。</p><h3 id="crontab-指令"><a href="#crontab-指令" class="headerlink" title="crontab 指令"></a>crontab 指令</h3><p>比較常用指令的有以下幾項：</p><p><code>crontab -l</code> 顯示目前排程 (list cron)<br><code>crontab -e</code> 編輯排程 (edit cron)<br><code>crontab -r</code> 移除排程 (remove cron)<br><code>crontab -u</code> 改變排程的執行身分: crontab -u user filename</p><h3 id="crontab-的欄位與對應的意義"><a href="#crontab-的欄位與對應的意義" class="headerlink" title="crontab 的欄位與對應的意義"></a>crontab 的欄位與對應的意義</h3><p>整個指令會長得像樣子，這個指令做的事情是先移動到某個資料夾後執行<code>User.delete_three_day_ago!</code>。</p><pre><code>0 4 * * * /bin/bash -l -c &#39;cd /Users/oceanttd/rails_whenerver &amp;&amp; bundle exec bin/rails runner -e development &#39;\&#39;&#39;Users.delete_three_day_ago!&#39;\&#39;&#39;&#39;</code></pre><p>第一到六項分別是：</p><ol><li>分鐘 1～59</li><li>小時 0～23</li><li>日 1～31</li><li>月 1～12</li><li>0～6（0表示星期天）</li><li>要運行的命令</li></ol><p>需要注意的是<code>6</code>要運行的命令必須輸入<code>絕對路徑</code>，輸入相對路徑是沒有任何效果的。</p><h4 id="使用-crontab-產生器產生-cronjob"><a href="#使用-crontab-產生器產生-cronjob" class="headerlink" title="使用 crontab 產生器產生 cronjob"></a>使用 crontab 產生器產生 cronjob</h4><p>看完上面規則後一定覺得很難撰寫，不直覺。來推薦一個網站 <a href="http://crontab.guru/">crontab.guru - the cron schedule expression editor</a>輸入 cronjob 後可以立即顯示正確時間。</p><h3 id="Part-2-使用-Whenver-產生-cronjob"><a href="#Part-2-使用-Whenver-產生-cronjob" class="headerlink" title="Part 2 - 使用 Whenver 產生 cronjob"></a>Part 2 - 使用 Whenver 產生 cronjob</h3><p>Whenever 是一個 Ruby 的 Gem，沒錯，你不在 Rails 環境下也可以使用。他的功能是讓 cronjob 變得很好撰寫。</p><h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><p>在 Gemfile 中加入<code>whenever</code></p><p>或是輸入<code>gem install whenever</code></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>移動到 Rails 資料夾輸入  <code>wheneverize .</code>，會幫你建立<code>config/schedule.rb</code>，如果你要建在非 Rails 的資料夾，可能需要自己創一個 config 資料夾來避免發生錯誤。</p><h4 id="把-whenever-中的內內容轉為-crontab"><a href="#把-whenever-中的內內容轉為-crontab" class="headerlink" title="把 whenever 中的內內容轉為 crontab"></a>把 whenever 中的內內容轉為 crontab</h4><p>後面可以指定環境</p><pre><code>whenever --update-crontab --set environment=development</code></pre><p>接著用<code>crontab -l</code>指令就可以查看創建的 cronjobs。</p><h4 id="來看看-whenever-怎麼撰寫"><a href="#來看看-whenever-怎麼撰寫" class="headerlink" title="來看看 whenever 怎麼撰寫"></a>來看看 whenever 怎麼撰寫</h4><p>原本難以閱讀的 crontab 與 cronjob，變得很容易閱讀，很且可以跟 rake 或是 ActiveRecord 一起作用。這邊在 Rails 環境下為例。他的原理就是先幫你 cd 到 Rails 資料夾後，再執行 Rake 指令，或是執行 model 的方法。</p><p>rake 就直接用 <code>rake</code> 指令執行就好</p><pre><code class="rb"># run this task only on servers with the :app role in Capistrano# see Capistrano roles section belowevery :day, :at =&gt; &#39;12:20am&#39;, :roles =&gt; [:app] do  rake &quot;app_server:task&quot;end</code></pre><pre><code class="rb">every 3.hours do  runner &quot;MyModel.some_process&quot;  rake &quot;my:rake:task&quot;  command &quot;/usr/bin/my_great_command&quot;end</code></pre><p>如果是執行 model 方法要用 <code>runner</code></p><pre><code class="rb">every 1.day, :at =&gt; &#39;4:30 am&#39; do  runner &quot;MyModel.task_to_run_at_four_thirty_in_the_morning&quot;endevery :hour do # Many shortcuts available: :hour, :day, :month, :year, :reboot  runner &quot;SomeModel.ladeeda&quot;endevery :sunday, :at =&gt; &#39;12pm&#39; do # Use any day of the week or :weekend, :weekday  runner &quot;Task.do_something_great&quot;end</code></pre><p>call system</p><pre><code class="rb">every &#39;0 0 27-31 * *&#39; do  command &quot;echo &#39;you can use raw cron syntax too&#39;&quot;end</code></pre><p>如此一來 cronjob 是不是變得很好寫了呢:D</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/javan/whenever">javan/whenever: Cron jobs in Ruby</a><br><a href="http://www.cyberciti.biz/faq/where-is-the-crontab-file/">Linux / UNIX Crontab File Location</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> Cronjob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generate Safety Query String In ActiveRecord </title>
      <link href="/2016/07/07/old%20posts/2016-07-07-security-of-raw-sql-in-ruby/"/>
      <url>/2016/07/07/old%20posts/2016-07-07-security-of-raw-sql-in-ruby/</url>
      
        <content type="html"><![CDATA[<h2 id="Solution-1-sanitize-sql"><a href="#Solution-1-sanitize-sql" class="headerlink" title="Solution 1: sanitize_sql"></a>Solution 1: sanitize_sql</h2><pre><code class="rb">ActiveRecord::Base.send(:sanitize_sql,[&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;,&quot;mal&#39;formed&quot;, 55], &quot;my_table&quot;)=&gt; &quot;select * from my_table where description=&#39;mal\\&#39;formed&#39; and id=&#39;55&#39;&quot;</code></pre><p>Can also use instance method to do the same thing</p><pre><code class="rb">MyTable.send(:sanitize_sql,[&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;,&quot;mal&#39;formed&quot;, 55])=&gt; &quot;select * from my_table where description=&#39;mal\\&#39;formed&#39; and id=&#39;55&#39;</code></pre><h2 id="Solution-2-ActiveRecord-Base-connection-quote"><a href="#Solution-2-ActiveRecord-Base-connection-quote" class="headerlink" title="Solution 2: ActiveRecord::Base.connection.quote"></a>Solution 2: ActiveRecord::Base.connection.quote</h2><p>ActiveRecord::Base.connection.quote only escape quotes of query. So… it’s not a good solution.</p><pre><code class="rb">[17] pry(main)&gt; ActiveRecord::Base.connection.quote([&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;,&quot;mal&#39;formed&quot;, 55])=&gt; &quot;&#39;---\\n- select * from my_table where description=\\&#39;%s\\&#39; and id=\\&#39;%s\\&#39;\\n- mal\\&#39;formed\\n- 55\\n&#39;&quot;</code></pre><pre><code class="rb">[20] pry(main)&gt; ActiveRecord::Base.connection.quote(&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;)=&gt; &quot;&#39;select * from my_table where description=\\&#39;%s\\&#39; and id=\\&#39;%s\\&#39;&#39;&quot;</code></pre><h2 id="Solution-3-sanitize-sql-array"><a href="#Solution-3-sanitize-sql-array" class="headerlink" title="Solution 3: sanitize_sql_array"></a>Solution 3: sanitize_sql_array</h2><p>When you using sanitize_sql_array, the output will the same as when you using sanitize_sql.<br>But your dont need to send useless table name in third parameter anymore.</p><pre><code class="rb">[24] pry(main)&gt; ActiveRecord::Base.send(:sanitize_sql_array, [&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;,&quot;mal&#39;formed&quot;, 55])=&gt; &quot;select * from my_table where description=&#39;mal\\&#39;formed&#39; and id=&#39;55&#39;&quot;</code></pre><p>If we call sanitize_sql_array not through send, you’ll get error message <code>protected method</code>sanitize_sql_array’ called for ActiveRecord::Base:Class`, So we have to use send to avoid this situation.</p><pre><code class="rb">[25] pry(main)&gt; ActiveRecord::Base.sanitize_sql_array( [&quot;select * from my_table where description=&#39;%s&#39; and id=&#39;%s&#39;&quot;,&quot;mal&#39;formed&quot;, 55])NoMethodError: protected method `sanitize_sql_array&#39; called for ActiveRecord::Base:Classfrom /Users/Steven/.rvm/gems/ruby-2.2.2/gems/activerecord-4.2.6/lib/active_record/dynamic_matchers.rb:26:in `method_missing&#39;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> ActiveRecord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Atom 設定 .god 對應至 Ruby Syntax </title>
      <link href="/2016/06/27/old%20posts/2016-06-27-in-the-atom-set-god-corresponds-to-ruby-syntax/"/>
      <url>/2016/06/27/old%20posts/2016-06-27-in-the-atom-set-god-corresponds-to-ruby-syntax/</url>
      
        <content type="html"><![CDATA[<h2 id="簡介-God"><a href="#簡介-God" class="headerlink" title="簡介 God"></a>簡介 God</h2><p>God 是以 Ruby 撰寫而成，但不僅限於使用於執行 Ruby 檔，常見的用途是維持程式的運行使程式不中斷，萬一中斷可以自動重啟。不過本篇的重點不在於 God 的使用方法，而是在 Atom 編輯器中於如何讓<code>.god</code>可以對應到 <code>.rb</code> 的語法高亮。</p><p>這邊就是設定的方法，打開 config.cson，可以經由 menu 列的 Atom &gt; config 開啟。在 core 的部份加上以下的設定。即可讓 <code>.god</code> 類型的檔案對應至 <code>.rb</code> 的語法高光。</p><pre><code class="cson">&quot;*&quot;:  core:    customFileTypes:      &quot;source.ruby&quot;: [        &quot;god&quot;      ]</code></pre><p>簡單的說明一下設定方法：外層輸入已知的檔案類型，內層輸入自定義的檔案類型，即可完成。</p><pre><code class="cson">&quot;*&quot;:  core:    customFileTypes:      &quot;source.已存在的檔案類型&quot;: [        &quot;自定義檔案類型&quot;      ]</code></pre><p><a href="https://github.com/atom/atom/issues/1718">Make file type -&gt; language mapping locally configurable · Issue #1718 · atom/atom</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Text Editor </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS - 確認 jQuery 是否正確載入</title>
      <link href="/2016/06/15/old%20posts/2016-06-15-js-sure-jquery-is-loaded-correctly/"/>
      <url>/2016/06/15/old%20posts/2016-06-15-js-sure-jquery-is-loaded-correctly/</url>
      
        <content type="html"><![CDATA[<h3 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h3><p>有時候你不能確定環境是否已經載入 jQuery，所以你也不能使用 jQuery.ready()。<br>例如：你想要在別人的網頁上執行一段 javascript 程式碼。<br>這時候你就可以用本篇筆記記錄的方法等待 jQuery 載入後再執行自己的程式碼。</p><p>程式碼：</p><pre><code class="js">//如果沒有載入的話，會再執行一次直到 jQuery 正確載入。function defer(method) &#123;    if (window.jQuery)        method();    else        setTimeout(function() &#123; defer(method) &#125;, 1000);&#125;//要執行內容用 function 包起來，丟進 defer 裡面執行。defer(function () &#123;    alert(&quot;jQuery is now loaded&quot;);&#125;);</code></pre><p>不過這樣如果 jQuery 一直找不到的話就會變成無限迴圈，所以我們加個機制 - 如果重試超過五次，我們就結束程式。</p><pre><code class="js">var i = 0;function defer(method) &#123;    if ( i &gt; 5 ) return ;    if (window.jQuery)        method();    else&#123;        i++;        setTimeout(function() &#123; defer(method) &#125;, 1000);    &#125;&#125;//要執行內容用 function 包起來，丟進 defer 裡面執行。defer(function () &#123;    alert(&quot;jQuery is now loaded&quot;);&#125;);</code></pre><blockquote><p>這邊因為是簡單例子，全域變數就不做處理，一般來說要盡量避免全域變數的使用。</p></blockquote><p><a href="https://www.mkyong.com/jquery/how-to-check-if-jquery-library-is-loaded/">How to check if jQuery library is loaded?</a></p><p><a href="http://stackoverflow.com/questions/7486309/how-to-make-script-execution-wait-until-jquery-is-loaded">javascript - How to make script execution wait until jquery is loaded - Stack Overflow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery vs Ruby - 取得倒數的元素並組成字串</title>
      <link href="/2016/05/31/old%20posts/2016-05-31-jquery-notes-get-last-element/"/>
      <url>/2016/05/31/old%20posts/2016-05-31-jquery-notes-get-last-element/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本篇利用把陣列轉成字串這個題目，探討 jquery 和 ruby 中，map 和 join 行為的差異。</p><h3 id="1-在-jQuery-中可以用類似-Ruby-的方式取得尾部的倒數第幾個元素。"><a href="#1-在-jQuery-中可以用類似-Ruby-的方式取得尾部的倒數第幾個元素。" class="headerlink" title="1. 在 jQuery 中可以用類似 Ruby 的方式取得尾部的倒數第幾個元素。"></a>1. 在 jQuery 中可以用類似 Ruby 的方式取得尾部的倒數第幾個元素。</h3><pre><code class="js">$(&#39;span[itemprop=title]&#39;).eq(-2)</code></pre><p>對照 ruby 語法</p><pre><code class="rb">arr=[1,2,3,4,5,6]arr[-2]=&gt; 5</code></pre><h3 id="2-也可以取出倒數的三個元素"><a href="#2-也可以取出倒數的三個元素" class="headerlink" title="2. 也可以取出倒數的三個元素"></a>2. 也可以取出倒數的三個元素</h3><p>剛剛取出的是倒數的<code>第二個</code>元素，而現在我們要把倒數的三個元素都取出來</p><pre><code class="js">$(&#39;span[itemprop=title]&#39;).slice(-3)</code></pre><p>對照的 ruby 語法</p><pre><code class="rb">arr=[1,2,3,4,5,6]arr[-3..-1]=&gt; [4, 5, 6]</code></pre><h3 id="3-1-取出元素中的text後，存到陣列中"><a href="#3-1-取出元素中的text後，存到陣列中" class="headerlink" title="3.1 取出元素中的text後，存到陣列中"></a>3.1 取出元素中的text後，存到陣列中</h3><p>先把要的字串存到陣列裡面</p><pre><code class="js">arr = [];$(&#39;span[itemprop=title]&#39;).slice(-3).each(function(i,f)&#123;    arr.push( $(f).text())&#125;);</code></pre><h3 id="3-2-反轉陣列內容並用逗號-join"><a href="#3-2-反轉陣列內容並用逗號-join" class="headerlink" title="3.2 反轉陣列內容並用逗號 join"></a>3.2 反轉陣列內容並用逗號 join</h3><p>這邊是純 js 陣列的操作。</p><pre><code class="js">arr.reverse().join(&quot;,&quot;);</code></pre><h3 id="4-另一種方法：使用-map-加上-join"><a href="#4-另一種方法：使用-map-加上-join" class="headerlink" title="4. 另一種方法：使用 map 加上 join"></a>4. 另一種方法：使用 map 加上 join</h3><pre><code class="js">arr = [];$(&#39;span[itemprop=title]&#39;).slice(-3).map(function(i,f)&#123;    return $(f).text();&#125;).get().join(&quot;,&quot;) ;</code></pre><p>跟 Ruby 的 map 有些許不同：</p><ol><li>需要 return 處理過後的值。</li><li>map完的陣列型態會<code>是預設的jquery物件集合而不是Array</code>。需要先使用 get() 取得 return 的值，再進行 join 。</li></ol><p>如果你在 ruby 中使用 return，會出現錯誤。</p><pre><code class="rb">[9] pry(main)&gt; [&quot;1&quot;, &quot;2&quot;, &quot;2&quot;].map&#123;|x| return x.to_i &#125;LocalJumpError: unexpected return</code></pre><p>直接寫出要的結果就沒問題了</p><pre><code class="rb">[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;].map&#123;|x| x.to_i + 1 &#125;=&gt; [2, 3, 3]</code></pre><p>因為輸出的結果是 array，所以直接 join 即得串聯後的字串。</p><pre><code class="rb">[13] pry(main)&gt; [&quot;1&quot;, &quot;2&quot;, &quot;2&quot;].map&#123;|x| x.to_i + 1 &#125;.join(&quot;,&quot;)=&gt; &quot;2,3,3&quot;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 筆記 - 使用 ActiveRecord::Enum 設定狀態</title>
      <link href="/2016/05/01/old%20posts/2016-05-01-rails-activerecord-enum-api/"/>
      <url>/2016/05/01/old%20posts/2016-05-01-rails-activerecord-enum-api/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-Array-表達狀態"><a href="#使用-Array-表達狀態" class="headerlink" title="使用 Array 表達狀態"></a>使用 Array 表達狀態</h2><pre><code class="rb">class Order    KIND = [ [&#39;未付款&#39;, 0], [&#39;已付款&#39;, 1], [&#39;已出貨&#39;,2] ]end</code></pre><p>代表 orders 這張表中的 kind 欄位如果是 1 ，則此訂單狀態是未付款的。<br>寫成這樣的好處是在使用 select view helper 的時候可以直接丟進去</p><pre><code class="erb">&lt;%= select_tag &quot;訂單狀態&quot;, options_for_select( Order::KIND ) %&gt;</code></pre><p>把 KIND 打成這樣是 OK 的，但是我想把它打的好看一點。今天發現了有 ActiveRecord Enum 可以讓他變得有趣點。而且是只要有 ActiveRecord 就可以用，不需要裝其他的 gem。</p><h2 id="ActiveRecord-Enum-介紹"><a href="#ActiveRecord-Enum-介紹" class="headerlink" title="ActiveRecord::Enum 介紹"></a>ActiveRecord::Enum 介紹</h2><p>首先需要宣告對應 DB 裡面的值，第一個就代表對應 0 , 第二個就代表對應 1。</p><pre><code class="rb">class Conversation &lt; ActiveRecord::Base  enum status: [ :active, :archived ]end</code></pre><p>除了可以用文字表示原本是數字的 conversation 的狀態以外，也加了 <code>active!</code> 和 <code>active? </code>這種方便的方法，<code>active!</code>用來改變 conversation 的狀態為 active ，而 <code>active?</code> 則用來辨識 conversation 狀態是否為 active。這樣寫語意上更棒，更好讀。</p><pre><code class="rb"># conversation.update! status: 0conversation.active!conversation.active? # =&gt; trueconversation.status  # =&gt; &quot;active&quot;# conversation.update! status: 1conversation.archived!conversation.archived? # =&gt; trueconversation.status    # =&gt; &quot;archived&quot;</code></pre><p>當然你也可以直接指定值給 <code>conversation.status</code></p><pre><code class="rb"># conversation.status = 1conversation.status = &quot;archived&quot;conversation.status = nilconversation.status.nil? # =&gt; trueconversation.status      # =&gt; nil</code></pre><h2 id="用-Hash-儲存-enum"><a href="#用-Hash-儲存-enum" class="headerlink" title="用 Hash 儲存 enum"></a>用 Hash 儲存 enum</h2><p>宣告成 hash 型態的話，我們可以用 status 的複數型態 statuses 來取得這個 Hash，之後的取值也從 Conversation.active 變成了 Conversation.statuses[:active]，兩個得到的結果是一樣的。不過使用 Hash 時可以明確知道我現在在修改的是 status，屬性一多的時候不會造成混淆。</p><pre><code class="rb">class Conversation &lt; ActiveRecord::Base  enum status: &#123; active: 0, archived: 1 &#125;endConversation.statuses[:active]    # =&gt; 0Conversation.statuses[&quot;archived&quot;] # =&gt; 1</code></pre><h2 id="取得-options-for-select-所需的陣列"><a href="#取得-options-for-select-所需的陣列" class="headerlink" title="取得 options_for_select 所需的陣列"></a>取得 options_for_select 所需的陣列</h2><p>這樣宣告後，使用 status 的複數型態 <code>statuses</code> 可以取得剛剛輸入的陣列</p><pre><code>[5] pry(main)&gt; Conversation.statuses=&gt; &#123;&quot;active&quot;=&gt;0, &quot;archived&quot;=&gt;1&#125;</code></pre><p>OK 現在要的東西很接近我們要的了，再做一點加工。</p><pre><code>[11] pry(main)&gt; Conversation.statuses.invert.to_a=&gt; [[0, &quot;active&quot;], [1, &quot;archived&quot;]]</code></pre><p>done! 現在用 enum 也可以製作 options_for_select 專屬的陣列了。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a><br><a href="https://robots.thoughtbot.com/whats-new-in-edge-rails-active-record-enum">What’s new in edge Rails: Active Record enums</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Redmine to VPS by Rails way in Ubuntu 14.04</title>
      <link href="/2016/02/13/old%20posts/2016-02-13-deploy-redmine-to-vps-by-rails-way-in-ubuntu-14-04/"/>
      <url>/2016/02/13/old%20posts/2016-02-13-deploy-redmine-to-vps-by-rails-way-in-ubuntu-14-04/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redmine 是一套以 Ruby 為基底的專案管理網頁應用程式。而且正好就是使用 Ruby on Rails 開發的。所以如果你是 Rails 工程師，使用一般部屬 Rails 專案的方式就可將 Redmine 架起來。</p><p>本文記錄下來的方法，是我覺得最簡單，並且沒有副作用的架設方法。如果你要架設的不是 Redmine ，而是其他的 Rails 專案，也同樣適用。</p><p>本文採用的環境：<br>OS: Ubuntu 14.04<br>VPS: Digital Ocean</p><h2 id="在-Ubuntu-創造新的使用者"><a href="#在-Ubuntu-創造新的使用者" class="headerlink" title="在 Ubuntu 創造新的使用者"></a>在 Ubuntu 創造新的使用者</h2><p>Linux 是非常嚴謹的系統，不同資料夾放的東西都有其規範。而 root 帳號在 Linux 系統中是超人，可以做任何的事情。為了維持 Linux 系統的乾淨度，我們要建立一個專用的使用者 oceanttd 而不是直接使用 root 帳號來部屬。這樣在有多人要同時使用同一個 Linux 作業系統的時候會減少很多麻煩。</p><p>創造部屬的帳號 <code>oceanttd</code></p><pre><code>sudo adduser oceanttd</code></pre><p>把 oceanttd 帳號加到 sudo 群組<a href="http://askubuntu.com/questions/7477/how-can-i-add-a-new-user-as-sudoer-using-the-command-line">(?)</a></p><pre><code>sudo adduser oceanttd sudo</code></pre><p>切換到 oceanttd 帳號</p><pre><code>su oceanttd</code></pre><h2 id="更新-Ubuntu-apt-get-的套件"><a href="#更新-Ubuntu-apt-get-的套件" class="headerlink" title="更新 Ubuntu apt-get 的套件"></a>更新 Ubuntu apt-get 的套件</h2><pre><code>sudo apt-get update</code></pre><h2 id="安裝-Mysql-或是其他資料庫"><a href="#安裝-Mysql-或是其他資料庫" class="headerlink" title="安裝 Mysql 或是其他資料庫"></a>安裝 Mysql 或是其他資料庫</h2><pre><code>sudo apt-get install mysql-server</code></pre><h2 id="安裝-RVM"><a href="#安裝-RVM" class="headerlink" title="安裝 RVM"></a>安裝 RVM</h2><p>輸入指令安裝 RVM，過程中可能會出現一些錯誤訊息，因為我沒有預先使用 <code>apt-get</code> 安裝需要的套件。不過不要緊，跟著系統會告訴哪些還沒裝好，並且會給你安裝的指令，跟著系統指示很快的就可以完成。</p><pre><code>curl -L https://get.rvm.io | bash</code></pre><p>重新登入 vps，輸入 <code>rvm -v</code> 查看 rvm 是否有裝好。</p><h2 id="在-RVM-中安裝-Ruby"><a href="#在-RVM-中安裝-Ruby" class="headerlink" title="在 RVM 中安裝 Ruby"></a>在 RVM 中安裝 Ruby</h2><pre><code>rvm install 2.2.3</code></pre><p>將 ruby 2.2.3 設定成預設的 Ruby 語言，這個動作很重要一定要做，因為預設的 Ruby 會是 Ubuntu 系統中預裝的版本，換成 RVM 的版本我們才好處理 Gem 之類的安裝問題</p><pre><code>rvm use 2.2.3 --default</code></pre><p>檢查系統中的 ruby 是否使用 rvm 的 ruby</p><p>輸入<code>ruby -v</code>檢查版本<br>輸入<code>which ruby</code> 檢查路徑，路徑裡面有 rvm 的才是正確</p><h2 id="安裝-Rails"><a href="#安裝-Rails" class="headerlink" title="安裝 Rails"></a>安裝 Rails</h2><p>記得加上 <code>--no-ri --no-rdoc</code> ，意思是不要裝文件，因為我們上網查就好了。可以省下很多時間。</p><pre><code>gem install rails --no-ri --no-rdoc</code></pre><h2 id="把-Redmine-專案載下來，"><a href="#把-Redmine-專案載下來，" class="headerlink" title="把 Redmine 專案載下來，"></a>把 Redmine 專案載下來，</h2><p>( 如果你要部屬的是自己的專案，請 git clone 你自己的專案 )</p><p>到 Redmine 官方的<a href="http://www.redmine.org/projects/redmine/wiki/Download">下載頁面</a>下載最新版本或是你想要的版本的 Redmine。我的版本是 3.2.0 有支援 markown。就以 3.2.0 為例好了，如果你想要用別的版本可以自行替換。</p><pre><code>wget http://www.redmine.org/releases/redmine-3.2.0.tar.gz</code></pre><p>解壓縮</p><pre><code>tar xzf redmine-3.2.0.tar.gz</code></pre><p>現在你有一個 Redmine 的 Rails 專案了。</p><h2 id="對-Rails-專案的一些處理"><a href="#對-Rails-專案的一些處理" class="headerlink" title="對 Rails 專案的一些處理"></a>對 Rails 專案的一些處理</h2><p>bundle 一下。可能會有一些 Ubuntu 的套件沒有裝會噴錯誤。不過都還滿簡單的。</p><pre><code>bundle</code></pre><p>缺少 imagemagick 的話可以下下面指令。</p><pre><code>$ sudo apt-get install imagemagick$ sudo apt-get install libmagickwand-dev</code></pre><h3 id="Rails-資料庫處理"><a href="#Rails-資料庫處理" class="headerlink" title="Rails 資料庫處理"></a>Rails 資料庫處理</h3><pre><code>rake db:createrake db:migrate</code></pre><p>建之前要更新一下 <code>config/database.yml</code> 的內容，把 VPS Server 上的 mysql 帳號密碼寫進去。</p><h2 id="安裝-Passenger"><a href="#安裝-Passenger" class="headerlink" title="安裝 Passenger"></a>安裝 Passenger</h2><pre><code>gem install passenger --no-ri --no-rdoc</code></pre><h2 id="使用-Passenger-安裝-nginx"><a href="#使用-Passenger-安裝-nginx" class="headerlink" title="使用 Passenger 安裝 nginx"></a>使用 Passenger 安裝 nginx</h2><pre><code>rvmsudo passenger-install-nginx-module</code></pre><h2 id="安装-Nginx-init-script"><a href="#安装-Nginx-init-script" class="headerlink" title="安装 Nginx init script"></a>安装 Nginx init script</h2><pre><code>$ cd ~/$ git clone git://github.com/jnstq/rails-nginx-passenger-ubuntu.git$ sudo mv rails-nginx-passenger-ubuntu/nginx/nginx /etc/init.d/nginx$ sudo chmod +x /etc/init.d/nginx</code></pre><p>開機自動啟動</p><pre><code>$ sudo update-rc.d nginx defaults</code></pre><p>(內容來自 ruby china 文尾有連結)</p><h2 id="設定-nginx-conf"><a href="#設定-nginx-conf" class="headerlink" title="設定 nginx.conf"></a>設定 nginx.conf</h2><p>打開 nginx.conf</p><pre><code>sudo vim /opt/nginx/conf/nginx.conf</code></pre><pre><code class="conf">user jason; # 修改成你的系统帐号名，不然项目目录 /home/jason/www 这里没有权限worker_processes 8; # 修改成和你 CPU 核数一样pid /var/run/nginx.pid;http &#123;  include       mime.types;  default_type  application/octet-stream;  client_max_body_size 50m;  sendfile        on;  access_log /var/log/nginx/access.log;  error_log /var/log/nginx/error.log;  gzip on;  gzip_disable &quot;msie6&quot;;  ## ------------ 重点修改内容 --------  server &#123;    # 此处用于防止其他的域名绑定到你的网站上面    listen 80 default;    return 403;  &#125;  server &#123;    listen       80;    server_name  you.host.name; # 请替换成你网站的域名    rails_env    production;    root         /home/jason/www/gitlab/public;    passenger_enabled on;    location ~ ^(/assets) &#123;      access_log        off;      # 设置 assets 下面的浏览器缓存时间为最大值（由于 Rails Assets Pipline 的文件名是根据文件修改产生的 MD5 digest 文件名，所以此处可以放心开启）      expires           max;    &#125;  &#125;  ## ---------------------------------&#125;</code></pre><p>重新啟動 Nginx</p><pre><code>sudo /etc/init.d/nginx start</code></pre><h2 id="到-Rails-project-下重啟-nginx"><a href="#到-Rails-project-下重啟-nginx" class="headerlink" title="到 Rails project 下重啟 nginx"></a>到 Rails project 下重啟 nginx</h2><pre><code>touch tmp/restart.txt</code></pre><p>大功告成，現在你應該可以透過你的 server ip，連接到你架設的 Redmine 上了^^</p><h2 id="在過程中可能遇到的錯誤"><a href="#在過程中可能遇到的錯誤" class="headerlink" title="在過程中可能遇到的錯誤"></a>在過程中可能遇到的錯誤</h2><h3 id="Incomplete-response-received-from-application"><a href="#Incomplete-response-received-from-application" class="headerlink" title="Incomplete response received from application"></a>Incomplete response received from application</h3><p>打開瀏覽器看到 <code>Incomplete response received from application</code> 時。這時候我們可以去看看<code>/opt/nginx/logs/error.log</code>。發現有以下訊息：</p><pre><code>*** Exception RuntimeError in Rack application object (Missing `secret_token` and `secret_key_base` for &#39;production&#39; environment, set these values in `config/secrets.yml`) (process 5076, thread 0x007fd841f79d58(Worker 1)):</code></pre><p>這時候我們在 secret.yml 中加入 secret_token 即可。</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p><a href="https://gorails.com/deploy/ubuntu/14.04">Deploy Ruby On Rails on Ubuntu 14.04 Trusty Tahr - GoRails</a></p><p><a href="http://billy3321.blogspot.tw/2013/09/ubuntu-1304-serverruby-on-rails-app.html">雨蒼的終端機: 如何在Ubuntu 13.04 Server上部署Ruby on Rails app</a></p><p><a href="https://ruby-china.org/wiki/install-rails-on-ubuntu-14-04-server">在 Ubuntu 14.04 Server 上安装部署 Ruby on Rails 应用 - Wiki » Ruby China</a></p><p><a href="http://ryanbigg.com/2015/07/deploying-a-rails-application-on-ubuntu-passenger-edition/">Blog of Ryan Bigg - Deploying a Rails application on Ubuntu: Passenger Edition</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
            <tag> Redmine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac OS X 下使用 brew 安裝 Go</title>
      <link href="/2016/01/09/old%20posts/2016-01-09-install-go-in-mac-osx-with-homebrew/"/>
      <url>/2016/01/09/old%20posts/2016-01-09-install-go-in-mac-osx-with-homebrew/</url>
      
        <content type="html"><![CDATA[<h3 id="兩種安裝方法"><a href="#兩種安裝方法" class="headerlink" title="兩種安裝方法"></a>兩種安裝方法</h3><p>在 Mac OS X 下安裝 Go 有兩種方法，一種是去官網下載安裝包，另一種是使用 Homebrew 來安裝，為了以後更新的便利性著想，我決定使用 Homebrew 來安裝 Golang。</p><p><em>ps: 如果你還沒有 Homebrew 的話，需要先安裝 Homebrew 才能進行以下的安裝。</em></p><h3 id="更新-Brew-到最新狀態"><a href="#更新-Brew-到最新狀態" class="headerlink" title="更新 Brew 到最新狀態"></a>更新 Brew 到最新狀態</h3><p>打開你的 Terminal，輸入：</p><pre><code>brew update &amp;&amp; brew upgrade</code></pre><h3 id="安裝-Golang"><a href="#安裝-Golang" class="headerlink" title="安裝 Golang"></a>安裝 Golang</h3><p>使用 brew 安裝 go</p><pre><code>brew install go</code></pre><p>完成安裝，安裝完畢之後使用 <code>go run file_name</code> 指令時會出現 <code>path error</code> 因為我們還沒設定 $GOPATH 路徑。</p><h3 id="設置-GOPATH"><a href="#設置-GOPATH" class="headerlink" title="設置 $GOPATH"></a>設置 $GOPATH</h3><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><p>打開 bash 設定檔</p><pre><code>vim ~/.bashrc</code></pre><p>設定 GOPATH 參數</p><pre><code>export GOPATH=&quot;$&#123;HOME&#125;/go&quot;export PATH=&quot;$&#123;GOPATH&#125;/bin:$&#123;PATH&#125;&quot;</code></pre><p>重載參數</p><pre><code>source ~/.bashrc</code></pre><h4 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h4><p>因為我用的是 fish shell，所以也要設定 fish 的 GOPATH 路徑。輸入以下指令打開 fish 設定檔：</p><pre><code>vim ~/.config/fish/config.fish</code></pre><p>加上 GOPATH 參數</p><pre><code>set -gx GOPATH &quot;$HOME/Code/go&quot;set -gx PATH &quot;$GOPATH/bin&quot; $PATH</code></pre><p>重載參數</p><pre><code>. ~/.config/fish/config.fish</code></pre><h3 id="建立你的第一個-Go-程式"><a href="#建立你的第一個-Go-程式" class="headerlink" title="建立你的第一個 Go 程式"></a>建立你的第一個 Go 程式</h3><p>建立 hello.go 檔案</p><pre><code>vim /tmp/hello.go</code></pre><p>幫剛剛建立的檔案加上以下內容</p><pre><code class="go">package mainimport &quot;fmt&quot;func main() &#123;  fmt.Println(&quot;Hello, World!&quot;);&#125;</code></pre><p>儲存後在 terminal 中輸入<code>go run /tmp/hello.gov</code></p><p>恭喜！ 你可以在 OS X 內使用 Golang 來開發了。</p><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="http://blog.helloarron.com/2015/08/29/go/mac-install-go/">Mac下安装Go和配置相应环境 Arron.y’s blog</a></p><p><a href="https://coolaj86.com/articles/getting-started-with-golang-osx/">Getting Started with Golang on OS X</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> OSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails - 使用 dropzone.js 實現檔案上傳</title>
      <link href="/2015/11/12/old%20posts/2015-11-12-rails-use-dropzonejs-for-file-upload/"/>
      <url>/2015/11/12/old%20posts/2015-11-12-rails-use-dropzonejs-for-file-upload/</url>
      
        <content type="html"><![CDATA[<h2 id="實現上傳檔案"><a href="#實現上傳檔案" class="headerlink" title="實現上傳檔案"></a>實現上傳檔案</h2><p>create的時候controller要設定一些值給js接。</p><pre><code class="rb">  def create    @upload = Upload.create(upload_params)    if @upload.save      # send success header      render json: &#123; message: &quot;success&quot;, fileID: @upload.id &#125;, :status =&gt; 200    else      #  you need to send an error header, otherwise Dropzone      #  will not interpret the response as an error:      render json: &#123; error: @upload.errors.full_messages.join(&#39;,&#39;)&#125;, :status =&gt; 400    end  end</code></pre><p>成功後用success狀態設定div的id</p><pre><code class="js">        success: function(file, response)&#123;            // find the remove button link of the uploaded file and give it an id            // based of the fileID response from the server            $(file.previewTemplate).find(&#39;.dz-remove&#39;).attr(&#39;id&#39;, response.fileID);            // add the dz-success class (the green tick sign)            $(file.previewElement).addClass(&quot;dz-success&quot;);        &#125;,</code></pre><p>要傳給rails要注意的事情，要修改params的名稱</p><pre><code class="js">$(&quot;#new_upload&quot;).dropzone(&#123;    .    .    .    // changed the passed param to one accepted by    // our rails app    paramName: &quot;upload[image]&quot;,    .    .    .</code></pre><h2 id="設定成按下按鈕才送出"><a href="#設定成按下按鈕才送出" class="headerlink" title="設定成按下按鈕才送出"></a>設定成按下按鈕才送出</h2><p>用js的方式宣告myDropzone。並設定自動送出false</p><pre><code class="js">  var myDropzone = new Dropzone(&quot;#new_upload&quot;,&#123;  .  .  .  autoProcessQueue: false,  parallelUploads: 10,  .  .  .&#125;</code></pre><p>幫按鈕加上click handlerd，<code>processQueue()</code>按下時會把Queue中的檔案依照添加順序上傳到server。</p><pre><code class="js">  $(&quot;#gogo&quot;).click(function() &#123;    myDropzone.processQueue();  &#125;)</code></pre><h2 id="跟一般的form結合"><a href="#跟一般的form結合" class="headerlink" title="跟一般的form結合"></a>跟一般的form結合</h2><pre><code class="html">&lt;form id=&quot;my-awesome-dropzone&quot; class=&quot;dropzone&quot;&gt;  &lt;div class=&quot;dropzone-previews&quot;&gt;&lt;/div&gt; &lt;!-- this is were the previews should be shown. --&gt;  &lt;!-- Now setup your input fields --&gt;  &lt;input type=&quot;email&quot; name=&quot;username&quot; /&gt;  &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;  &lt;button type=&quot;submit&quot;&gt;Submit data and files!&lt;/button&gt;&lt;/form&gt;</code></pre><p>js部分:</p><ul><li>按下submit的時候順便送出圖片。</li><li>接收事件的時候改成監視<code>sendingmultiple</code></li></ul><pre><code class="js">Dropzone.options.myAwesomeDropzone = &#123; // The camelized version of the ID of the form element  // The configuration we&#39;ve talked about above  autoProcessQueue: false,  uploadMultiple: true,  parallelUploads: 100,  maxFiles: 100,  // The setting up of the dropzone  init: function() &#123;    var myDropzone = this;    // First change the button to actually tell Dropzone to process the queue.    this.element.querySelector(&quot;button[type=submit]&quot;).addEventListener(&quot;click&quot;, function(e) &#123;      // Make sure that the form isn&#39;t actually being sent.      e.preventDefault();      e.stopPropagation();      myDropzone.processQueue();    &#125;);    // Listen to the sendingmultiple event. In this case, it&#39;s the sendingmultiple event instead    // of the sending event because uploadMultiple is set to true.    this.on(&quot;sendingmultiple&quot;, function() &#123;      // Gets triggered when the form is actually being sent.      // Hide the success button or the complete form.    &#125;);    this.on(&quot;successmultiple&quot;, function(files, response) &#123;      // Gets triggered when the files have successfully been sent.      // Redirect user or notify of success.    &#125;);    this.on(&quot;errormultiple&quot;, function(files, response) &#123;      // Gets triggered when there was an error sending the files.      // Maybe show form again, and notify user of error    &#125;);  &#125;&#125;</code></pre><ul><li><a href="https://github.com/enyo/dropzone/wiki/Combine-normal-form-with-Dropzone">Combine normal form with Dropzone · enyo/dropzone Wiki</a></li></ul><h2 id="可以覆寫事件"><a href="#可以覆寫事件" class="headerlink" title="可以覆寫事件"></a>可以覆寫事件</h2><p><a href="http://www.dropzonejs.com/#events">Dropzone.js</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.munocreative.com/nerd-notes/justpayme">AJAX Photo Uploading the Easy Way with Rails 4 and Paperclip - JustPayme — Muno Creative</a></p><p><a href="http://josephndungu.com/tutorials/ajax-file-upload-with-dropezonejs-and-paperclip-rails">Ajax file upload with DropezoneJs and Paperclip - Rails | Joseph Ndungu</a></p><p><a href="http://www.dropzonejs.com/">Dropzone.js</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Ajax </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS排版技巧 - 文繞圖</title>
      <link href="/2015/11/12/old%20posts/2015-11-12-css-layout-techniques-spelling/"/>
      <url>/2015/11/12/old%20posts/2015-11-12-css-layout-techniques-spelling/</url>
      
        <content type="html"><![CDATA[<h2 id="文繞圖"><a href="#文繞圖" class="headerlink" title="文繞圖"></a>文繞圖</h2><p>先看效果，這次要做的是文繞圖技巧，可以選擇靠左或靠右。</p><p><img src="https://lh3.googleusercontent.com/oP3fnp8f8uhuc0mxk_0mU9xYtmakaKKgF_Wc6_GeBrsKZl4CbQj8gR81SreC_lD2Wge2f2CDdmq4sx8ywUJSPdsN1P7GC1W0196lhH0VMLt1fUQ8wpnvUlxcqqJgvWwv7k-wnp5Zvptd234xOCVoeVD1EgluELO_c2pcejlRwMZqUGcufr_o1o1DpsmsqrPm0iQ-T7bgNskMImC4ZaEnfiE2J43jpgR6fknJ5rvYSpAP1rUOsS-n7UTxVyVZeFwJl7SrjCxmVQAQQ-dsDSWxvFKIfNcktfpEYFrm5oUf8AFWue-66DFGoZ4gXPV2LpBpyiqh4GA5q535SGNy01jrZKCKzEv-jIwwscd1n7dEfWFBlVZsfvxQ-SEm1E1fdaTZafF15bSmRxQlae96ibtUUYy4zSaEa5g2ycBFELJ61gmABHehSLsGYQwtZjeM-a4SESSwQSAtxiGIN2p6rz46wLPRK6y5JKkflhazE9gSK88dUVD5XnBuP4JiBcBnmg-RQJ8o_cT-NE0LgspEZ_MkB7Q6X1L2ci--utG7u6TVVxo=w1805-h761-no"></p><h3 id="html結構"><a href="#html結構" class="headerlink" title="html結構"></a>html結構</h3><p>圖片(img)必須在段落(p)的上面，當圖片加上<code>float:left</code>屬性時，圖片的空間會消失，變成浮在畫面上，利用這個技巧，我們來做到文繞圖的效果。</p><pre><code class="html">&lt;div class=&quot;image-container&quot;&gt;      &lt;img class=&quot;image1&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot;  alt=&quot;&quot;/&gt;      &lt;p class=&quot;pp1&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley o.......(略)&lt;/p&gt;</code></pre><p>完整範例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;style&gt;        .image-container&#123;          max-width: 60%;          margin: 0 20%;        &#125;        .image1&#123;          float: right;        &#125;        .image2&#123;          float: left;          margin-right: 20px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;image-container&quot;&gt;      &lt;img class=&quot;image1&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot;  alt=&quot;&quot;/&gt;      &lt;p class=&quot;pp1&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;      &lt;img class=&quot;image2&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot; alt=&quot;&quot; /&gt;      &lt;p class=&quot;pp2&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;    &lt;/div&gt;&lt;!-- image-container --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>容器水平置中是使用把最大寬度設成60%，並使用<code>margin:auto</code>技巧。</p></blockquote><h3 id="想要分段的時候用div包起來並加上-clear-fix"><a href="#想要分段的時候用div包起來並加上-clear-fix" class="headerlink" title="想要分段的時候用div包起來並加上.clear-fix"></a>想要分段的時候用div包起來並加上<code>.clear-fix</code></h3><p>如果段落(p)高比圖片(img)小的時候會出現這樣的情況。有時候我們想要段落分明，這時候使用div包覆並幫div加上<code>.clear-fix</code>。</p><p><img src="https://lh3.googleusercontent.com/XPE7PCrLNc_xKHE_J32rggtUNIVM2G8XMJJwobHk-7AaeAYLpoLBa7YnkyXFskjfzsa1kIlDPH6Jd02Lc2H2yQ6Zlb1fbPek016YPeJ4KWTK3OnMfZalsnEr3XiWeB3AkTRAK1ycxVJOARSbfIUC09i2tqow3yBy3cHmbQ4xm_mwIbqVSbbSsbHNbNlxyLqKb5fVbI_FLyyAS8jXjB6lgjMrI0cPf2x3GCA8kR_Jzwkepluy0I5gqc-LSlJe55G5f9fLmBoHr_4wN_X212TNKYB-wCKEAN7pQUXsl8nf7N3KG0Zso20TJ2lAOgZDVHOtZzLCUpsANVDVs-KpdA8GPBuskGLGz9aVd-XRZKCvM0yI3QZPHG6-3l9GaOsfF35ALn0gv20duMZvnPyHQqgCvAhzwVgWig5c2J77quPhxwZ4eq6TOYPC7e1xrRbPhfBRlYG14AMuDmfHTHjkA7ltt-Rn2D_irzzHZ-jYw3lhSa6y74TVgTukijsnt72QNckgBOy4_82VF_4YmVZFjbxTrPPrQ2EIfy2z7a8TLrU2BKI=w1199-h542-no"></p><p>加完之後的效果，圖片一已經展開了一個長方形的空間。</p><p><img src="https://lh3.googleusercontent.com/PBecy4_K22FloAL4wjCo4L921QvxF_7n8_d1t0DNaTi_CspASA_w1pQ2mFC9yr2h4PAEFsvcuQa2WNnUSLaF_K2SHYBALBl27pQiGKqdC88EsY-nrTgnEpaP2th-n-IY1N82gMbhJ6WOJwVk_oUjO7w7EA9yIyOBv0v-QVpF_7d2vj-VrwzBbxDyiu35ysSYiMxZxvY-saN0y2k9SgdNHUPGfTVsndFt-4iy5UaWgYEtxi28YtpSAeZXUov-Q27Biz5UYpwoLZutWYPet6cDmst3WMkHsouOcNPZSQR6qL2FSNIPOkYJkp5NaaKXSPiGEtg7asloDHGNMwOwht1Sz_oTznA53atrf3M36gKslKcxl71iercxW9Ip7nv9o7NacXxm-ycAXDuNZf4synvCvZhstX21YUUgaBZqSxK3mF4RXH2MI5lqa4Ml1XQOMrEKGcOXaLSqmMIZLnyj3utqpcWzk8WksidXSpaFX_Hw0m8w_FhJ73A0qEb1DTb-Cfbg4p73n3rFkG73boH0GnpKAansWNDWDf_nwc7l0bZN0Gs=w1471-h624-no"></p><p>完整範例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;style&gt;        .image-container&#123;          max-width: 60%;          margin: 0 auto;        &#125;        .image1&#123;          float: right;          clear:right;        &#125;        .image2&#123;          float: left;          margin-right: 20px;        &#125;        .image1-wrapper&#123;          border: 3px dashed black;        &#125;        .clear-fix&#123;          overflow: auto;          zoom: 1;        &#125;        @media screen and (max-width: 767px) &#123;          .image-container &#123;            background-color: lightgreen;            max-width: 100%;          &#125;        &#125;    &lt;/style&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styke.css&quot; media=&quot;all&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;image-container&quot;&gt;      &lt;div class=&quot;clear-fix image1-wrapper&quot;&gt;        &lt;img class=&quot;image1&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot;  alt=&quot;&quot;/&gt;        &lt;p class=&quot;pp1&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type&lt;/p&gt;        &lt;p class=&quot;pp1&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type&lt;/p&gt;      &lt;/div&gt;&lt;!-- clear-fix --&gt;      &lt;img class=&quot;image2&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot; alt=&quot;&quot; /&gt;    &lt;/div&gt;&lt;!-- image-container --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="幫段落左邊加上斷行效果用clear-left"><a href="#幫段落左邊加上斷行效果用clear-left" class="headerlink" title="幫段落左邊加上斷行效果用clear:left"></a>幫段落左邊加上斷行效果用<code>clear:left</code></h3><p>這次段落和img的html是：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;style&gt;        .image-container&#123;          max-width: 60%;          margin: 0 auto;        &#125;        .image1&#123;          float: right;          clear:right;        &#125;        .image2&#123;          float: left;          margin-right: 20px;        &#125;        .image1-wrapper&#123;          border: 3px dashed black;        &#125;        .clear-fix&#123;          overflow: auto;          zoom: 1;        &#125;        @media screen and (max-width: 767px) &#123;          .image-container &#123;            background-color: lightgreen;            max-width: 100%;          &#125;        &#125;    &lt;/style&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styke.css&quot; media=&quot;all&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;image-container&quot;&gt;    &lt;img class=&quot;image2&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot; alt=&quot;&quot; /&gt;    &lt;p class=&quot;pp2&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type&lt;/p&gt;  &lt;/div&gt;&lt;!-- image-container --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>呈現的效果：</p><p><img src="https://lh3.googleusercontent.com/s51Inw1zkH1TZuCWGTukzpBMZZzJiw14R0xlrnY1Z0CAL03O59ukaPszTltWQlTpV_dVi_88FDMb6Hpb2h0cZ_VEtjZqcRkRosNQMYH0XCV0ABIy49LwXr4L8y6jsuv1klTh0nX9dG4FRkEew5R7ACgBBWDgKN3eNSD1kBeN90ORWraxJRGT0fihrYF7-8wKPS40VAGU3yk5KTBbfsj3zSs_chipiKSndIxPprRmdHHzvp1iHCQl5uNT_53l5mmJSquzP_fTCJ8TVvCLdLfkdGeC_waeviW30Ar9qUUXexLBfZ-nmaVXOhl7ILtYYQs4tdAGf8oyDV9-c0a8LLcupnV9qZ8qGIvafK2of3vIicEbHOJJwL1ppDhqCaZU720dyZebh2l9yJ-ukWu4ZOq5CFST7bawCSYxWVb81tePxckEogsgo0LQkHF9CcZCLLkLl2MKbBcWUVKcnqrNUnMLCX_9ZhyjVxpREXZ1HLcBCCZDyF8mi6ArIz3SXXqQqnuMnIr4sJOJ87V7HEOiNMVJkCj3YgvpKmhgDfnYsarqMdN8eqjZYz1J7lW-A5LN_HRG8wqKZJwWGqfR3SqcRsP4xIV-0pMfLcb7nD-r6Q_duU8E10s9=w1229-h349-no"></p><p>幫段落(p)加上<code>clear:left</code>後：</p><p><img src="https://lh3.googleusercontent.com/q8lUS9aZ57kO_SkLiCcv7BvSwTin-tPY0BybMYnYeHikLRWNzkBlsGPDkKW3r50N0Z6kV8slZ3_aqnd8VqYBJY81N-ATQ-TQfovXZeykXSfQEBocJFWq_LFHBNyUahj5qrZo69lS0JEeBdi7cybLw6fuvVKVu_oJTuX9WGzLw4bcoH_SI0dmkolr0CD1bCRwDtRBkZvKpi0aPtnebBK1AdP8F7Cgbi0O09LA02yh_jFPdT9p326oUIkjf-8hii2ovQ7BN86JDd_UvWc5YXZBNbFOOPxix0rDBzjst6ajzXJt9vujVx4IL40Mse_0WGC_XLyv3dmfk8lp_9xGAJ2ClFDOgz4iIwWaKeMBlVU-0Sb7cMAST-6O4R_uPwqKPILF05geZ9wG6PQb-hOq3MDiRJrg6ArksK5Ow0BLX2ANbu90HR_ogG0nbl99qDi9aFc7sMjoOD3iVfGOOuh6RqVoiVbkIh4NeEUjubMr9Sm0hFYOI3hQQ4462S50h_znvrP-DEYg-Qoxa-K_CtOp1A1juRe8eKkIjEyrCZgE1qCBQ64=w1164-h391-no"></p><p>程式碼</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;style&gt;        .image-container&#123;          max-width: 60%;          margin: 0 auto;        &#125;        .image1&#123;          float: right;        &#125;        .image2&#123;          float: left;          margin-right: 20px;        &#125;        .image1-wrapper&#123;          border: 3px dashed black;        &#125;        .clear-fix&#123;          overflow: auto;          zoom: 1;        &#125;        .pp2&#123;          clear: left;        &#125;        @media screen and (max-width: 767px) &#123;          .image-container &#123;            background-color: lightgreen;            max-width: 100%;          &#125;        &#125;    &lt;/style&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styke.css&quot; media=&quot;all&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;image-container&quot;&gt;    &lt;img class=&quot;image2&quot; src=&quot;http://zh-tw.learnlayout.com/images/ilta.png&quot; alt=&quot;&quot; /&gt;    &lt;p class=&quot;pp2&quot;&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type&lt;/p&gt;  &lt;/div&gt;&lt;!-- image-container --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ol><li>加上 float 屬性之後在<code>空間會受到外部 .image-wrapper 的限制</code>。</li><li>然而對同層元素來說，設成 float 的 img 空間會消失，因此在<code>float img 下方的同層元素會直接浮上來</code>，空間跟下方的同層元素共用，內容卻是流動的，形成文繞圖的效果。</li><li>如果想要斷行在 p 的左方幫p加上<code>float:left</code>，想要斷行在 p 右方幫 p 加上 <code>float:right</code>。</li><li><code>.image-wrapper</code>高度比圖片的時候需要加上<code>clear-fix</code>。</li></ol><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="http://www.dotblogs.com.tw/brooke/archive/2015/04/21/151108.aspx">float與clear用法 - 布魯克斯- 點部落</a><br><a href="http://zh-tw.learnlayout.com/float.html">CSS - 關於 float 屬性</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails - 如何解決ajax沒有CSRF Key的問題 </title>
      <link href="/2015/11/12/old%20posts/2015-11-12-rails-how-to-solve-the-problem-of-ajax-without-csrf-key/"/>
      <url>/2015/11/12/old%20posts/2015-11-12-rails-how-to-solve-the-problem-of-ajax-without-csrf-key/</url>
      
        <content type="html"><![CDATA[<h2 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h2><p>當瀏覽器發生422錯誤，很有可能是缺少CSRF Key所引起的。這時候可以到 Log 確認一下是否是缺少 CSRF Key的情形。</p><h2 id="方法一：用js抓mete的csrf-token"><a href="#方法一：用js抓mete的csrf-token" class="headerlink" title="方法一：用js抓mete的csrf-token"></a>方法一：用js抓mete的csrf-token</h2><pre><code class="js">$(document).ajaxSend(function(e, xhr, options) &#123;  var token =$j(&quot;meta[name=&#39;csrf-token&#39;]&quot;).attr(&quot;content&quot;);  xhr.setRequestHeader(&quot;X-CSRF-Token&quot;, token);&#125;);</code></pre><p>想要學習處理csrf可以看看jquery-ujs的source code</p><p><a href="https://github.com/rails/jquery-rails/blob/master/vendor/assets/javascripts/jquery_ujs.js#L69">jquery-rails/jquery_ujs.js at master · rails/jquery-rails</a></p><h2 id="方法二：在controller加上一個方法"><a href="#方法二：在controller加上一個方法" class="headerlink" title="方法二：在controller加上一個方法"></a>方法二：在controller加上一個方法</h2><p><a href="http://devsolvd.com/questions/rails-how-does-csrf_meta_tag-work">[SOLVD] Rails: How Does csrf_meta_tag Work? | DevSolvd</a></p><h2 id="配合ajax-使用"><a href="#配合ajax-使用" class="headerlink" title="配合ajax 使用"></a>配合ajax 使用</h2><pre><code class="js">      $.ajax(&#123;        url: &quot;your_url&quot;,        type: &quot;DELETE&quot;,        dataType: &quot;json&quot;,        beforeSend: function(xhr) &#123;xhr.setRequestHeader(&#39;X-CSRF-Token&#39;, $(&#39;meta[name=&quot;csrf-token&quot;]&#39;).attr(&#39;content&#39;))&#125;,        data: &#123;id: attr.ta_attr_id &#125;,        success: function(data) &#123;          console.log(data);          attr.is_added = false;          attr.position = undefined;        &#125;      &#125;);</code></pre><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這是在前端做的事情，所以我會選擇使用js來抓</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails - Sortable Table With Ajax</title>
      <link href="/2015/11/12/old%20posts/2015-11-12-rails-sortable-table-with-ajax/"/>
      <url>/2015/11/12/old%20posts/2015-11-12-rails-sortable-table-with-ajax/</url>
      
        <content type="html"><![CDATA[<ol><li>前端使用sortable</li><li>後端在幫要排序的類別(這邊是Memo)加上position欄位</li></ol><h2 id="原理與流程"><a href="#原理與流程" class="headerlink" title="原理與流程"></a>原理與流程</h2><p>jquery-ui 的 sortable 套件內建了 serilize ，它的功用是把 id 變成 query string 依順序回傳，所以我們只要找出規則就可以知道移動的是哪些欄位，把移動後的結果用 ajax 存進資料庫即完成拖曳的動作。</p><h2 id="程式結構-html"><a href="#程式結構-html" class="headerlink" title="程式結構(html)"></a>程式結構(html)</h2><p>html指定要排序的Container為<code>id=&quot;memo-table&quot;</code>，讓js可以幫他加上<code>sortable()</code>方法。要排序的欄位加上<code>id=&quot;id-&lt;%= memo.id %&gt;&quot;</code>，這樣 jquery-ui sortable 套件的 serialize 時就會以 query string 的方式把排序送到server。</p><pre><code class="html">&lt;p id=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;&lt;h1&gt;Listing Memos&lt;/h1&gt;Query string: &lt;span&gt;&lt;/span&gt;&lt;table class=&quot;table&quot;&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;Content&lt;/th&gt;      &lt;th&gt;Position&lt;/th&gt;      &lt;th colspan=&quot;3&quot;&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody id=&quot;memo-table&quot;&gt;    &lt;% @memos.each do |memo| %&gt;      &lt;tr id=&quot;id-&lt;%= memo.id %&gt;&quot;&gt;        &lt;td&gt;&lt;%= memo.content %&gt;&lt;/td&gt;        &lt;td&gt;&lt;%= memo.position %&gt;&lt;/td&gt;        &lt;td&gt;&lt;%= link_to &#39;Show&#39;, memo %&gt;&lt;/td&gt;        &lt;td&gt;&lt;%= link_to &#39;Edit&#39;, edit_memo_path(memo) %&gt;&lt;/td&gt;        &lt;td&gt;&lt;%= link_to &#39;Destroy&#39;, memo, method: :delete, data: &#123; confirm: &#39;Are you sure?&#39; &#125; %&gt;&lt;/td&gt;      &lt;/tr&gt;    &lt;% end %&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;%= link_to &#39;New Memo&#39;, new_memo_path %&gt;</code></pre><h2 id="程式結構-js"><a href="#程式結構-js" class="headerlink" title="程式結構(js)"></a>程式結構(js)</h2><pre><code class="js">$(function() &#123;  $(&#39;#memo-table&#39;).sortable(&#123;    axis: &#39;y&#39;,    stop: function(event,ui) &#123;      var data  = $(this).sortable(&#39;serialize&#39;);      $(&#39;span&#39;).text(data);      $.ajax(&#123;        data: data,        type: &#39;POST&#39;,        url: &#39;/memos/batch_update&#39;      &#125;);    &#125;  &#125;);&#125;);</code></pre><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>memo_controller 中新增一個action來接這個ajax。因為要表示的是一個列表(List)中許多欄位(column)的順序，所以回傳的<code>params[:id]</code>會是一個陣列，我們把它存成變數<code>ids</code>。我們把改變過的欄位一一更新資料庫的資料。這邊我有點偷懶，沒有比對是否順序不一樣就全部存進去，不過第一次做就先用笨一點的方法，把功能做出來，之後再改進效能。</p><pre><code class="rb">  def batch_update    @memos = Memo.all    ids = params[:id]    ids.each.with_index do |id, index|      memo = @memos[id.to_i-1]      memo.position = index + 1      memo.save    end    respond_to do |format|      format.js &#123;        render nothing: true      &#125;    end  end</code></pre><h2 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h2><p>因為batch_update沒有針對特定的memo，而是一次插入多筆post，所以我把url設定為<code>/posts/batch_update</code>而不是<code>/posts/:id/batch_update</code>。</p><pre><code class="rb">  resources :memos do    collection do      post :batch_update    end  end</code></pre><h2 id="遇到的Bug與解決方法"><a href="#遇到的Bug與解決方法" class="headerlink" title="遇到的Bug與解決方法"></a>遇到的Bug與解決方法</h2><h3 id="Post-422"><a href="#Post-422" class="headerlink" title="Post 422"></a>Post 422</h3><p><a href="http://stackoverflow.com/questions/27098239/post-422-unprocessable-entity-in-rails-due-to-the-routes-or-the-controller">javascript - POST 422 (Unprocessable Entity) in Rails? Due to the routes or the controller? - Stack Overflow</a></p><h3 id="Ajax造成的HTTP-500-Server-Error"><a href="#Ajax造成的HTTP-500-Server-Error" class="headerlink" title="Ajax造成的HTTP 500 Server Error"></a>Ajax造成的HTTP 500 Server Error</h3><p>處理 missing template</p><pre><code class="rb">  def batch_update   .   .    respond_to do |format|      format.js &#123;        render nothing: true      &#125;    end  end</code></pre><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ul><li><a href="http://stackoverflow.com/questions/15633341/jquery-ui-sortable-then-write-order-into-a-database">php - jQuery UI Sortable, then write order into a database - Stack Overflow</a></li><li><a href="https://gist.github.com/linssen/2773872">Extending the jQuery Sortable With Ajax &amp; MYSQL</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails - 使用 will pagniate 搭配 ajax 實作無限捲動</title>
      <link href="/2015/11/12/old%20posts/2015-11-12-rails-will-pagniate-implement-an-infinite-scroll/"/>
      <url>/2015/11/12/old%20posts/2015-11-12-rails-will-pagniate-implement-an-infinite-scroll/</url>
      
        <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>will paganiate 由送到 controller 的 params[:page] 決定回傳的<code>@posts</code>。</p><p>可以由我們在 controller 中定義<code>@posts</code>所知道。</p><pre><code class="rb">@posts = Post.paginate(:page =&gt; params[:page])</code></pre><h2 id="inifite-scroll-event"><a href="#inifite-scroll-event" class="headerlink" title="inifite scroll event"></a>inifite scroll event</h2><pre><code class="js">$(window).scroll(function () &#123;   if ($(window).scrollTop() &gt;= $(document).height() - $(window).height() - 10) &#123;      //Add something at the end of the page   &#125;&#125;);</code></pre><p>記得要減10，或任何你覺得適合的數，可以幫助捲動正確觸發。</p><p><a href="http://stackoverflow.com/questions/5059526/infinite-scroll-jquery-plugin">javascript - infinite-scroll jquery plugin - Stack Overflow</a></p><h2 id="程式碼-HTML"><a href="#程式碼-HTML" class="headerlink" title="程式碼 - HTML"></a>程式碼 - HTML</h2><p>因為我們使用 will pagniate 也就是分頁的GEM來實作，所以我們必須用 hidden field 來儲存目前捲動的最後一頁是哪一頁。image_tag 是 rails 特有的用法，會對應到 <code>assets/images</code> 資料夾下的圖片。</p><p>index.html.erb</p><pre><code class="html">&lt;div class=&quot;page-header&quot;&gt;  &lt;h1&gt;My Post&lt;/h1&gt;&lt;/div&gt;&lt;!-- page-header --&gt;&lt;div id=&quot;my-posts&quot;&gt;  &lt;%= render @posts %&gt;&lt;/div&gt;&lt;!-- my-posts --&gt;&lt;div id=&quot;loadmoreajaxloader&quot; style=&quot;display:none;&quot;&gt;&lt;center&gt;&lt;%= image_tag &quot;ajax-loader.gif&quot; %&gt;&lt;/center&gt;&lt;/div&gt;&lt;%= hidden_field_tag &quot;current_page&quot;, &quot;1&quot; %&gt;</code></pre><p>_post.html.erb</p><pre><code class="html">&lt;div&gt;  &lt;h2&gt;&lt;%= link_to post.title, post %&gt;&lt;/h2&gt;  &lt;small&gt;&lt;em&gt;&lt;%= post.timestamp %&gt;&lt;/em&gt;&lt;/small&gt;  &lt;p&gt;&lt;%= truncate(strip_tags(post.body), length: 600) %&gt;&lt;/p&gt;&lt;/div&gt;</code></pre><h2 id="程式碼-JS"><a href="#程式碼-JS" class="headerlink" title="程式碼 - JS"></a>程式碼 - JS</h2><p>實作了兩種觸發的方式，先完成較簡單的 click ，之後再把 click 事件替換成捲動至頁尾會觸發的事件即完成無限下拉式瀏覽。</p><pre><code class="js">$(function () &#123;    // Load more    var $loadmore = $(&quot;#loadmore&quot;);    var $current_page = $(&quot;#current_page&quot;);    var $my_posts = $(&quot;#my-posts&quot;);    var addPostToList = function (post) &#123;        var postStri = &quot;&quot;;        postStri += &quot;&lt;div&gt;&quot;;        postStri += &quot;  &lt;h2&gt;&lt;a href=\&quot;#\&quot;&gt;&quot; + post.title + &quot;&lt;\/a&gt;&lt;\/h2&gt;&quot;;        postStri += &quot;  &lt;small&gt;&lt;em&gt;&quot; + post.created_at + &quot;&lt;\/em&gt;&lt;\/small&gt;&quot;;        postStri += post.body;        postStri += &quot;&lt;\/div&gt;&quot;;        $my_posts.append(postStri);    &#125;;    var addPosts = function (posts) &#123;        $.each(posts, function () &#123;            addPostToList(this);        &#125;);    &#125;;    $(window).on(&quot;scroll&quot;, function () &#123;        if ($($(window).scrollTop() &gt;= $(document).height() - $(window).height() - 50)) &#123;            var current_page = parseInt($current_page.val());            current_page++;            console.log(&quot;111&quot;);            $(&#39;div#loadmoreajaxloader&#39;).show();            $.ajax(&#123;                url: &quot;/posts.json&quot;,                type: &quot;GET&quot;,                dataType: &quot;json&quot;,                data: &#123;                    page: current_page                &#125;,                success: function (data) &#123;                    console.log(data);                    $current_page.val(String(current_page));                    var posts = data;                    $(&#39;div#loadmoreajaxloader&#39;).hide();                    addPosts(posts);                &#125;            &#125;);        &#125;    &#125;);    // var $loadmore_gif = $(&quot;a.loading-gif&quot;);    $loadmore.click(function (e) &#123;        e.preventDefault();        var current_page = parseInt($current_page.val());        current_page++;        $loadmore.hide();        console.log(&quot;click&quot;);        $.ajax(&#123;            url: &quot;/posts.json&quot;,            type: &quot;GET&quot;,            dataType: &quot;json&quot;,            data: &#123;                page: current_page            &#125;,            success: function (data) &#123;                console.log(data);                $current_page.val(String(current_page));                var posts = data;                addPosts(posts);                $loadmore.show();            &#125;        &#125;);    &#125;);&#125;);(function ($) &#123;&#125;)(jQuery);</code></pre><h2 id="其他：javascript小技巧-過濾url獲取id"><a href="#其他：javascript小技巧-過濾url獲取id" class="headerlink" title="其他：javascript小技巧 - 過濾url獲取id"></a>其他：javascript小技巧 - 過濾url獲取id</h2><pre><code class="js">var str_sub = str.substr(str.lastIndexOf(&quot;=&quot;)+1);</code></pre><p><a href="http://codex.wiki/question/1933026-9917">Javascript: 標籤過濾從url獲取id - 數碼維基</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從 Tealeaf 課程學習模組化 - Sluggify Module</title>
      <link href="/2015/11/02/old%20posts/2015-11-02-tealeaf-course-2-sluggify-module/"/>
      <url>/2015/11/02/old%20posts/2015-11-02-tealeaf-course-2-sluggify-module/</url>
      
        <content type="html"><![CDATA[<p>因為 Post 與 Category 都的網址都需要 Sluggify 以便 SEO 的進行。所以我們把 Sluggify 模組化，讓同樣的程式碼只要寫一次就好。</p><h3 id="1-建立module-Sluggable，並引入之"><a href="#1-建立module-Sluggable，並引入之" class="headerlink" title="1. 建立module Sluggable，並引入之"></a>1. 建立module Sluggable，並引入之</h3><p>在lib資料夾中建立一個名為<code>sluggable.rb</code>的檔案。加入<code>extend ActiveSupport::Concern</code>，這個技巧會讓模組間的耦合變得更加簡單。而一個class載入Sluggable時，會先做完include區塊中寫下的事情。</p><pre><code class="rb">module Sluggable  extend ActiveSupport:Concern  include do  endend</code></pre><p>打開<code>config/application.rb</code>加入路徑<code>config.autoload_paths &lt;&lt; Rails.root.join(&#39;lib&#39;)</code></p><blockquote><p>還有另一個方法把rb檔initializers中，放在這個資料夾裡面代表app打開初始化時就會先跑過一遍。</p></blockquote><h3 id="2-跟sluggify有關的方法通通搬過來"><a href="#2-跟sluggify有關的方法通通搬過來" class="headerlink" title="2. 跟sluggify有關的方法通通搬過來"></a>2. 跟sluggify有關的方法通通搬過來</h3><p>接著我們要把原本model(post.rb,category.rb)跟sluggify有關的方法搬過來。</p><ol><li>把<code>after_validation :generate_slug!</code>放在include區塊。</li><li>其他方法貼進model中。</li></ol><p>這樣會出現幾個問題，接下來的步驟會解決他們並且解釋之。</p><pre><code class="rb">module Sluggable    extend ActiveSupport::Concern    # executes this code when included only once    included do        after_validation :generate_slug!    end    def generate_slug      the_slug = to_slug(title)      post = Post.find_by slug: the_slug      count = 2      while post &amp;&amp; post != self        the_slug = append_suffix(the_slug, count)        post = Post.find_by slug: the_slug        count += 1      end      self.slug = str.downcase    end    def append_suffix(_the_slug, count)      if str.split(&#39;-&#39;).last.to_i != 0        return str.split(&#39;-&#39;).slice(0...-1).join(&#39;-&#39;) + &#39;-&#39; + count.to_s      else        return str + &#39;-&#39; + count.to_s      end    end    def to_slug(name)      str = name.strip      str.gsub! /\s*[^A-Za-z0-9]\s*/, &#39;-&#39; # 將符號轉成&quot;-&quot;      str.gsub! /-+/, &#39;-&#39; # 將多個&quot;-&quot;轉成一個&quot;-&quot;      str    endend</code></pre><h3 id="3-class-attribute特性新增屬性到model上"><a href="#3-class-attribute特性新增屬性到model上" class="headerlink" title="3. class_attribute特性新增屬性到model上"></a>3. class_attribute特性新增屬性到model上</h3><p>因為post與category所要轉換成網址的欄位一個是title、一個是name。所以我們必須想個方法讓module至換掉原本設定the_slug的這一行：</p><pre><code class="rb">  def generate_slug    the_slug = to_slug(title)    .    .    .  end</code></pre><p>class_attribute這個ruby語言獨有的特性可以幫助我們解決這個問題，簡單的說class_attribute可以讓屬性繼承給子class使用。所以我們先在剛剛建立的模組<code>sluggable.rb</code>中加入</p><pre><code class="rb">  include do    before_save :generates_slug!    class_attibute :slug_column  end</code></pre><p>接著在post.rb中加入</p><p>這樣一來就可以使用<code>post.slug_column</code>這個新的變數。</p><h3 id="4-新增類別方法sluggable-cloumn讓model能夠初始化slug-column"><a href="#4-新增類別方法sluggable-cloumn讓model能夠初始化slug-column" class="headerlink" title="4. 新增類別方法sluggable_cloumn讓model能夠初始化slug_column"></a>4. 新增類別方法sluggable_cloumn讓model能夠初始化slug_column</h3><pre><code class="rb">module Sluggable . . .  module ClassMethods    def sluggable_column(col_name)      self.slug_column = col_name    end  endend</code></pre><p>在Post中呼叫剛剛建立的<code>sluggable_column</code>方法，把title設成slug_column。</p><pre><code class="rb">class Post    .    .    sluggable_column :title    .    .end</code></pre><h3 id="5-置換欄位"><a href="#5-置換欄位" class="headerlink" title="5. 置換欄位"></a>5. 置換欄位</h3><pre><code class="rb">def generate_slug    the_slug = to_slug(title)    .    .    .end</code></pre><p>置換成</p><pre><code class="rb">def generate_slug    the_slug = to_slug(self.send(self.class.slug_column.to_sym))    .    .    .end</code></pre><p>這句是什麼意思呢？以Post為例來解析一下它的意思</p><ol><li><p><code>self.class</code>就是Post，所以變成了<code>self.send(Post.slug_column.to_sym)</code></p></li><li><p><code>Post.slug_column</code>我們在post中設定成<code>slug_column: title</code>所以變成了<code>self.send(&quot;title&quot;.to_sym)</code></p></li><li><p>title字串轉成symbol，變成<code>self.send(:title)</code></p></li><li><p>self我們可以想像成一個新增的post物件<code>post=Post.new</code>，置換後<code>post.send(:title)</code></p></li><li><p><code>post.send(:title)</code>就等同於post.(:title)就等同於<code>post.title</code>，我們成功的呼叫了<code>post.title</code>屬性！</p></li></ol><h3 id="6-有了the-slug之後我們就可以來置換post與Post"><a href="#6-有了the-slug之後我們就可以來置換post與Post" class="headerlink" title="6. 有了the_slug之後我們就可以來置換post與Post"></a>6. 有了the_slug之後我們就可以來置換post與Post</h3><ol><li>Post用self.class來取代</li><li>post用obj來取代 =&gt; <code>obj = self.class.find_by slug: the_slug</code></li></ol><pre><code class="rb">  def generate_slug!    the_slug = to_slug(self.send(self.class.slug_column.to_sym))   I obj = self.class.find_by slug: the_slug    count = 2    while obj &amp;&amp; obj != self      the_slug = append_suffix(the_slug, count)      obj = self.class.find_by slug: the_slug      count += 1    end    self.slug = the_slug.downcase    # self.slug = self.title.sub(&quot; &quot;,&quot;-&quot;).downcase # prefer the following    # self.slug = self.title.parameterize # rails way without gem  end</code></pre><h3 id="7-完成品"><a href="#7-完成品" class="headerlink" title="7. 完成品"></a>7. 完成品</h3><p>lib/slugabble.rb</p><pre><code class="rb">module Sluggable  extend ActiveSupport::Concern  # executes this code when included only once  included do    after_validation :generate_slug!    class_attribute :slug_column  end  def generate_slug!    the_slug = to_slug(self.send(self.class.slug_column.to_sym))    obj = self.class.find_by slug: the_slug    count = 2    while obj &amp;&amp; obj != self      the_slug = append_suffix(the_slug, count)      obj = self.class.find_by slug: the_slug      count += 1    end    self.slug = the_slug.downcase    # self.slug = self.title.sub(&quot; &quot;,&quot;-&quot;).downcase # prefer the following    # self.slug = self.title.parameterize # rails way without gem  end  def append_suffix(str, count)    if str.split(&#39;-&#39;).last.to_i != 0      return str.split(&#39;-&#39;).slice(0...-1).join(&#39;-&#39;) + &#39;-&#39; + count.to_s    else      return str + &#39;-&#39; + count.to_s    end  end  def to_slug(name)    str = name.strip    str.gsub! /\s*[^A-Za-z0-9]\s*/, &#39;-&#39;    str.gsub! /-+/, &#39;-&#39;    str.downcase  end  def to_param    self.slug  end  module ClassMethods    def sluggable_column(col_name)      self.slug_column = col_name    end  endend</code></pre><p>Post.rb</p><pre><code class="rb">class Post &lt; ActiveRecord::Base  include Sluggable  has_many :post_categories  has_many :categories, through: :post_categories  has_many :comments  sluggable_column :titleend</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demo：使用wow.js快速打造捲動式動畫網頁</title>
      <link href="/2015/10/22/old%20posts/2015-10-22-use-wowjs-to-quickly-create-scrolling-animation/"/>
      <url>/2015/10/22/old%20posts/2015-10-22-use-wowjs-to-quickly-create-scrolling-animation/</url>
      
        <content type="html"><![CDATA[<p>我用兩個不同方法個別製作出網站來讓大家比較看看：</p><p><a href="http://codingluka.github.io/CSS-Animation-Page-Demo/">純CSS打造捲動式動畫網站</a><br><a href="http://codingluka.github.io/wowjs-scroll-based-animation-/">wow.js打造的捲動式動畫網站</a></p><p>接著來介紹這wowjs的製作方法與其優缺點。</p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>第一步要做的是animate.css與wow.js載進網頁中。接著幫要使用動畫的部份加上<code>.wow .animate動畫名稱</code>屬性。wow.js用來負責偵測捲動到的位置，animate.css用來決定呈現的動畫。</p><p>HTML</p><pre><code class="html">  &lt;section class=&quot;wow slideInLeft&quot;&gt;&lt;/section&gt;  &lt;section class=&quot;wow slideInRight&quot;&gt;&lt;/section&gt;</code></pre><p>JavaScript</p><pre><code class="js">new WOW().init();</code></pre><p>就是這麼簡單。還有其他客製化的設定，不過彈性也不大，使用最基本的功能cp值最高。</p><h2 id="跟手工打造的CSS動畫的不同"><a href="#跟手工打造的CSS動畫的不同" class="headerlink" title="跟手工打造的CSS動畫的不同"></a>跟手工打造的CSS動畫的不同</h2><ul><li>wow.js + animate.css易於撰寫但彈性不大。</li><li>wow.js + animate.css 製作的動畫位置是預先設定好的。不能移動也不能重疊。</li><li>使用純CSS需要撰寫兩份CSS，一份是改變前的狀態，一份是改變後的狀態。而使用 wow.js + animate.css 只需要撰寫結束後的狀態，只要在div加上<code>.wow</code>與<code>.slideInLeft</code>等等的動畫名稱即可完成。撰寫的CSS少了許多。</li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>wow.js + animate.css 能夠打造的捲動式動畫角色很鮮明。但是彈性不大。如果要更加生動的畫面還是得自己設計CSS。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://daneden.github.io/animate.css/">Animate.css</a><br><a href="https://github.com/matthieua/WOW">matthieua/WOW</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demo：實作捲動觸發CSS動畫</title>
      <link href="/2015/10/20/old%20posts/2015-10-20-demo-implemented-scrolling-trigger-the-css-animation/"/>
      <url>/2015/10/20/old%20posts/2015-10-20-demo-implemented-scrolling-trigger-the-css-animation/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codingluka.github.io/CSS-Animation-Page-Demo/">demo</a></p><h2 id="第一部分：使用CSS撰寫Slide-In效果"><a href="#第一部分：使用CSS撰寫Slide-In效果" class="headerlink" title="第一部分：使用CSS撰寫Slide In效果"></a>第一部分：使用CSS撰寫Slide In效果</h2><p>這個單元使用的技巧有：</p><ol><li>使用<code>transition</code>讓屬性值改變時有動畫的效果</li><li>使用<code>animation-fill-mode</code>設定結束狀態</li><li>使用<code>transform:translate</code>移動元素</li></ol><h4 id="1-使用transition讓屬性值改變時有動畫的效果"><a href="#1-使用transition讓屬性值改變時有動畫的效果" class="headerlink" title="1. 使用transition讓屬性值改變時有動畫的效果"></a>1. 使用<code>transition</code>讓屬性值改變時有動畫的效果</h4><p>transition 可以將CSS改變的過程變成動畫。詳細玩一下<a href="http://www.w3schools.com/css/css3_transitions.asp">CSS3 Transitions</a>就懂了。</p><h4 id="2-使用animation-fill-mode設定結束狀態"><a href="#2-使用animation-fill-mode設定結束狀態" class="headerlink" title="2. 使用animation-fill-mode設定結束狀態"></a>2. 使用<code>animation-fill-mode</code>設定結束狀態</h4><p>animation-fill-mode 結束後的狀態</p><ul><li>none：默认值。不设置对象动画之外的状态</li><li>forwards：结束后保持动画结束时的状态，但当animation-direction为0，则动画不执行，持续保持动画开始时的状态</li><li>backwards：结束后返回动画开始时的状态</li><li>both：结束后可遵循forwards和backwards两个规则。</li></ul><h4 id="3-使用transform-translate移動元素"><a href="#3-使用transform-translate移動元素" class="headerlink" title="3. 使用transform:translate移動元素"></a>3. 使用<code>transform:translate</code>移動元素</h4><p>使用<code>transform: translate(x,y)</code>來移動元素。其他常用的還有：</p><ul><li>rotate(-20deg) 用來旋轉元素</li><li>scale(x,y) 等比例放大或縮小元素</li></ul><p>可以到W3C Scholl玩玩看<br><a href="http://www.w3schools.com/css/css3_2dtransforms.asp">CSS3 2D Transforms</a></p><h4 id="程式碼-CSS部分"><a href="#程式碼-CSS部分" class="headerlink" title="程式碼(CSS部分)"></a>程式碼(CSS部分)</h4><pre><code class="css">@-webkit-keyframes fadeIn &#123; from &#123; opacity:0; &#125; to &#123;opacity: 1;&#125; &#125;@-moz-keyframes fadeIn &#123; from &#123; opacity:0; &#125; to &#123;opacity: 1;&#125; &#125;@keyframes fadeIn &#123; from &#123; opacity:0; &#125; to &#123;opacity: 1;&#125; &#125;</code></pre><pre><code class="css">.animate&#123;    -moz-transition: 2s ease-in-out;    -webkit-transition: 2s ease-in-out;    transition: 2s ease-in-out;    -moz-animation: fadeIn ease-in 1;    -webkit-animation: fadeIn ease-in 1;    animation: fadeIn ease-in 1;    -webkit-animation-fill-mode: forwards;    -webkit-animation-fill-mode: forwards;    animation-fill-mode: forwards;    -webkit-animation-duration: 1s;    -moz-animation-duration: 1s;    animation-duration: 1s;&#125;</code></pre><pre><code class="css">#phone.animate &#123;    -webkit-transform: translate(14em,0);    -moz-transform: translate(14em,0);    transform: translate(14em,0);&#125;#monitor.animate &#123;    -webkit-transform: translate(3em,0);    -moz-transform: translate(3em,0);    transform: translate(3em,0);&#125;</code></pre><h4 id="程式碼-JS部分"><a href="#程式碼-JS部分" class="headerlink" title="程式碼(JS部分)"></a>程式碼(JS部分)</h4><p>用簡單的addClass方法即可完成。</p><pre><code class="js">$(function () &#123;    $(window).scroll(function () &#123;        var y = $(this).scrollTop();        if (y &gt; 300) &#123;             $(&#39;#monitor&#39;).addClass(&#39;animate&#39;);             $(&#39;#phone&#39;).addClass(&#39;animate&#39;);        &#125;;            .            .            .    &#125;);&#125;);</code></pre><h2 id="第二部分：使用CSS讓圖片永久旋轉"><a href="#第二部分：使用CSS讓圖片永久旋轉" class="headerlink" title="第二部分：使用CSS讓圖片永久旋轉"></a>第二部分：使用CSS讓圖片永久旋轉</h2><p>keyframe:用來編寫這個動畫的過程。設定好旋轉的動作命名為rotaRadial。</p><pre><code class="css"> @-webkit-keyframes rotateRadial &#123;     from &#123;         -webkit-transform: rotate(0deg);     &#125;     to &#123;         -webkit-transform: rotate(360deg);     &#125; &#125; @keyframes rotateRadial &#123;     from &#123;         transform: rotate(0deg);     &#125;     to &#123;         transform: rotate(360deg);     &#125; &#125;</code></pre><p>設定幾個參數來達到我們要的效果：</p><ol><li>動畫名稱指定剛剛創造的keyframe名稱<code>rotateRadial</code>。</li><li>完成一次動畫的時間設為10s秒。</li><li>永不停止。<code>animation-iteration-count: infinite;</code></li><li>將動畫轉變的加速曲線設為線性。<code>animation-timing-function: linear;</code></li></ol><pre><code class="css">.always-rotate&#123;    -webkit-animation-name: rotateRadial;    -webkit-animation-duration: 10s;    -webkit-animation-iteration-count: infinite;    -webkit-animation-timing-function: linear;    animation-name: rotateRadial;    animation-duration: 10s;    animation-iteration-count: infinite;    animation-timing-function: linear;&#125;</code></pre><h2 id="第三部分：讓圖片變大"><a href="#第三部分：讓圖片變大" class="headerlink" title="第三部分：讓圖片變大"></a>第三部分：讓圖片變大</h2><p>原本圖片的大小，設成0。</p><pre><code class="css">.anim-img&#123;    position: absolute;    left: 0;    opacity: 0;&#125;</code></pre><p>後來圖片的大小</p><pre><code class="css">img.grow-img&#123;    width: 200px;    height: 200px;&#125;</code></pre><p>用<code>.animate</code>設定了transition，因此會有動畫效果。</p><pre><code class="js">$(function () &#123;    $(window).scroll(function () &#123;        var y = $(this).scrollTop();        if (y &gt; 300) &#123;            $(&#39;#monitor&#39;).addClass(&#39;animate&#39;);            $(&#39;#phone&#39;).addClass(&#39;animate&#39;);        &#125;;        if(y &gt; 400)&#123;          $(&#39;#support&#39;).find(&#39;img&#39;).addClass(&#39;animate grow-img&#39;);          $(&#39;#speed&#39;).find(&#39;img&#39;).addClass(&#39;animate grow-img&#39;);          $(&#39;#smart&#39;).find(&#39;img&#39;).addClass(&#39;animate grow-img&#39;);        &#125;;    &#125;);&#125;);</code></pre><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p>大量範例展示CSS動畫可以做到的效果。</p><p><a href="http://learn.shayhowe.com/advanced-html-css/transitions-animations/">Transitions &amp; Animations - Learn to Code Advanced HTML &amp; CSS</a></p><p>MDN 的 CSS 動畫說明頁，有不少的範例可以玩。</p><p><a href="https://developer.mozilla.org/zh-TW/docs/CSS_%E5%8B%95%E7%95%AB">CSS 動畫  MDN</a></p><p>中文版的CSS字典</p><p><a href="http://css.doyoe.com/">CSS参考手册_web前端开发参考手册系列</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demo：使用scrollspy讓畫面更生動</title>
      <link href="/2015/10/19/old%20posts/2015-10-19-landing-page-implements-a/"/>
      <url>/2015/10/19/old%20posts/2015-10-19-landing-page-implements-a/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codingluka.github.io/Scollspy-Landing-Page/#who">Demo展示頁</a></p><h2 id="作法說明"><a href="#作法說明" class="headerlink" title="作法說明"></a>作法說明</h2><h3 id="1-幫body加工"><a href="#1-幫body加工" class="headerlink" title="1.幫body加工"></a>1.幫body加工</h3><p>將body加上<code>display: relative</code>，如果還是不行使用的話加上<code>width: 100%</code>與<code>height: 100%</code>。</p><pre><code class="css">display: relative;width: 100%;height: 100%;</code></pre><h3 id="2-宣告navbar並設定target"><a href="#2-宣告navbar並設定target" class="headerlink" title="2. 宣告navbar並設定target"></a>2. 宣告navbar並設定target</h3><p>使用js宣告target，這次我使用的target是整個navbar，用<code>.navbar-custom</code>來指定之，有需要的話可以調整offset修正navbar的觸發情形。</p><pre><code class="js">    $(document).ready(function()&#123;    $(&quot;body&quot;).scrollspy(&#123;        target: &quot;.navbar-custom&quot;,        offset: 370    &#125;)    &#125;);</code></pre><pre><code class="html">nav class=&quot;navbar navbar-default navbar-custom navbar-fixed-top&quot; role=&quot;navigation&quot;&gt;  &lt;div class=&quot;container&quot;&gt;    .    .    .  &lt;/div&gt;&lt;!-- /.container --&gt;&lt;/nav&gt;</code></pre><h3 id="3-設定個區塊的id，並關聯到導覽列的連結"><a href="#3-設定個區塊的id，並關聯到導覽列的連結" class="headerlink" title="3. 設定個區塊的id，並關聯到導覽列的連結"></a>3. 設定個區塊的id，並關聯到導覽列的連結</h3><p>每個區塊設定id，例如：</p><pre><code class="html">&lt;section class=&quot;client t-padding&quot; id=&quot;clients&quot;&gt;...&lt;/section&gt;</code></pre><p>幫導覽列的連結加上<code>href=&quot;#id&quot;</code></p><pre><code class="html">    &lt;div id=&quot;navbar&quot;class=&quot;collapse navbar-collapse navbar-right navbar-main-collapse&quot;&gt;      &lt;ul class=&quot;nav navbar-nav &quot;&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#why&quot;&gt;why us?&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#who&quot;&gt;who are we?&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#clients&quot;&gt;clients&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#contact&quot;&gt;contact&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;</code></pre><h3 id="Bonus-自行撰寫點擊導覽列連結就可以緩緩移動的JS"><a href="#Bonus-自行撰寫點擊導覽列連結就可以緩緩移動的JS" class="headerlink" title="Bonus. 自行撰寫點擊導覽列連結就可以緩緩移動的JS"></a>Bonus. 自行撰寫點擊導覽列連結就可以緩緩移動的JS</h3><p>將li加上<code>.page-scroll</code>的屬性，以便之後選取。</p><pre><code class="html">    &lt;div id=&quot;navbar&quot;class=&quot;collapse navbar-collapse navbar-right navbar-main-collapse&quot;&gt;      &lt;ul class=&quot;nav navbar-nav &quot;&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#why&quot;&gt;why us?&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#who&quot;&gt;who are we?&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#clients&quot;&gt;clients&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;page-scroll&quot;&gt;&lt;a href=&quot;#contact&quot;&gt;contact&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;</code></pre><p>當點擊到連結時，畫面會垂直位移到相對硬的區塊。</p><pre><code class="js">    $(&#39;.page-scroll &gt; a&#39;).click(function()&#123;        var $anchor = $(this);        $(&#39;html, body&#39;).stop().animate(&#123;            scrollTop: $($anchor.attr(&#39;href&#39;)).offset().top-100        &#125;, 1500, &#39;easeInOutExpo&#39;);        event.preventDefault();    &#125;);</code></pre><p>加上CSS的轉場效果，讓效果更漂亮。</p><pre><code class="css">.page-scroll&#123;   -moz-transition-property: -webkit-transform ;   -webkit-transition-property: -webkit-transform;   transition-property: -webkit-transform;   transition-duration: 1s;   -moz-transition-duration: 1s;     -webkit-transition-duration: 1s; &#125;</code></pre><h3 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h3><p><a href="http://getbootstrap.com/javascript/#scrollspy">JavaScript · Bootstrap</a></p><p><a href="http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/bootstrap-scrollspy.php">How to Create Bootstrap 3 Scrollspy - Tutorial Republic</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Landing Page 實作：來做個簡單的Jumbotron</title>
      <link href="/2015/10/19/old%20posts/2015-10-19-dynamic-landing-page-1-jumbotron-make/"/>
      <url>/2015/10/19/old%20posts/2015-10-19-dynamic-landing-page-1-jumbotron-make/</url>
      
        <content type="html"><![CDATA[<p>製作jumbotron有兩個重點</p><ol><li>垂直置中</li><li>設定背景。</li></ol><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><ul><li>設定<code>position: center bottom</code>讓圖片顯示出需要的區塊</li><li>使用<code>background-size: cover;</code>讓圖片滿版</li></ul><pre><code class="css">section.intro&#123;  padding: $baseline * 2;  background-image: url(&#39;../images/intro-bg.jpg&#39;) ;  background-position: center bottom;  height: 100%;  width: 100%;  -moz-background-size :cover ;  -webkit-background-size :cover ;  background-size: cover;  background-attachment: scroll;&#125;</code></pre><h3 id="複習背景的用法"><a href="#複習背景的用法" class="headerlink" title="複習背景的用法"></a>複習背景的用法</h3><p>背景的屬性：</p><ul><li>background-repeat，常用的是<code>no-repeat</code></li><li>background-attachment，有fixed和scroll兩種，fixed圖片不會動，只有轉的空間會動。</li><li>background-position</li></ul><p>left 為水平靠左， right 為水平靠右， top 為垂直置頂， bottom 為垂直置底center 則是水平或垂直都置中。</p><p>前後需設定兩組，若是數字或百分比前為水平後為垂直，若是關鍵字則順序無關，例如</p><pre><code class="css">background-position: 25% 50%;      /* 水平 25% ，垂直 50% */background-position: 50px 25px;    /* 水平 50px ，垂直 25px */background-position: center;       /* 水平垂直都 50% */background-position: bottom right; /* 水平 100% ，垂直 100% */</code></pre><h2 id="使用Table-cell水平置中"><a href="#使用Table-cell水平置中" class="headerlink" title="使用Table-cell水平置中"></a>使用Table-cell水平置中</h2><ol><li>外層display設成table</li><li>內層display設成table-cell，並加上<code>vertical-align: middel</code>即可</li></ol><p>這種方法的優點是用起來很簡單，缺點是會增加html複雜度。</p><pre><code class="html">&lt;section class=&quot;intro&quot;&gt;  &lt;div class=&quot;intro-body&quot;&gt;    &lt;div class=&quot;container t-padding&quot;&gt;      &lt;div class=&quot;row text-center&quot;&gt;        &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;          &lt;h1&gt;welcome&lt;/h1&gt;          &lt;h3&gt;&lt;strong&gt;Digital Agency&lt;/strong&gt; is here all of your technology, advertising, SEO and marketing needs.&lt;/h3&gt;        &lt;/div&gt;&lt;!-- col-md-8 offset-2 --&gt;      &lt;/div&gt;&lt;!-- row --&gt;    &lt;/div&gt;&lt;!-- container --&gt;  &lt;/div&gt;&lt;!-- intro-body --&gt;&lt;/section&gt;&lt;!-- intro --&gt;</code></pre><pre><code class="css">.intro&#123;  display: table;&#125;.intro-body&#123;  display: table-cell;  vertical-align: middle;&#125;</code></pre><h2 id="置中小整理"><a href="#置中小整理" class="headerlink" title="置中小整理"></a>置中小整理</h2><ol><li>table-cell可以用在jumbotron這種結構較單純的區塊上，因為使用這種方式會增加html的複雜度。</li><li>單行多個置中可以使用偽元素的技巧</li><li>css3的技巧雖然很方便，但支援度可以能沒那麼高。</li><li>行高的技巧簡單易用，但只能用在文字上。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github展示靜態網頁</title>
      <link href="/2015/10/12/old%20posts/2015-10-12-use-github-show-static-pages/"/>
      <url>/2015/10/12/old%20posts/2015-10-12-use-github-show-static-pages/</url>
      
        <content type="html"><![CDATA[<p>這篇很簡短，但還是筆記一下怎麼用，因為網路上找的資料有點繁雜。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>github的gh-pages分支可以用來展示靜態網頁，推上去就可以正確展示了。</p><h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><ol><li>建立新的branch<code>git branch gh-pages</code></li><li>推上github<code>git push origin gh-pages</code></li><li>需要注意的是首頁要命名為index.html</li><li>到<code>[github name].github.io/[repository name]</code>網址查看，你的網頁已經展示在這個網址。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demo：使用Matirialize框架實現視差滾動</title>
      <link href="/2015/10/12/old%20posts/2015-10-12-practice-using-the-matirialize-framework-parallax-scrolling/"/>
      <url>/2015/10/12/old%20posts/2015-10-12-practice-using-the-matirialize-framework-parallax-scrolling/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codingluka.github.io/matirialize_parral_design/">完成品展示頁</a></p><p>Materialize 是除了 Bootstrap 以外現今相當熱門的前端框架，可以製作的網頁類型相當廣泛，未來將使用 Materialize 來開發一些小作品，是今天練習的主要目的。</p><h2 id="實現Materialize框架提供的視差滾動效果"><a href="#實現Materialize框架提供的視差滾動效果" class="headerlink" title="實現Materialize框架提供的視差滾動效果"></a>實現Materialize框架提供的視差滾動效果</h2><p>視差滾動的效果由materialize提供的<a href="http://materializecss.com/parallax.html">Parallax JS 套件</a>來完成，效果可以讓圖片滿板，並且有視差效果。步驟如下：</p><ol><li>自行撰寫<code>.parallax-container</code>包覆需要跟圖片有視差效果的區域。</li><li>第二層的最下方加上<code>.parallax</code>並包覆圖片即可完成視差效果。</li></ol><pre><code class="html">&lt;section class=&quot;slogan-section  margin-bottom parallax-container valign-wrapper &quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;h3 class=&quot;center-align slogan-description&quot;&gt;A modern responsive front-end framework based on Material Design&lt;/h3&gt;    &lt;/div&gt;&lt;!-- container --&gt;    &lt;div class=&quot;parallax&quot;&gt;&lt;img src=&quot;images/background2.jpg&quot; alt=&quot;Unsplashed background img 2&quot;&gt;&lt;/div&gt;&lt;/section&gt;&lt;!-- slogan --&gt;</code></pre><pre><code class="css"> .parallax-container &#123;     min-height: 380px;     line-height: 0;     height: auto;     color: rgba(255,255,255,.9);     position: relative;     overflow: hidden; &#125;</code></pre><h3 id="其他學習記錄"><a href="#其他學習記錄" class="headerlink" title="其他學習記錄"></a>其他學習記錄</h3><ol><li><p>一般區塊的垂直置中使用materialize的valign-wrapper來達到垂直置中的效果。</p></li><li><p>Footer使用width+line-height的垂直置中技巧。垂直置中的對象必須是外層的<code>footer.copyright</code>，包在container裡面會造成多餘的空白。</p></li><li><p>修飾某些元件時除了class名稱以外，需加上元件名稱，來解決沒有蓋過原本framework的CSS的問題。例如：使用<code>.footer-copyright</code>無法順利設定背景顏色，但若改成<code>footer.footer-copryright</code>則可以順利完成。</p></li><li><p>如果有以下的突出狀況，可以加上<code>overflow: hidden;</code>即可解決。<br><img src="https://lh3.googleusercontent.com/Ng8tF0ab5j9ciT522tYNr1hKUWkKu4N43ZZUImQx3_SUUHjK3XguW1xfHHMebWExf6TG-acW7EunFVLkqJ0zfCD9Hng-99xCbVQrEfTEGE1O00vi6qVGHJvtH5LZSgPUx1vyrsfPAWs-WoSnjgmN2m0L_HCbNFDhJ5FV2qvyhPhO8u4HJcEiycl6MP4Vz-p7j284-oOCCY3nAsFAdbN6486y3lrDXVuw81qGpLxiW44IQjB1oSXPLj1KNbowTgLK3Cpj_KcsEtrNmrDDOpWpNpSdsJn4vGKMKl9ITgrhVofbNM2T0wMW3kCTM5NIVs2oqdE0Mi3LCIKFYJAH0q4jXvouJFywxpRkpi1svOlciNwbFHKInPwKDsojqkkEzsORXKayKj95i3jf_8puXH_RPuJzc8lBpXZT5l1Eyb221f3istv0nB3CUt4eedfBDsYh0O-doVyhVb8C2B2wByYDPaYqjEIt8wY7L1HsyB9MgKid8kSouDKZNJK4rBXrLFcVaIRBksKvOybB3v-TnSedyXkIGucdDNIn7tIDBzEDH40=w1084-h468-no"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Status Code In Rails</title>
      <link href="/2015/10/10/old%20posts/2015-10-10-http-status-code-in-rails/"/>
      <url>/2015/10/10/old%20posts/2015-10-10-http-status-code-in-rails/</url>
      
        <content type="html"><![CDATA[<p>Rails將這些HTTP Status定義成有意義的單字。讓我們可以在使用的時候減少因為背錯而發生錯誤的機率。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>用symbol加上單字即可取代原本的HTTP Status Code(500)</p><pre><code class="rb">render status: 500render status: :forbidden</code></pre><h3 id="這些Symbol其實定義在Rack中"><a href="#這些Symbol其實定義在Rack中" class="headerlink" title="這些Symbol其實定義在Rack中"></a>這些Symbol其實定義在Rack中</h3><p><a href="https://github.com/rack/rack/blob/master/lib/rack/utils.rb#L452-L515">原始碼 rack/utils.rb</a></p><pre><code class="rb">    HTTP_STATUS_CODES = &#123;    # Informational      100 =&gt; &#39;Continue&#39;,      101 =&gt; &#39;Switching Protocols&#39;,      102 =&gt; &#39;Processing&#39;,    # Success      200 =&gt; &#39;OK&#39;,      201 =&gt; &#39;Created&#39;,      202 =&gt; &#39;Accepted&#39;,      203 =&gt; &#39;Non-Authoritative Information&#39;,      204 =&gt; &#39;No Content&#39;,      205 =&gt; &#39;Reset Content&#39;,      206 =&gt; &#39;Partial Content&#39;,      207 =&gt; &#39;Multi-Status&#39;,      208 =&gt; &#39;Already Reported&#39;,      226 =&gt; &#39;IM Used&#39;,    # Redirection      300 =&gt; &#39;Multiple Choices&#39;,      301 =&gt; &#39;Moved Permanently&#39;,      302 =&gt; &#39;Found&#39;,      303 =&gt; &#39;See Other&#39;,      304 =&gt; &#39;Not Modified&#39;,      305 =&gt; &#39;Use Proxy&#39;,      307 =&gt; &#39;Temporary Redirect&#39;,      308 =&gt; &#39;Permanent Redirect&#39;,    # Client Error      400 =&gt; &#39;Bad Request&#39;,      401 =&gt; &#39;Unauthorized&#39;,      402 =&gt; &#39;Payment Required&#39;,      403 =&gt; &#39;Forbidden&#39;,      404 =&gt; &#39;Not Found&#39;,      405 =&gt; &#39;Method Not Allowed&#39;,      406 =&gt; &#39;Not Acceptable&#39;,      407 =&gt; &#39;Proxy Authentication Required&#39;,      408 =&gt; &#39;Request Timeout&#39;,      409 =&gt; &#39;Conflict&#39;,      410 =&gt; &#39;Gone&#39;,      411 =&gt; &#39;Length Required&#39;,      412 =&gt; &#39;Precondition Failed&#39;,      413 =&gt; &#39;Payload Too Large&#39;,      414 =&gt; &#39;URI Too Long&#39;,      415 =&gt; &#39;Unsupported Media Type&#39;,      416 =&gt; &#39;Range Not Satisfiable&#39;,      417 =&gt; &#39;Expectation Failed&#39;,      421 =&gt; &#39;Misdirected Request&#39;,      422 =&gt; &#39;Unprocessable Entity&#39;,      423 =&gt; &#39;Locked&#39;,      424 =&gt; &#39;Failed Dependency&#39;,      426 =&gt; &#39;Upgrade Required&#39;,      428 =&gt; &#39;Precondition Required&#39;,      429 =&gt; &#39;Too Many Requests&#39;,      431 =&gt; &#39;Request Header Fields Too Large&#39;,    # Server Error      500 =&gt; &#39;Internal Server Error&#39;,      501 =&gt; &#39;Not Implemented&#39;,      502 =&gt; &#39;Bad Gateway&#39;,      503 =&gt; &#39;Service Unavailable&#39;,      504 =&gt; &#39;Gateway Timeout&#39;,      505 =&gt; &#39;HTTP Version Not Supported&#39;,      506 =&gt; &#39;Variant Also Negotiates&#39;,      507 =&gt; &#39;Insufficient Storage&#39;,      508 =&gt; &#39;Loop Detected&#39;,      510 =&gt; &#39;Not Extended&#39;,      511 =&gt; &#39;Network Authentication Required&#39;    &#125;</code></pre><p>還是不知道從何下手記憶嘛？來看保哥已經整理好一篇完整的HTTP Status Code文章囉^^</p><p><a href="http://blog.miniasp.com/post/2009/01/16/Web-developer-should-know-about-HTTP-Status-Code.aspx">The Will Will Web 網頁開發人員應了解的 HTTP 狀態碼</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom殺手級套件介紹</title>
      <link href="/2015/07/22/old%20posts/2015-07-22-introduce-atoms-killer-packages/"/>
      <url>/2015/07/22/old%20posts/2015-07-22-introduce-atoms-killer-packages/</url>
      
        <content type="html"><![CDATA[<p>這次來介紹兩個殺手級套件，以及其他的輔助的畫面跳躍套件來完善atom快速鍵不足的地方。</p><h2 id="jumpy"><a href="#jumpy" class="headerlink" title="jumpy"></a>jumpy</h2><p>運用他你可以快速的跳躍到畫面中程式的任何一個地方，只需按下<code>shift + enter</code>。</p><p><img src="https://raw.githubusercontent.com/DavidLGoldberg/jumpy/master/_images/jumpy.gif"></p><p>如果你使用<code>atom-Material-UI</code>這個套件的話可能畫面會變得像這樣。</p><p><img src="https://lh3.googleusercontent.com/9vKXOSspuvaV4E6TsUFCEaNluWj0qcFVOrCds6qR5Bs=w1326-h824-no"></p><p>這時候在選單列選擇 atom &gt; open your style sheet，加入以下內容，即可改善。</p><pre><code class="css">atom-text-editor::shadow .jumpy &#123;    &amp;.label &#123;      opacity: 0.75;      color: black;      font-weight: bold;    &#125;    &amp;.jump &#123;    &#125;&#125;</code></pre><p>完成畫面如下。已經修好了！</p><p><img src="https://lh3.googleusercontent.com/IiOtg6wwvK7g_djMrapIKf94EO52Pc-tCiMrcJsfi7I=w1196-h869-no"></p><p>你也可以編寫自己喜歡的樣式。enjoy it!</p><h2 id="multi-cursor"><a href="#multi-cursor" class="headerlink" title="multi-cursor"></a>multi-cursor</h2><p>接下來介紹第二個殺手級應用<code>multi-cursor</code>，這個套件用的人不多，但是我覺得非常的實用。按下<code>alt + shift + cmd + up or down</code>就等於用滑鼠一一點擊多行，同時新增相同的內容。<br><img src="https://camo.githubusercontent.com/c6b86d97d1f83b748a51af958dd84ed8804e1808/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f662e636c2e6c792f6974656d732f32583339334d31753147304b305a3036314f30302f6d756c74692d637572736f722e676966"></p><h2 id="基礎篇沒有提到「垂直跳躍」"><a href="#基礎篇沒有提到「垂直跳躍」" class="headerlink" title="基礎篇沒有提到「垂直跳躍」"></a>基礎篇沒有提到「垂直跳躍」</h2><p>垂直跳躍可以使用幾個套件來達到。第一個介紹的套件是<code>Indentation Jumper</code>，他的效果是在同樣位置的開頭中跳躍。</p><p><img src="https://i.github-camo.com/547e228420651b4cb6aaab55af668144d7aa5b7f/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3335313539312f323637333030302f63343762636661322d633065642d313165332d396332662d3365646565646164626135612e676966"></p><p>另一個介紹的套件是<code>line-jumper</code>。按下<code>alt + up or down</code>就可以跳躍10行，行數可以依照個人喜好調整。</p><p><img src="https://camo.githubusercontent.com/84af716d9da695bd2cf499b5b4cb77a37b984006/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f36393136392f323237343535312f64623565613764362d396631642d313165332d393065372d6136366430653039613032632e676966"></p><p>配合之前基礎篇介紹的<code>alt+left or right</code>和<code>cmd + left or right</code>可以應付絕大多數寫程式需要的情況。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>這篇是atom快速上手系列的第二篇，看完本篇與基礎篇之後已經能應付大多數的情況。第三篇會介紹的是如何使用Key Binding Resolver觀察快速鍵，並進而修改成自己慣用的快速鍵。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Text Editor </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby中冒號開頭Symbol與&amp;:to_s用法解釋</title>
      <link href="/2015/07/16/old%20posts/2015-07-16-ruby-colons-at-the-beginning-of-the-variable-symbol/"/>
      <url>/2015/07/16/old%20posts/2015-07-16-ruby-colons-at-the-beginning-of-the-variable-symbol/</url>
      
        <content type="html"><![CDATA[<p>本篇介紹Ruby中特有的寫法，將解答<code>&amp;:to_s</code>和<code>:symbol</code>這兩種寫法的意義。並依序介紹以下議題：</p><h3 id="Symbol和String的不同之處"><a href="#Symbol和String的不同之處" class="headerlink" title="Symbol和String的不同之處"></a>Symbol和String的不同之處</h3><p>分別宣告兩個symbol與string。</p><pre><code>[22] pry(main)&gt; sym = :abc=&gt; :abc[23] pry(main)&gt; str = &quot;abc&quot;=&gt; &quot;abc&quot;[24] pry(main)&gt; sym2 = :abc=&gt; :abc[25] pry(main)&gt; str2 = &quot;abc&quot;=&gt; &quot;abc&quot;</code></pre><p>用object_id來看看是否為同一個物件。從下面結果可以發現，在參照同樣的symbol<code>:abc</code>時，不同的變數參考的是同一個物件。而String參考的物件是不同的。</p><pre><code>[26] pry(main)&gt; sym.object_id=&gt; 1172168[28] pry(main)&gt; sym2.object_id=&gt; 1172168[29] pry(main)&gt; str.object_id=&gt; 70232488314360[30] pry(main)&gt; str2.object_id=&gt; 70232505015640[31] pry(main)&gt;</code></pre><h3 id="all-symbols-與-include-搭配運用"><a href="#all-symbols-與-include-搭配運用" class="headerlink" title="all_symbols 與 include? 搭配運用"></a>all_symbols 與 include? 搭配運用</h3><p>在終端機輸入<code>Symbol.all_symbols</code>可以列出目前所有的Symbol。</p><pre><code>[34] pry(main)&gt; Symbol.all_symbols=&gt; [:freeze, :inspect, :intern, :object_id, :const_missing, :method_missing, :method_added, :singleton_method_added, :method_removed, :singleton_method_removed, :method_undefined, :singleton_method_undefined, :length, :size, :gets, :succ, :each, :proc, :lambda, :send, :__send__, :__attached__, :initialize, . . .</code></pre><p>我們把用all_symbols取出的陣列用變數<code>symbols</code>存起來。這樣我們就可以用<code>include?</code>來檢查某個symbol是否已經宣告。</p><pre><code>[23] pry(main)&gt; all_symbols.include?(:sym)=&gt; true# :sym是系統預設的所以顯示true[24] pry(main)&gt; all_symbols.include?(:abc)=&gt; false# :abc是我亂輸入的所以顯示false[25] pry(main)&gt;</code></pre><h3 id="amp-to-s的用法與原理"><a href="#amp-to-s的用法與原理" class="headerlink" title="&amp;:to_s的用法與原理"></a><code>&amp;:to_s</code>的用法與原理</h3><p>以下兩個寫法效果相同，<code>:</code>代表一個Symbol，當Symbol遇上<code>&amp;</code>符號時，會把<code>to_s</code>方法轉變為proc，而是否能轉變為proc則是看Class中有沒有<code>to_proc</code>方法，這是ruby中的duck typing特性所致。我會另外寫一篇來說明duck typing是如何運作。</p><pre><code>[72] pry(main)&gt; [1,2,3,4].map(&amp;:to_s)=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;][73] pry(main)&gt; [1,2,3,4].map&#123;|i| i.to_s&#125;=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</code></pre><h3 id="String、Symbol和Integer的互相轉換"><a href="#String、Symbol和Integer的互相轉換" class="headerlink" title="String、Symbol和Integer的互相轉換"></a>String、Symbol和Integer的互相轉換</h3><p>Symbol可以轉換成String</p><pre><code>[74] pry(main)&gt; :a.to_s=&gt; &quot;a&quot;</code></pre><p>String可以轉換成Symbol</p><pre><code>[75] pry(main)&gt; &quot;a&quot;.to_sym=&gt; :a</code></pre><p>Fixnum(數字的類別)不能轉換成Symbol，會出現錯誤。</p><pre><code>[76] pry(main)&gt; 1.to_symNoMethodError: undefined method `to_sym&#39; for 1:Fixnumfrom (pry):98:in `__pry__&#39;</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>誘人的ruby-符號篇</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>練習：使用SASS開發Portfolio (1) Header 與 Footer</title>
      <link href="/2015/06/04/old%20posts/2015-06-04-psd-to-html-practice-using-sass-development-portfolio/"/>
      <url>/2015/06/04/old%20posts/2015-06-04-psd-to-html-practice-using-sass-development-portfolio/</url>
      
        <content type="html"><![CDATA[<h2 id="標題列-Header"><a href="#標題列-Header" class="headerlink" title="標題列(Header)"></a>標題列(Header)</h2><h3 id="固定的標題"><a href="#固定的標題" class="headerlink" title="固定的標題"></a>固定的標題</h3><p><img src="https://lh3.googleusercontent.com/dVVKl8lHg0M4TExKiNyp_TeO6saBUx15ljAfVI-0ipQ=w903-h346-no"></p><p>往下捲動時仍然會固定在上方</p><p><img src="https://lh3.googleusercontent.com/y0v7AtVVUbhYHDjl6v5qT1Rd_aGmdSbRHL8F8uSdz4Y=w907-h429-no"></p><p>幫header加上<code>position: fixed</code>可以做到這個效果。透明的效果則是使用<code>background: rgba(0, 0, 0, 0.8)</code>。</p><h3 id="標題列的水平置中"><a href="#標題列的水平置中" class="headerlink" title="標題列的水平置中"></a>標題列的水平置中</h3><p>這邊使用的水平置中技巧是使用<a href="http://www.oxxostudio.tw/articles/201408/css-vertical-align.html">CSS 垂直置中的3種方法</a>中的**設定行高(line-height)**的方法。</p><p>而行高我們可以在_typography.scss中統一設置，typography.scss顧名思義就是用來處理一些排版的問題，常見的設定有body、anchor、paragraph和header等等常用到的東西。如果沒有使用scss的習慣，可以利用註解區隔出一個專門處理排版的區域。</p><pre><code class="scss">body &#123;    color: $color-text;    font: $body-font-size~&quot;/&quot;$baseline $body-font;    -webkit-font-smoothing: antialiased;&#125;</code></pre><p>font 的使用方法可以看看CSS官方文件</p><pre><code class="css">/* Set the font size to 12px and the line height to 14px. Set the font family to sans-serif */p &#123; font: 12px/14px sans-serif &#125;</code></pre><p>第一個欄位為font-size，而第二個則為行高。但其實我們不是完全的利用行高來達成，還有設定header的padding來幫助我們實現置中。因為要置中的不全部是文字，還有其他的元素例如ul需要考慮。</p><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><h3 id="重疊效果製作"><a href="#重疊效果製作" class="headerlink" title="重疊效果製作"></a>重疊效果製作</h3><p>我們要把信封圖案置中並且讓信封圖案在背景的中間。還未做任何修飾的時候如下：<br><img src="https://lh3.googleusercontent.com/gSZf80g6aWX0x59JGNa5lSmM1HusPvz0rjQdHv25xrU=w545-h215-no"><br>要怎麼做重疊的效果呢？很簡單，把下方的<code>.section-subscribe</code>加上負的margin即可。</p><pre><code class="rb">.section-subscribe&#123;    margin-top: -18px;&#125;</code></pre><p>加上後的效果如下：</p><p><img src="https://lh3.googleusercontent.com/OixTFiR5im7GI263YaQZAZFRXbXNgAd029pdnWuGD80=w748-h212-no"></p><h3 id="讓段落置中"><a href="#讓段落置中" class="headerlink" title="讓段落置中"></a>讓段落置中</h3><p>我想讓段落分行並置中，所以我要做兩件事情：第一件事情是我要設定段落的寬度為<code>65%</code>第二件事情我要利用margin來讓段落置中。想要做到的效果：</p><p><img src="https://lh3.googleusercontent.com/nVx8qy43AgvV3FpPZr129nM97iEo8G2HUc31z_Ubh-A=w1013-h73-no"></p><pre><code class="scss">.section-subscribe&#123;  p&#123;    margin: 0 auto;    color: #fff;    width: 65%;  &#125;&#125;</code></pre><p>需要注意是<code>display</code>為<code>block</code>才能使用<code>margin:auto</code>的方式置中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 SMACSS 製作button</title>
      <link href="/2015/06/03/old%20posts/2015-06-03-making-a-button-by-using-sass/"/>
      <url>/2015/06/03/old%20posts/2015-06-03-making-a-button-by-using-sass/</url>
      
        <content type="html"><![CDATA[<h2 id="module抽離出常用元件，負責大致的外觀"><a href="#module抽離出常用元件，負責大致的外觀" class="headerlink" title="module抽離出常用元件，負責大致的外觀"></a>module抽離出常用元件，負責大致的外觀</h2><p>SMACSS是Jonathan Snook所發表的一個CSS/SASS的設計模式。在製作button時我們會把它放在<code>module</code>資料夾底下，並存成檔名為_btn.scss。在modules資料夾中的_btn.scss裡面撰寫Button的外觀，需要注意的是<strong>不包含顏色和其他特效</strong>。這樣是為了將顏色和細部調整放到之後的_theme.scss檔案中做調整。為什麼要這樣做呢？這樣做可以在有多個佈景主題的時候很方便的切換。也比較知道現在在這個檔案我要做哪些事情。不會一堆css碼做了什麼事情要一一去解讀。</p><p><code>modules/_btn.scss</code>負責大致上的外觀</p><pre><code class="scss">.btn &#123;    display: inline-block;    height: 3rem;    padding: 0 1rem;    outline: none;    border: 1px solid;    font-size: 1.125rem;    @include border-radius(3px);&#125;</code></pre><p>完成圖片</p><p><img src="https://lh3.googleusercontent.com/nlDElyGFFKjzH0IcnR_6NMW1idUKClgZ_mHMUm0nd6s=w177-h49-no"></p><h2 id="theme負責顏色、陰影…等佈景主題需要的修飾"><a href="#theme負責顏色、陰影…等佈景主題需要的修飾" class="headerlink" title="theme負責顏色、陰影…等佈景主題需要的修飾"></a>theme負責顏色、陰影…等佈景主題需要的修飾</h2><p>在<code>theme/_theme.scss</code>中將按鈕的顏色、陰影效果、hover效果補上。因為主題可能有多個，所以我們抽離出來撰寫。以後想要加上別的主題的時候CSS碼就步會搞的很混亂。</p><pre><code class="scss">/* Buttons */.btn &#123;    background-color: $color-1;    color: $color-text;    border-color: darken($color-1, 20%);    @include box-shadow(0 -2px 0 0 darken($color-1, 20%) inset);    &amp;:hover &#123;        background-color: darken($color-1, 5%);    &#125;&#125;.btn-primary &#123;    background-color: $color-link;    color: #fff;    border-color: darken($color-link, 20%);    @include box-shadow(0 -2px 0 0 darken($color-link, 20%) inset);    &amp;:hover &#123;        background-color: darken($color-link, 5%);    &#125;&#125;.btn-secondary &#123;    background-color: $color-2;    color: #fff;    border-color: darken($color-2, 20%);    @include box-shadow(0 -2px 0 0 darken($color-2, 20%) inset);    &amp;:hover &#123;        background-color: darken($color-2, 5%);    &#125;&#125;</code></pre><p>使用的技巧有</p><ol><li>利用<code>box-shadow</code>來製造陰影效果</li><li>box-shadow的顏色使用compass的darken函式來完成。使用方法是<code>darken($color-2, 5%)</code>，第一個參數是要跟黑色混和的顏色，第二個參數是要混和的比例。</li></ol><p>完成畫面</p><p><img src="https://lh3.googleusercontent.com/tGXeVpBNfHcKUYZ3KlSDG0YHtsZu9ApomgC3VnH6mBc=w210-h62-no"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SASS 的 @import @mixin @content @extend 與 @function</title>
      <link href="/2015/06/01/old%20posts/2015-06-01-sass/"/>
      <url>/2015/06/01/old%20posts/2015-06-01-sass/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Import"><a href="#1-Import" class="headerlink" title="1.Import"></a>1.Import</h2><p>SASS在檔名前面加上底線時，不會直接編譯成CSS，使用@import引入後，才會編譯。</p><h2 id="2-Mixins"><a href="#2-Mixins" class="headerlink" title="2. Mixins"></a>2. Mixins</h2><p>常見的mixin作法，要傳入的引數前面需加上<code>$</code>字號。</p><pre><code class="scss">/* Mixins */@mixin border-radius($radius: 10px) &#123;    -webkit-border-radius: $radius;    -moz-border-radius: $radius;    border-radius: $radius;&#125;@mixin large-font &#123;    font-size: 200%;&#125;</code></pre><p>使用時，輸入<code>@include mixins_name</code>即可引入CSS程式碼。</p><h3 id="nested-mixin"><a href="#nested-mixin" class="headerlink" title="nested mixin"></a>nested mixin</h3><p>mixin中也可以＠include mixin</p><pre><code class="scss">@mixin hero-unit &#123;    @include border-radius;    @include large-font;&#125;</code></pre><p>實際來用用看</p><pre><code class="scss">.box &#123;    @include hero-unit;&#125;.container &#123;    @include border-radius(5px);&#125;</code></pre><h3 id="撰寫可以傳入不定數量引數-arguments-的mixin"><a href="#撰寫可以傳入不定數量引數-arguments-的mixin" class="headerlink" title="撰寫可以傳入不定數量引數(arguments)的mixin"></a>撰寫可以傳入不定數量引數(arguments)的mixin</h3><p>使用<code>$args...</code>作為參數就可以傳入不定數量的arguments。</p><pre><code class="scss">/* Mixins with variable arguments... */@mixin box-shadow($args...) &#123;    -webkit-box-shadow: $args;    -moz-box-shadow: $args;    box-shadow: $args;&#125;</code></pre><p>現在你可以用<code>@include mixin</code>來節省程式碼了:D</p><pre><code class="scss">.box-2 &#123;    @include box-shadow(0 0 3px #333, inset 5px 5px 5px red);&#125;</code></pre><h2 id="3-content"><a href="#3-content" class="headerlink" title="3. content"></a>3. content</h2><p><code>@content</code> 的功用讓mixin可以撰寫自定的程式碼</p><h2 id="4-Functions"><a href="#4-Functions" class="headerlink" title="4. Functions"></a>4. Functions</h2><p><code>@function</code>與<code>@mixin</code>的不同之處在於<code>@function</code>只會回傳一個值，而<code>@mixin</code>是回傳一段CSS程式碼。宣告Function時以<code>@function開頭</code>：</p><pre><code class="scss">@function pxToEm($px, $base: 16) &#123;  @return ($px / $base) * 1em;&#125;</code></pre><p>使用Function時前面不需要加上<code>@</code>。</p><pre><code class="scss">p&#123;    font-size:pxToEm(20);&#125;</code></pre><p>編譯後</p><pre><code class="css">p &#123;  font-size: 1.25em;&#125;</code></pre><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>幾點需要注意：</p><ul><li><code>@import</code>用來引入開頭為底線的SCSS檔案。如：_layout.scss。</li><li>mixin可以傳入配變數，使用時語法為<code>@include mixins_name</code>使用。</li><li>mixin搭配<code>@content</code>使用，讓mixin可以輸入自定的程式碼。</li><li><code>@extend</code>用來讓重複的程式碼只需要撰寫一次，裡面不可以傳入變數。</li><li>function使用時不需加上@，不熟悉的話可能會與CSS原本的property搞錯，需要特別注意。</li></ul><p>有了這些基本知識就可以進一步的學習SASS與Compass了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>細讀 Bootstrap 3 文件</title>
      <link href="/2015/03/15/old%20posts/2015-03-15-bootstrap-note-preface-cheetsheet/"/>
      <url>/2015/03/15/old%20posts/2015-03-15-bootstrap-note-preface-cheetsheet/</url>
      
        <content type="html"><![CDATA[<p>使用Bootstrap好一段時間了，卻沒有好好的把官方文件讀過一遍，雖然寫的出來但是速度不盡理想，所以這兩天花些時間將幾個不太理解的常用元件與一些以前有使用到卻不太了解的data-attribute用法寫下筆記，好提高生產力。</p><h2 id="Part-1-Navbar"><a href="#Part-1-Navbar" class="headerlink" title="Part 1: Navbar"></a>Part 1: Navbar</h2><p>這是一個bootstrap官網上的完整navbar範例。</p><pre><code class="html">&lt;nav class=&quot;navbar navbar-default|navbar-inverse&quot;&gt;  &lt;div class=&quot;container-fluid&quot;&gt;    &lt;!-- Brand and toggle get grouped for better mobile display --&gt;    &lt;div class=&quot;navbar-header&quot;&gt;      &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;        &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;      &lt;/button&gt;      &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Brand&lt;/a&gt;    &lt;/div&gt;    &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;      &lt;ul class=&quot;nav navbar-nav&quot;&gt;        &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Link &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;dropdown&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot;&gt;Dropdown &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;          &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt;            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link&lt;/a&gt;&lt;/li&gt;          &lt;/ul&gt;        &lt;/li&gt;      &lt;/ul&gt;      &lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot;&gt;        &lt;div class=&quot;form-group&quot;&gt;          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt;        &lt;/div&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;      &lt;/form&gt;      &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;dropdown&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot;&gt;Dropdown &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;          &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt;            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;          &lt;/ul&gt;        &lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;  &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt;</code></pre><h4 id="外部的nav"><a href="#外部的nav" class="headerlink" title="外部的nav"></a>外部的nav</h4><p>navbar的外部由nav包覆，但是這樣的作法其實不太妥當，因為有時候navbar中的元素並不完全是用來導覽(navigate)整個網站。所以我們將範例修改成使用<code>div</code>配合<code>role=&quot;navigation&quot;</code>來避免這個問題。</p><pre><code class="html">&lt;nav class=&quot;navbar navbar-default|navbar-inverse&quot;&gt;  &lt;div class=&quot;container-fluid&quot;&gt;    .    .    .  &lt;/div&gt;&lt;/nav&gt;</code></pre><blockquote><p>Use <code>.container-fluid</code> for a full width container, spanning the entire width of your viewport.</p></blockquote><h4 id="Brand與手機版本的元素"><a href="#Brand與手機版本的元素" class="headerlink" title="Brand與手機版本的元素"></a>Brand與手機版本的元素</h4><p>除了Brand以外的上半部程式碼顯示的是手機版本的畫面。</p><pre><code class="html">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;    &lt;div class=&quot;navbar-header&quot;&gt;      &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;        &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;      &lt;/button&gt;      &lt;!-- Brand 在這--&gt;      &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Brand&lt;/a&gt;    &lt;/div&gt;</code></pre><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>navbar的容器有幾種：</p><ol><li><code>div.navbar-header</code>裡面常裝brand與手機版網頁元素</li><li><code>ul.navbar-nav</code></li><li><code>form.navbar-form</code> ：在navbar中可以使用form，加上 <code>.navbar-form</code>可以讓form垂直置中。</li></ol><pre><code class="html">    &lt;div class=&quot;navbar-header&quot;&gt;        .        .        .    &lt;/div&gt;&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;      &lt;!-- 我是ul.navbar-nav --&gt;      &lt;ul class=&quot;nav navbar-nav&quot;&gt;        .        .        .      &lt;/ul&gt;      &lt;!-- 這是一個nav-form --&gt;      &lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot;&gt;        &lt;div class=&quot;form-group&quot;&gt;          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt;        &lt;/div&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;      &lt;!-- 向右對齊的非依序清單 --&gt;      &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;        .        .        .      &lt;/ul&gt;    &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;  &lt;/div&gt;&lt;!-- /.container-fluid --&gt;</code></pre><p>最外層<code>div class=&quot;collapse navbar-collapse&quot;</code>讓這個navbar套用了reponsive design。reponsive navbar必須要有collapse plugin，不過不用擔心，bootstrap已經內建了collapse js plugin。</p><h3 id="容器一：navbar-nav"><a href="#容器一：navbar-nav" class="headerlink" title="容器一：navbar-nav"></a>容器一：navbar-nav</h3><p><code>ul.navbar-nav</code>本質上是unorder list ( ul )，裡面可以裝的元素必須為List item( li ) 。裡面可以裝：</p><ol><li>Link</li><li>Dropdown</li></ol><p>link的例子如下：內部可以加上連結</p><pre><code class="html">&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Link &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</code></pre><p>dropdown本身是unorder list，因為他屬於<code>ul.navbar-nav</code>的其中之一個選項，所以外層必須由<code>li</code>包覆。形成巢狀。</p><pre><code class="html">   &lt;ul class=&quot;nav navbar-nav&quot;&gt;        &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Link &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot;dropdown&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot;&gt;Dropdown &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;          &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt;            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link&lt;/a&gt;&lt;/li&gt;          &lt;/ul&gt;        &lt;/li&gt;      &lt;/ul&gt;</code></pre><h3 id="容器二：navbar-form"><a href="#容器二：navbar-form" class="headerlink" title="容器二：navbar-form"></a>容器二：navbar-form</h3><p>form的使用跟一般的form是相同的，特別注意的是加上<code>.navbar-form</code>讓form在navbar中可以垂直置中。</p><pre><code class="html">      &lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot;&gt;        &lt;div class=&quot;form-group&quot;&gt;          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt;        &lt;/div&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;      &lt;/form&gt;</code></pre><p>詳細form的使用方法會開另一篇來做記錄。</p><h3 id="配合Snippet加快開發效率"><a href="#配合Snippet加快開發效率" class="headerlink" title="配合Snippet加快開發效率"></a>配合Snippet加快開發效率</h3><p>我使用的是 atom-bootstrap3 和 bootstrap-3-snippetset 這兩個package。</p><ol><li>使用指令<code>navbar</code>建構出navbar雛形 ，包含brand、navbar-form。</li><li>要加上dropdwon時使用指令<code>navbar-dropdown</code></li><li>各式各樣input :<ul><li><code>radiobs</code></li><li><code>checkboxbs</code></li><li><code>btn</code></li><li><code>textareabs</code></li><li><code>selectbs</code></li></ul></li></ol><h4 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h4><p><a href="http://getbootstrap.com/components/#navbar">官方Doc - navbar</a></p><p>##Part 2: Form</p><p><code>input type=&quot;text&quot;</code>常跟label成對出現，並且用form-group裝起來。form-control讓input有百分之百的長度，form-group則讓form的空間看起來更合適。</p><pre><code class="html">&lt;div class=&quot;form-group&quot;&gt;    &lt;label for=&quot;recipient-name&quot; class=&quot;control-label&quot;&gt;Recipient:&lt;/label&gt;    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;recipient-name&quot;&gt;&lt;/div&gt;</code></pre><p>checkbox因為不需要佔有一整行的空間，所以也不需要加上<code>.form-group</code>調整表單間隔。</p><pre><code class="html"> &lt;div class=&quot;checkbox&quot;&gt;    &lt;label&gt;      &lt;input type=&quot;checkbox&quot;&gt; Remember me    &lt;/label&gt;  &lt;/div&gt;</code></pre><p>同理radio也是一樣</p><pre><code class="html">&lt;div class=&quot;radio&quot;&gt;  &lt;label&gt;    &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios1&quot; value=&quot;option1&quot; checked&gt;    Option one is this and that&amp;mdash;be sure to include why it&#39;s great  &lt;/label&gt;&lt;/div&gt;</code></pre><p>select加上form-control可以讓選項延伸到該列的100%</p><pre><code class="html">&lt;select class=&quot;form-control&quot;&gt;  &lt;option&gt;1&lt;/option&gt;  &lt;option&gt;2&lt;/option&gt;  &lt;option&gt;3&lt;/option&gt;  &lt;option&gt;4&lt;/option&gt;  &lt;option&gt;5&lt;/option&gt;&lt;/select&gt;</code></pre><p>需要文字說明的時候，也可以搭配form-group使用</p><pre><code class="html">    &lt;div class=&quot;form-group&quot;&gt;      &lt;label for=&quot;disabledSelect&quot;&gt;Disabled select menu&lt;/label&gt;      &lt;select id=&quot;disabledSelect&quot; class=&quot;form-control&quot;&gt;        &lt;option&gt;Disabled select&lt;/option&gt;      &lt;/select&gt;    &lt;/div&gt;</code></pre><p>form的最後使用submit，使用class修飾外觀。</p><pre><code class="html">&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Send invitation&lt;/button&gt;</code></pre><h3 id="水平形式的form"><a href="#水平形式的form" class="headerlink" title="水平形式的form"></a>水平形式的form</h3><p>要達成水平的form可以用兩種方式，第一種是form-inline。缺點是不能自行設定label的長度。</p><pre><code class="html">&lt;form class=&quot;form-inline&quot;&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;label for=&quot;exampleInputName2&quot;&gt;Name&lt;/label&gt;    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;exampleInputName2&quot; placeholder=&quot;Jane Doe&quot;&gt;  &lt;/div&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;label for=&quot;exampleInputEmail2&quot;&gt;Email&lt;/label&gt;    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleInputEmail2&quot; placeholder=&quot;jane.doe@example.com&quot;&gt;  &lt;/div&gt;  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Send invitation&lt;/button&gt;&lt;/form&gt;</code></pre><p>另一種方式是使用Horizontal form便可以對label和input使用grid system。</p><pre><code class="html">&lt;form class=&quot;form-horizontal&quot;&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;label for=&quot;inputEmail3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;    &lt;div class=&quot;col-sm-10&quot;&gt;      &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; placeholder=&quot;Email&quot;&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;    &lt;div class=&quot;col-sm-10&quot;&gt;      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; placeholder=&quot;Password&quot;&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;      &lt;div class=&quot;checkbox&quot;&gt;        &lt;label&gt;          &lt;input type=&quot;checkbox&quot;&gt; Remember me        &lt;/label&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;form-group&quot;&gt;    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/form&gt;</code></pre><p>這樣子基本的需求大概都可以cover到了。CSS class的查詢就直接看官方文件。</p><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="http://getbootstrap.com/css/#forms">http://getbootstrap.com/css/#forms</a></p><h2 id="Part-3-JS-Libarays"><a href="#Part-3-JS-Libarays" class="headerlink" title="Part 3: JS Libarays"></a>Part 3: JS Libarays</h2><h3 id="Carousel"><a href="#Carousel" class="headerlink" title="Carousel"></a>Carousel</h3><p>HTML分為三個部分：</p><ol><li>indecator : 下面用來代表目前頁面的小圈圈</li><li>wrapper : 投影片資料放這裡面</li><li>Controls : prev 和 next<br>操作上需注意，投影片最外層需要加上<code>data-ride=&quot;carousel&quot;</code>套用carousel javascript plugin。<pre><code class="html">&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;  .  .  .&lt;/div&gt;</code></pre>indecator和controls需要跟外層的<code>#carousel-example-generic&quot;</code>一致。<br>```html<!-- Indicators --><ol class="carousel-indicators">   <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>   <li data-target="#carousel-example-generic" data-slide-to="1"></li>   <li data-target="#carousel-example-generic" data-slide-to="2"></li></ol></li></ol><!-- Wrapper for slides --><pre><code>  .  .  .</code></pre><!-- Controls --><pre><code>  &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;        &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;  &lt;/a&gt;  &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;      &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;      &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;  &lt;/a&gt;</code></pre></div>```<h3 id="modal"><a href="#modal" class="headerlink" title="modal"></a>modal</h3><pre><code class="html">&lt;!-- Button trigger modal --&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-lg&quot; data-toggle=&quot;modal&quot; data-target=&quot;#myModal&quot;&gt;  Launch demo modal&lt;/button&gt;</code></pre><p><code>data-toggle=&quot;modal&quot;</code>代表這個button是用來觸發modal。<code>data-target=&quot;#myModal&quot;</code>則指定了要用id為myModal的元素來作為跳出的視窗。完整範例如下：</p><pre><code class="html">&lt;!-- Modal --&gt;&lt;div class=&quot;modal fade&quot; id=&quot;myModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot;&gt;  &lt;div class=&quot;modal-dialog&quot;&gt;    &lt;div class=&quot;modal-content&quot;&gt;      &lt;div class=&quot;modal-header&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;        &lt;h4 class=&quot;modal-title&quot; id=&quot;myModalLabel&quot;&gt;Modal title&lt;/h4&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        ...      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Save changes&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="Collapse"><a href="#Collapse" class="headerlink" title="Collapse"></a>Collapse</h3><pre><code class="html">&lt;a class=&quot;btn btn-primary&quot; data-toggle=&quot;collapse&quot; href=&quot;#collapseExample&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapseExample&quot;&gt;  Link with href&lt;/a&gt;&lt;div class=&quot;collapse&quot; id=&quot;collapseExample&quot;&gt;  &lt;div class=&quot;well&quot;&gt;    ...  &lt;/div&gt;&lt;/div&gt;</code></pre><p>bootstrap使用data-attribute的方式來綁定js plugin，讓我們不需撰寫js檔也能使用javascript效果。每個tag中可以有一個<code>data-</code>開頭的屬性，根據使用的狀況不同<code>data-</code>後面接的會有所不同，Collapse用來展開或收起區域，所以後面接的是toggle字樣。(如果對toggle這個單字不太了解，可以玩玩看jQuery的toggle()方法。)<code>data-toggle</code>除了用在modal以外，也會使用在同樣有展開/收起特性的dropdown。來看看dropdown的button：</p><pre><code class="html">&lt;button id=&quot;dLabel&quot; type=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;</code></pre><p>button中的<code>data-toggle=&quot;dropdown&quot;</code>代表這個button觸發的會是dropdown menu。</p><p>Collapse的第一個例子中的<code>aria-controls=&quot;collapseExample&quot;</code>輸入的「要跳出文字的id」。如此一來簡簡單單的完成了一個效果。</p><h2 id="ScrollSpy"><a href="#ScrollSpy" class="headerlink" title="ScrollSpy"></a>ScrollSpy</h2><p>Scrollspy可以讓你滾動到哪個div時，就讓navbar選擇到相對應的button。使用方式除了需要在html中加上<code>data-spy=&quot;scroll&quot;</code>以外，css必須對body使用<code>position: relative</code>才能夠使用。css檔長這樣：</p><pre><code class="css">body &#123;  position: relative;&#125;</code></pre><p>html檔者這樣：</p><pre><code class="html">&lt;body data-spy=&quot;scroll&quot; data-target=&quot;.navbar-example&quot;&gt;  ...  &lt;div class=&quot;navbar-example&quot;&gt;    &lt;ul class=&quot;nav nav-tabs&quot; role=&quot;tablist&quot;&gt;      ...    &lt;/ul&gt;  &lt;/div&gt;  ...&lt;/body&gt;</code></pre><p>如果不想使用data-attribute的方式，也可以透過javascript來使用。</p><pre><code class="js">$(&#39;body&#39;).scrollspy(&#123; target: &#39;.navbar-example&#39; &#125;)</code></pre><h3 id="jumbto"><a href="#jumbto" class="headerlink" title="jumbto"></a>jumbto</h3><pre><code class="html">  &lt;div class=&quot;form-group&quot;&gt;    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;    &lt;/div&gt;  &lt;/div&gt;</code></pre><h3 id="Cheetsheet"><a href="#Cheetsheet" class="headerlink" title="Cheetsheet"></a>Cheetsheet</h3><p><a href="http://getbootstrap.com/css/#buttons">http://getbootstrap.com/css/#buttons</a><br><a href="http://getbootstrap.com/css/#tables">http://getbootstrap.com/css/#tables</a><br><a href="http://getbootstrap.com/css/#helper-classes">http://getbootstrap.com/css/#helper-classes</a><br><a href="http://getbootstrap.com/components/#dropdowns">http://getbootstrap.com/components/#dropdowns</a><br>bootstrap 3 不使用 pull-right 而使用dropdown-menu-right<br><a href="http://getbootstrap.com/components/#jumbotron">http://getbootstrap.com/components/#jumbotron</a><br><a href="http://getbootstrap.com/components/#thumbnails">http://getbootstrap.com/components/#thumbnails</a><br><a href="http://getbootstrap.com/javascript/#modals">http://getbootstrap.com/javascript/#modals</a><br><a href="http://getbootstrap.com/components/#pagination">http://getbootstrap.com/components/#pagination</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="常見的data-attribute"><a href="#常見的data-attribute" class="headerlink" title="常見的data-attribute"></a>常見的data-attribute</h3><ol><li><p>Hide an element to all devices except screen readers with <code>.sr-only.</code></p></li><li><p> All textual <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> elements with <code>.form-control</code> are set to width: 100%; by default. Wrap labels and controls in <code>.form-group</code> for optimum spacing.</p></li><li><p>要使用sass開發的話有bootstrap for sass。</p></li></ol><h3 id="Tag-role"><a href="#Tag-role" class="headerlink" title="Tag role"></a>Tag role</h3><p>甚麼時候要用到role，根據官方文件的說法，當你所編寫的 tag 代表的意義已不符合本身的 default implicit roles，那你便需要再加上 role 屬性來說明其正確用途。而在W3C的官方文件中也載明了一個表格(見參考資料2 標題 Recommended ARIA usage by HTML language feature) 其中詳列的各 HTML Tag 的預設隱性 role，以及其可支援的其他 role</p><p>(引用自 <a href="http://lobster0429.logdown.com/posts/144753-aria-role-related-notes">ARIA role 相關筆記 « Lobster 亂七八糟筆記</a> )</p><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>Use <code>.container</code> for a responsive fixed width container.</p><pre><code class="html">&lt;div class=&quot;container&quot;&gt;  ...&lt;/div&gt;</code></pre><p>Use <code>.container-fluid</code> for a full width container, spanning the entire width of your viewport.</p><pre><code class="html">&lt;div class=&quot;container-fluid&quot;&gt;  ...&lt;/div&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript是新手的好朋友</title>
      <link href="/2015/03/08/old%20posts/2015-03-08-typescript-is-newbies-good-friend/"/>
      <url>/2015/03/08/old%20posts/2015-03-08-typescript-is-newbies-good-friend/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼-Typescript-是新手的好朋友"><a href="#為什麼-Typescript-是新手的好朋友" class="headerlink" title="為什麼 Typescript 是新手的好朋友"></a>為什麼 Typescript 是新手的好朋友</h2><p>typescript百分之百跟javascript相容，所有javascript的語法都可以在<code>.ts</code>typescript檔案中執行。因此就算是要javascrtip新手，也可以享受typescript帶來好處。typescript能夠讓</p><ol><li><p>目前暫時不需要去研究typescript的其他功能，只需要他可以宣告型態，靜態語言即時偵錯，與關連定義檔就可以檢查method，光是這幾項就很值得使用了</p></li><li><p>需要注意的是因為typescript的許多特性，例如: class, module, interface 皆與原生javascript有所不同，如果對javascript還不了解，直接學習可能會更加的混淆。</p></li><li><p>在javascript演進這麼快速的現在，要選擇任何一種framework或是語言都是一種巨大的投資，</p></li></ol><h2 id="選擇-Typescript-還有什麼好處？"><a href="#選擇-Typescript-還有什麼好處？" class="headerlink" title="選擇 Typescript 還有什麼好處？"></a>選擇 Typescript 還有什麼好處？</h2><ol><li>因為javascript的是個動態型別的語言，所以只能在執行時期偵錯，要真的執行到那一行，才會跳出錯誤訊息，這使的偵錯上非常的不容易。</li><li>typescript所能解決的問題：因為typescript提供了靜態型別檢查，在編譯的時候就可以檢查到！尤其是打錯字的問題和型別不一致的問題。</li><li>typescript新增了一些型別，讓我們可以宣告靜態型別。也保留了原本動態型別的特性，只要你設為any！。</li><li>function 也可以使用冒號設定回傳值。</li><li>module 類似namespace的存在，裡面可以包其他module、interface、class、function…</li><li>garbage collection(回收)是執行時期做的，只要參考的技術器是0的話，javascript就會自動回收他</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://brownydev.blogspot.tw/2011/06/java-call-by-value-call-by-reference.html">Excelsior: [Java] 淺談 call by value 和 call by reference</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：namespace</title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-core-note-namespace/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-core-note-namespace/</url>
      
        <content type="html"><![CDATA[<h2 id="靜態命名空間"><a href="#靜態命名空間" class="headerlink" title="靜態命名空間"></a>靜態命名空間</h2><h3 id="方法1-直接指定"><a href="#方法1-直接指定" class="headerlink" title="方法1 - 直接指定"></a>方法1 - 直接指定</h3><pre><code class="js">var myApp = &#123;&#125;myApp.id = 0;myApp.next = function() &#123;    return myApp.id++;&#125;myApp.reset = function() &#123;    myApp.id = 0;&#125;window.console &amp;&amp; console.log(    myApp.next(),    myApp.next(),    myApp.reset(),    myApp.next()); //0, 1, undefined, 0</code></pre><h3 id="方法-2-使用物件實字（Object-Literal-Notation）"><a href="#方法-2-使用物件實字（Object-Literal-Notation）" class="headerlink" title="方法 2. 使用物件實字（Object Literal Notation）"></a>方法 2. 使用物件實字（Object Literal Notation）</h3><h3 id="方法3-使用設計模式Module-Pattern來建構"><a href="#方法3-使用設計模式Module-Pattern來建構" class="headerlink" title="方法3. 使用設計模式Module Pattern來建構"></a>方法3. 使用設計模式Module Pattern來建構</h3><h2 id="動態命名空間"><a href="#動態命名空間" class="headerlink" title="動態命名空間"></a>動態命名空間</h2><p>未完…</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：建構式與prototype</title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-core-note-constructor/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-core-note-constructor/</url>
      
        <content type="html"><![CDATA[<h2 id="建立物件時，實際上做了什麼事"><a href="#建立物件時，實際上做了什麼事" class="headerlink" title="建立物件時，實際上做了什麼事?"></a>建立物件時，實際上做了什麼事?</h2><p>使用 new 關鍵字時，JavaScript 會先建立一個空物件，接著設定物件的原型為函式的 prototype 特性所參考的物件，然後呼叫建構式並將所建立的空物件設為 this。接下來依照建構式設定實例上的特性，最後再由prototype補上未設定的特性。</p><h2 id="建構式如何初始化實例"><a href="#建構式如何初始化實例" class="headerlink" title="建構式如何初始化實例"></a>建構式如何初始化實例</h2><pre><code class="js">var p1 = new Person(&#39;Justin&#39;, 35);var p2 = new Person(&#39;Monica&#39;, 32);var p3 = new Person(&#39;Irene&#39;, 2);console.log(p1.toString());  // [Justin,35]console.log(p2.toString());  // [Monica,32]console.log(p3.toString());  // [Irene,2]</code></pre><p>當你使用new產生Person物件時。其實是透過如下面例子的建構式function Person 初始化了建構式所設定的各個特性。</p><pre><code class="js">function toString()&#123;    return &#39;[&#39; + this.name +&#39;,&#39; + this.age + &#39;]&#39;;&#125;function Person(name, age)&#123;    this.name = name;    this.age = age;    this.toString = toString;&#125;var p = &#123;&#125;Person.call(p, &#39;Justin&#39;, 35);console.log(p.toString());</code></pre><h2 id="constructor特性"><a href="#constructor特性" class="headerlink" title="constructor特性"></a>constructor特性</h2><p>每個透過 new 建構的物件，都會有個 constructor 特性，參考至當初建構它的函式。例如：</p><pre><code class="js">function Person() &#123;&#125;var p = new Person();console.log(p.constructor == Person);  // true</code></pre><p>事實上，每個函式實例建立時，都會在函式實例上以空物件建立 prototype，然而在空物件上設定 constructor 特性，也因此每個 new 建構的物件，都可以找到 constructor 特性。例如：</p><pre><code class="js">function Some() &#123;&#125;console.log(Some.prototype.constructor);  // [Function: Some]</code></pre><h2 id="prototype特性"><a href="#prototype特性" class="headerlink" title="prototype特性"></a>prototype特性</h2><p>JavaScript 在尋找特性名稱時，會先在實例上找尋有無特性，以下例而言，p1 上會有 name 與 age 特性，所以可以直接取得對應的值。如果物件上沒有該特性，會到物件的原型上去尋找，以下例而言，p1 上沒有 toString 特性，所以會到 p1 的原型上尋找，而 p1 的原型物件此時也就是 Person.prototype 參考的物件，這個物件上有 toString 特性，所以可以 找到 toString 所參考的函式並執行。</p><pre><code class="js">function Person(name, age) &#123;    this.name = name;    this.age = age;&#125; Person.prototype.toString = function() &#123;    return &#39;[&#39; + this.name + &#39;, &#39; + this.age + &#39;]&#39;;&#125;; var p1 = new Person(&#39;Justin&#39;, 35);var p2 = new Person(&#39;Momor&#39;, 32); console.log(p1.toString());   // [Justin, 35]console.log(p2.toString());   // [Momor, 32]</code></pre><p>要注意的是，只有在查找特性，而物件上不具該特性時才會使用原型，如果你對物件設定某個特性，是直接在物件上設定了特性，而不是對原型設定了特性。例如：</p><pre><code class="js">function Some() &#123;&#125;Some.prototype.data = 10;var s = new Some();console.log(s.data);                 // 10s.data = 20;console.log(s.data);                 // 20console.log(Some.prototype.data);    // 10</code></pre><p>在上例中可以看到，你對 s 參考的物件設定了 data 特性，但並不影響 Some.prototype.data 的值。</p><h3 id="如何實現private"><a href="#如何實現private" class="headerlink" title="如何實現private"></a>如何實現private</h3><p>對熟悉物件導向私有（private）特性的人來說，可能覺得這不安全，這相當於在物件導向觀念中，每個類別成員都是公開成員的意味。JavaScript 本身並沒有支援物件導向私用特性的語法，如果你想模擬，則可以如下：<br>(…待補充)</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.codedata.com.tw/javascript/essential-javascript-13-scope-chain/">JavaScript 語言核心（13）在 Scope chain 查找變數 by caterpillar CodeData</a><br><a href="http://www.codedata.com.tw/javascript/essential-javascript-14-constructor/">JavaScript 語言核心（14）隱藏諸多細節的建構式 by caterpillar CodeData</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：scope </title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-core-note-scope/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-core-note-scope/</url>
      
        <content type="html"><![CDATA[<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ol><li><p>每個function在呼叫時都會建立新的 Function execution context，有個物件用來代表 <code>Execution context</code>，而區域變數則是 context 物件上的特性。</p></li><li><p>JavaScript 在查找變數時，會先在目前 context 物件上找，若找不到指定名稱，則會到外層 context 物件上找，若找不到，就再到更外層 context 物件找，直到全域物件為止，這樣的順序形成變數查找的 <code>Scope chain</code>。</p></li><li><p>closure是典型應用scope chain的例子，在內部的 f 函式中 context 物件上找有無 x 特性時，並沒有找到，於是在包裹 f 的 doSome 呼叫物件上查找有無 x，也就是查找 f.<strong>parent</strong> 上有無 x，此時找到了。</p><pre><code class="js">function doSome() &#123; var x = 10; function f(y) &#123;     return x + y; &#125; return f;&#125;</code></pre></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.codedata.com.tw/javascript/essential-javascript-13-scope-chain/">JavaScript 語言核心（13）在 Scope chain 查找變數 by caterpillar - CodeData</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：function </title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-core-note-function/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-core-note-function/</url>
      
        <content type="html"><![CDATA[<h3 id="javascript的函數是一級物件-First-Class"><a href="#javascript的函數是一級物件-First-Class" class="headerlink" title="javascript的函數是一級物件(First-Class)"></a>javascript的函數是一級物件(First-Class)</h3><p>function是由Function的實例，並且在javascript中可以指定給變數，函式與數值的地位相同，並不會像有些語言中，無法像數值一樣地被指定，不會淪為二等公民，因此，對於支持函式可如數值一樣指定給變數的語言，我們稱函式在這個語言中是一級函數。</p><pre><code class="js">var number = 10;        // Number literalvar obj = &#123;x : 10&#125;;     // Object literalvar array = [1, 2, 3];  // Array literalvar func = function() &#123; // Function literal    // do something...&#125;;</code></pre><p>函式既然是物件，本身亦可擁有特性。例如函式有個 length 特性，代表其參數個數：</p><pre><code class="js">var gcd = function g(num1, num2) &#123;    return num2 != 0 ? g(num2, num1 % num2) : num1;&#125;;console.log(gcd.length); // 2</code></pre><h3 id="函數的回傳值"><a href="#函數的回傳值" class="headerlink" title="函數的回傳值"></a>函數的回傳值</h3><p>函式沒設定return時，預設回傳<code>undefined</code>。</p><h3 id="輸入的參數與引數不符合時"><a href="#輸入的參數與引數不符合時" class="headerlink" title="輸入的參數與引數不符合時"></a>輸入的參數與引數不符合時</h3><p>如果函式傳入的參數不足時是可以執行的，不足的部份會自動補上<code>undefined</code>。</p><pre><code class="js">function func(a, b) &#123;    console.log(a);    console.log(b);&#125;func(10, 20);         // 10 20func(10);             // 10 undefinedfunc();               // undefined undefinedfunc(10, 20, 30, 40); // 10 20</code></pre><p>傳入比參數個數還多的引數也是可行的，在函式內部會自動宣告 arguments 名稱參考至具陣列外觀的物件，上頭帶有所有傳入的引數。例如，你可以如下設計一個加總數值的函式：</p><pre><code class="js">function sum() &#123;    var sum = 0;    for(var i = 0; i &lt; arguments.length; i++) &#123;        sum += arguments[i];    &#125;    return sum;&#125;console.log(sum(1, 2));;      // 3console.log(sum(1, 2, 3));    // 6console.log(sum(1, 2, 3, 4)); // 10</code></pre><p>arguments 不是 Array 實例，它只是具有數字作為特性，特性參考至傳入的引數，並具有 length 特性代表傳入引數的個數。你可以使用arguments.length來檢查引數個數。</p><p>在 <code>EMCAScript 5 前的版本</code>，參數只是具名的引數，你改變參數的值，arguments 對應索引的參考值也會相應的改變。然而，若採用 <code>EMCAScript 5 嚴格模式</code>，參數的值 與 arguments 的元素值彼此互不影響。</p><h3 id="函式宣告式、函式表達式與匿名函數"><a href="#函式宣告式、函式表達式與匿名函數" class="headerlink" title="函式宣告式、函式表達式與匿名函數"></a>函式宣告式、函式表達式與匿名函數</h3><ul><li>表達式<ul><li>具名表達式 var add = function add(a, b){return a+b;};</li><li>匿名表達式 var add = function (a, b){return a+b;};</li></ul></li><li>宣告式<ul><li>具名宣告 function add(a, b){return a+b;};</li><li>匿名宣告 function (a, b){return a+b;};</li></ul></li></ul><p>宣告式的特性有：</p><ul><li>在javascript引擎解析javascript程式碼時，會受到Function declaration Hoisting，提升到作用域的最前面執行。</li><li>後面加括號<code>不可以</code>立刻調用函數</li></ul><p>表達式的特性有：</p><ul><li>當javascript引擎執行到表達式的那行程式碼時，才會開始解析。</li><li>後面加括號<code>立刻</code>調用函數。</li></ul><h3 id="立即函數"><a href="#立即函數" class="headerlink" title="立即函數"></a>立即函數</h3><p>要在函數體後面加括號就能立即調用，則這個函數必須是函數表達式，不能是函數宣告式。所以立即函數的本質是函數表達式。立即函數可以讓括號內的變數變成區域變數，這部份請參考Scope的筆記。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>除了本篇提到的性質以外，物件的建構式也是由function來構建，學習時一併理解以釐清不清楚的地方。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://dengo.org/archives/1004">js中(function(){…})()立即执行函数写法理解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：callback</title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-core-note-callback/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-core-note-callback/</url>
      
        <content type="html"><![CDATA[<h2 id="callback是一種設計模式"><a href="#callback是一種設計模式" class="headerlink" title="callback是一種設計模式"></a>callback是一種設計模式</h2><p>來看看callback的定義：</p><blockquote><p><a href="http://en.wikipedia.org/wiki/Callback_(computer_programming)">Callback (computer programming) - Wikipedia</a><br>In computer programming, a callback is a reference to a piece of executable code that is passed as an argument to other code.</p></blockquote><blockquote><p><a href="http://docs.jquery.com/How_jQuery_Works#Callback_and_Functions">jQuery Document: How jQuery Works#Callback_and_Functio…</a><br>A callback is a function that is passed as an argument to another function and is executed after its parent function has completed. The special thing about a callback is that functions that appear after the “parent” can execute before the callback executes. Another important thing to know is how to properly pass the callback. This is where I have often forgotten the proper syntax.</p></blockquote><p>所以本質上callback是一種設計模式。當一段程式碼可以當做參數丟給其他程式碼執行就叫做callback。jQuery和許多其他的框架的設計原則都遵循這個模式。</p><h2 id="callback不限於非同步使用"><a href="#callback不限於非同步使用" class="headerlink" title="callback不限於非同步使用"></a>callback不限於非同步使用</h2><p>同步時使用callback通常是希望程式能夠按照順序執行。通常callback在同步的情況下是最後執行的。</p><pre><code class="js">var func1=function(callback)&#123;    //do something.    //如果callback存在就執行它    callback &amp;&amp; callback();&#125;func1(func2);    var func2=function()&#123;&#125;</code></pre><p>非同步的例子：</p><pre><code class="js">$(document).ready(callback);$.ajax(&#123;  url: &quot;test.html&quot;,  context: document.body&#125;).done(function() &#123;  $(this).addClass(&quot;done&quot;);&#125;).fail(function() &#123;  alert(&quot;error&quot;);&#125;).always(function() &#123;  alert(&quot;complete&quot;);&#125;);</code></pre><h2 id="callback-function的撰寫方式"><a href="#callback-function的撰寫方式" class="headerlink" title="callback function的撰寫方式"></a>callback function的撰寫方式</h2><h4 id="1-沒有其他引數時"><a href="#1-沒有其他引數時" class="headerlink" title="1.沒有其他引數時"></a>1.沒有其他引數時</h4><pre><code class="js">function basic( callback )&#123;  console.log( &#39;作些事情&#39; );  var result = &#39;我是等會要被傳送給 `do something` 的 callback 的函式結果&#39;;  // 如果 callback 存在的話就執行他  callback &amp;&amp; callback( result );&#125;basic( function( result )&#123;  console.log( &#39;這個 callback 函式會在 terminal 上列出 `basic` 函式執行的結果&#39; );  console.log( result );&#125;);</code></pre><p>結果</p><pre><code>作些事情這個 callback 函式會在 terminal 上列出 `basic` 函式執行的結果我是等會要被傳送給 `do something` 的 callback 的函式結果</code></pre><h4 id="2-有其他引數時可以用call或apply來實作。用call來實作看看。"><a href="#2-有其他引數時可以用call或apply來實作。用call來實作看看。" class="headerlink" title="2.有其他引數時可以用call或apply來實作。用call來實作看看。"></a>2.有其他引數時可以用call或apply來實作。用call來實作看看。</h4><pre><code class="js">function callbacks_with_call( arg1, arg2, callback )&#123;  console.log( &#39;作些事情&#39; );  var result1 = arg1.replace( &#39;argument&#39;, &#39;result&#39; ),      result2 = arg2.replace( &#39;argument&#39;, &#39;result&#39; );  this.data = &#39;這等會可以讓 callback 函式用 `this` 來調用&#39;;  // 如果 callback 存在的話就執行他  callback &amp;amp;&amp;amp; callback.call( this, result1, result2 );&#125;( function()&#123;  var arg1 = &#39;我是 argument1&#39;,      arg2 = &#39;我是 argument2&#39;;  callbacks_with_call( arg1, arg2, function( result1, result2 )&#123;    console.log( &#39;這一個 callback 函式將會列出 `callbacks_with_call` 的執行結果&#39; );    console.log( &#39;result1: &#39; + result1 );    console.log( &#39;result2: &#39; + result2 );    console.log( &#39;data from `callbacks_with_call`: &#39; + this.data );  &#125;);&#125;)();</code></pre><p>執行結果</p><pre><code>作些事情這一個 callback 函式將會列出 `callbacks_with_call` 的執行結果result1: i am result1result2: i am result2data from `callbacks_with_call`: 這等會可以讓 callback 函式用 `this` 來調用</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://dreamerslab.com/blog/tw/javascript-callbacks/">Javascript callbacks | DreamersLab</a><br><a href="http://segmentfault.com/q/1010000000140970">JavaScript 回调函数怎么理解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript核心筆記：this</title>
      <link href="/2015/02/27/old%20posts/2015-02-27-javascript-this/"/>
      <url>/2015/02/27/old%20posts/2015-02-27-javascript-this/</url>
      
        <content type="html"><![CDATA[<h3 id="call可以讓你決定this的參考對象"><a href="#call可以讓你決定this的參考對象" class="headerlink" title="call可以讓你決定this的參考對象"></a>call可以讓你決定this的參考對象</h3><p>在 JavaScript 中，函式是 Function 的實例，Function 都會有個 call 方法，可以讓你決定 this 的參考對象。舉例來說，你可以如下呼叫：</p><pre><code class="js">function toString()&#123;    return &#39;[&#39; + this.name + &#39;,&#39; + this.age + &#39;,&#39;;&#125;var p1 = &#123;    name:&#39;Justin&#39;,    age :35&#125;;var p2 = &#123;    name : &#39;momor&#39;,    age : 32&#125;;console.log( toString.call(p1) ); //[Justin, 35]console.log( toString.call(p2) ); //[momor, 32]</code></pre><p>妳可以覆寫call方法，讓this參考別的物件。</p><pre><code class="js">function toString() &#123;    return this.name;&#125;var p1 = &#123;    name     : &#39;Justin&#39;,    toString : toString&#125;;var p2 = &#123;    name     : &#39;momor&#39;,    toString : toString&#125;;console.log(p1.toString());        // Justinconsole.log(p2.toString());        // momorconsole.log(p1.toString.call(p2)); // momor</code></pre><h3 id="當call遇到有參數的函式時"><a href="#當call遇到有參數的函式時" class="headerlink" title="當call遇到有參數的函式時"></a>當call遇到有參數的函式時</h3><p>call 方法的第一個參數就是用來指定函式中的 this 所參考的物件。如果函式原本具有參數，則可接續在第一個參數之後。例如：</p><pre><code class="js">function add(num1, num2) &#123;    return this.num + num1 + num2;&#125;var o = &#123;num : 10&#125;;console.log(add.call(o, 20, 30)); // 60</code></pre><h3 id="同樣決定this的參考對象還有apply可以使用決定"><a href="#同樣決定this的參考對象還有apply可以使用決定" class="headerlink" title="同樣決定this的參考對象還有apply可以使用決定"></a>同樣決定this的參考對象還有apply可以使用決定</h3><p>差別在於apply必須將引數蒐集起成陣列，做為第二個參數來呼叫函數。</p><pre><code class="js">function add(num1, num2) &#123;    return this.num + num1 + num2;&#125;var o1 = &#123;num : 10&#125;;var o2 = &#123;num : 100&#125;;var args = [20, 30];console.log(add.apply(o1, args)); // 60console.log(add.apply(o2, args)); // 150</code></pre><h3 id="this與全域物件"><a href="#this與全域物件" class="headerlink" title="this與全域物件"></a>this與全域物件</h3><p>如果呼叫函式時，無法透過 . 運算、call、apply 等方法確定 this 的對象，如果不是嚴格模式，那麼 this 會直接轉為參考全域物件（Global object）。</p><p>全域物件是 JavaScript 執行時期全域可見的物件，在不同的環境中想要取得全域物件，會透過不同的名稱，像是 Node.js 中可以使用 global，瀏覽器中可以透過 window 或在全域範圍使用 this，Rhino（或 JDK8 的 Nashorn）可以在全域範圍使用 this 取得。</p><p>因此，如果你想統一全域物件的變數名稱，例如統一使用 global，可以透過類似以下的方式：</p><pre><code class="js">var global = global || (function() &#123;    return this;&#125;)();</code></pre><h2 id="this參考的對象並非以附屬在哪個物件而定"><a href="#this參考的對象並非以附屬在哪個物件而定" class="headerlink" title="this參考的對象並非以附屬在哪個物件而定"></a>this參考的對象並非以附屬在哪個物件而定</h2><p>this 實際參考的對象，是以呼叫方式而定，而不是它是否附屬在哪個物件而定。例如就算函式是附屬在函式上的某個特性，也可以這麼改變 this 所參考的對象：</p><pre><code class="js">function toString() &#123;    return this.name;&#125;var p1 = &#123;    name: &#39;Justin&#39;,    toString: toString&#125;;var p2 = &#123;    name: &#39;momor&#39;,    toString: toString&#125;;console.log(p1.toString()); // Justinconsole.log(p2.toString()); // momorconsole.log(p1.toString.call(p2)); // momor</code></pre><h4 id="參考資料-amp-延伸閱讀"><a href="#參考資料-amp-延伸閱讀" class="headerlink" title="參考資料 &amp; 延伸閱讀"></a>參考資料 &amp; 延伸閱讀</h4><ul><li><a href="http://www.codedata.com.tw/javascript/essential-javascript-11-what-is-this/">JavaScript 語言核心（11）this 是什麼？ by caterpillar - CodeData</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call - JavaScript - MDN</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript核心筆記：Object</title>
      <link href="/2015/02/24/old%20posts/2015-02-24-javascript-core-note/"/>
      <url>/2015/02/24/old%20posts/2015-02-24-javascript-core-note/</url>
      
        <content type="html"><![CDATA[<p>在 JavaScript 中，物件是 Object 的實例。你可以如下建立一個新的物件：</p><pre><code class="js">var obj = new Object();</code></pre><p>實際上，現在已經很少人這麼撰寫了，使用物件實字（Object literal）語法就可以建立一個物件：</p><pre><code class="js">var obj = &#123;&#125;;</code></pre><p>上面你所看到的函式撰寫方式，稱之為<code>函式實字（Function literal）</code>，這就像你寫下一個數值實字、物件實字或陣列實字，會產生數值或物件等：</p><h3 id="搜尋物件上的特性"><a href="#搜尋物件上的特性" class="headerlink" title="搜尋物件上的特性"></a>搜尋物件上的特性</h3><p>想要知道物件上有哪些自定義特性，可以使用 for in 語法，逐一取出物件的特性名稱。例如：</p><pre><code class="js">&gt; for(var prop in obj) &#123;...     console.log(prop);...     console.log(typeof prop);... &#125;xstringystringundefined&gt; &#39;x&#39; in obj;true&gt;</code></pre><h3 id="物件個性化"><a href="#物件個性化" class="headerlink" title="物件個性化"></a>物件個性化</h3><p>在 JavaScript 中，每個物件都可以是獨一無二，不一定是由其建構式來規範，這能力稱為物件個性化（Object individuation），你可以隨時為物件新增特性（Properties），也可以隨時用 delete 運算子來刪除特性。</p><p>有些內建特性無法被刪除，舉例來說，Array 實例有個 length 特性，你無法刪除它：</p><pre><code class="js">&gt; var arr = [];undefined&gt; arr.length;0&gt; delete arr.length;false&gt;</code></pre><h3 id="js物件的本質就像是Map物件"><a href="#js物件的本質就像是Map物件" class="headerlink" title="js物件的本質就像是Map物件"></a>js物件的本質就像是Map物件</h3><p>JavaScript的物件本質上，其實是個特性與值的群集（Collection），要比喻的話，有點像是 Java 中的 Map 物件。如果你要使用 for in 取得物件上的特性與值，則可以如下：</p><pre><code class="js">&gt; var obj = &#123;...     x : 10,...     y : 20... &#125;;undefined&gt; for(var prop in obj) &#123;...     console.log(prop + &#39;: &#39;, obj[prop]);... &#125;x:  10y:  20undefined&gt;</code></pre><p>使用 [] 運算子的場合之一，就是當你的特性會包括空白、<code>.</code>字元、數字…等時。</p><h3 id="特性偵測"><a href="#特性偵測" class="headerlink" title="特性偵測"></a>特性偵測</h3><p>特性便是javascript物件中的key。我們要偵測物件是否存在某特性時可以用以下兩種方式：</p><ol><li>使用 in 測試物件上是否存在特性之外。</li><li>由於物件上不存在某個特性時，你試圖存取時會傳回 undefined，而undefined若在判斷是否成立時會被當作 false，所以就有了特性偵測的作法：<pre><code class="js">&gt; var obj = &#123;&#125;;undefined&gt; obj.x ? &#39;has x&#39; : &#39;has no x&#39;;&#39;has no x&#39;&gt; obj.x = 10;10&gt; obj.x ? &#39;has x&#39; : &#39;has no x&#39;;&#39;has x&#39;&gt;</code></pre></li></ol><h3 id="javascript是個弱型別語言"><a href="#javascript是個弱型別語言" class="headerlink" title="javascript是個弱型別語言"></a>javascript是個弱型別語言</h3><p>JavaScript是個弱型別語言，在需要將物件的型別(Type)轉為number的時候，會呼叫 <code>valueOf</code> 方法。例如：</p><pre><code class="js">&gt; var obj = &#123;...     valueOf : function() &#123;.....       return 100;.....   &#125;... &#125;;undefined&gt; 100 + obj;200&gt; obj + 200;300&gt; obj &gt; 100;false&gt; obj &gt;= 100;true&gt;</code></pre><p>在需要將物件的Type轉換為字串的場合，則會呼叫<code>toString</code>方法。例如：</p><pre><code class="js">&gt; var caterpillar = &#123;...     name : &#39;Justin Lin&#39;,...     url  : &#39;openhome.cc&#39;,...     toString : function() &#123;.....         return &#39;[name: &#39; + this.name + &#39;, url: &#39; + this.url + &#39;]&#39;;.....     &#125;... &#125;;undefined&gt; &#39;My info: &#39; + caterpillar;&#39;My info: [name: Justin Lin, url: openhome.cc]&#39;&gt;</code></pre><h3 id="比較”-”與”-”"><a href="#比較”-”與”-”" class="headerlink" title="比較”===”與”==”"></a>比較”===”與”==”</h3><p><code>===</code> 用在物件比較時，是比較參考的對象是否為同一物件，而不是物件實際內含值（<code>==</code> 得考慮型態轉換後的結果)。</p><p>如果你要比較兩個物件實際上是否為同一物件，必須自行定義專屬方法。可以命名為<code>equals</code>。</p><pre><code class="js">function equals(other) &#123;    return (this.name === other.name) &amp;&amp;  (this.url === other.url);&#125;var man1 = &#123;    name : &#39;Justin Lin&#39;,    url  : &#39;openhome.cc&#39;,    equals : equals&#125;;var man2 = &#123;    name : &#39;Justin Lin&#39;,    url  : &#39;openhome.cc&#39;,    equals : equalsÂ&#125;;var man3 = &#123;    name : &#39;Justin Lin&#39;,    url  : &#39;openhome.cc&#39;,    equals : equals&#125;;console.log(man1.equals(man2));  // trueconsole.log(man1.equals(man3));  // true</code></pre><p>如果了解prototype的概念，可以改寫成下面這樣。</p><pre><code class="js">function Man(name, url) &#123;    this.name = name;    this.url = url;&#125;Man.prototype.equals = function(other) &#123;    return (this.name === other.name) &amp;&amp;  (this.url === other.url);&#125;;var man1 = new Man(&#39;Justin Lin&#39;, &#39;openhome.cc&#39;);var man2 = new Man(&#39;Justin Lin&#39;, &#39;openhome.cc&#39;);var man3 = new Man(&#39;Justin Lin&#39;, &#39;openhome.cc&#39;);console.log(man1.equals(man2));console.log(man1.equals(man3));</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.codedata.com.tw/javascript/essential-javascript-6-object/">JavaScript 語言核心（6）鍵值聚合體的物件 by caterpillar CodeData</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax 學習筆記</title>
      <link href="/2015/02/22/old%20posts/2015-02-22-ajax/"/>
      <url>/2015/02/22/old%20posts/2015-02-22-ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="ajax-如何運作？"><a href="#ajax-如何運作？" class="headerlink" title="ajax 如何運作？"></a>ajax 如何運作？</h2><ol><li><p>Ajax 立基於非同步 JavaScript 和 XML。簡單地說，Ajax 即運用非標準的<code>XMLHttpRequest</code>物件，並配合伺服器端的 Script 進行通訊。</p></li><li><p>Ajax 能夠傳送並接收各種格式的資訊，其中包括 XML、HTML 和 text 檔案。</p></li><li><p>Ajax 最吸引人之處在於它的〝非同步〞性質，這意味著 Ajax 能做各種動作，而無須更新整個頁面。如此便能透過使用者的事件更新頁面的一小部分。</p></li></ol><h2 id="step-1-發出http-request"><a href="#step-1-發出http-request" class="headerlink" title="step 1. 發出http request"></a>step 1. 發出http request</h2><ol><li>建立跨瀏覽器物件實體。為了使用 JavaScript 向伺服器發送 HTTP 請求，便需要一個能夠提供相關功能的類別實體（an instance of a class)。IE以ActiveX物件的方式引入，稱為<code>XMLHttp</code>，而Mozilla、Safari 及其他瀏覽器則是使用<code>XMLHttpRequest</code>類別產生物件。<pre><code class="js">var httpRequest;if (window.XMLHttpRequest) &#123; // Mozilla, Safari, ... httpRequest = new XMLHttpRequest();&#125; else if (window.ActiveXObject) &#123; // IE httpRequest = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#125;</code></pre></li><li>決定伺服器傳回資料的處理方式，此時你只要以 onreadystatechange 這個屬性指明要處理傳回值的 JavaScript 函式名稱即可，例如：<pre><code class="js">httpRequest.onreadystatechange = nameOfTheFunction;</code></pre>注意，指定的函式名稱後不加括號也沒有參數。這只是簡單的賦值，而非真的呼叫函數。除了指定函式名稱外，你也能用 Javascript 即時定義函式的技巧（稱為〝匿名函數〞）來定一個新的處理函式，如下：<pre><code class="js">httpRequest.onreadystatechange = function()&#123; // 做些事&#125;;</code></pre></li><li>確實發出request，此時需叫用 HTTP request 類別的 open() 及 send() 方法，如下：<pre><code class="js">httpRequest.open(&#39;GET&#39;, &#39;http://www.example.org/some.file&#39;, true);httpRequest.send(null);</code></pre></li></ol><ul><li><p>open()做的工作是初始化一些設定</p><ul><li>第一個參數是 HTTP request 的方法，也就是從 GET、POST、HEAD 等伺服器支援的方法中擇一使用。為遵循 HTTP 標準，請記得這些方法都是大寫，否則有的瀏覽器（如 Firefox）不會處理這些請求。其他可用的 HTTP request 方法的列表請參考 W3C 規格書。</li><li>第二個參數是請求頁面的 URL。基於安全考量，你不能叫用同網域以外的網頁。如果網域不同，則叫用 open() 時會出現「權限不足，拒絕存取」那類的錯誤。常見的錯誤多為在 domain.tld 的網站下呼叫 <a href="http://www.domain.tld/">www.domain.tld</a> 中的網頁，僅是一點點差別都不行。</li><li>第三個參數決定此 request 是否不同步進行，如果設定為 TRUE 則即使伺服器尚未傳回資料也會繼續執行其餘的程式，這也就是 AJAX 中第一個 A 代表的意義。</li></ul></li><li><p>send() 按下時真正送出request</p><ul><li>send() 的參數在以 POST 發出 request 時，可以是任何想傳給伺服器的東西，而資料則以查詢字串的方式列出，例如：<code>name=value&amp;anothername=othervalue&amp;so=on</code></li></ul></li></ul><h2 id="step-2-處理伺服器傳回的資料"><a href="#step-2-處理伺服器傳回的資料" class="headerlink" title="step 2: 處理伺服器傳回的資料"></a>step 2: 處理伺服器傳回的資料</h2><p>傳出 request 時必須提供處理傳回值的函數名稱，這個函數是用來處理伺服器的回應。</p><pre><code class="js">httpRequest.onreadystatechange = nameOfTheFunction;</code></pre><p>那麼來看看這個函數該做些什麼。首先，它必須檢查 request 目前的狀態。如果狀態值為 4 代表伺服器已經傳回所有資訊了，便可以開始解析所得資訊。</p><pre><code class="js">if (httpRequest.readyState == 4) &#123;    // 一切 ok, 繼續解析&#125; else &#123;    // 還沒完成&#125;</code></pre><p>readyState 所有可能的值如下：</p><ul><li>0 (還沒開始)</li><li>1 (讀取中)</li><li>2 (已讀取)</li><li>3 (資訊交換中)</li><li>4 (一切完成)</li></ul><p>接下來要檢查伺服器傳回的 HTTP 狀態碼。所有狀態碼列表可於 W3C 網站上查到，但我們要管的是 200 OK 這種狀態。</p><pre><code class="js">if (httpRequest.status == 200) &#123;    // 萬事具備&#125; else &#123;    // 似乎有點問題，或許伺服器傳回了 404 (查無此頁) 或者 500 (內部錯誤) 什麼的&#125;</code></pre><p>檢查傳回的 HTTP 狀態碼後，要怎麼處理傳回的資料就由你決定了。有兩種存取資料的方式：</p><p>整理一下httpRequest回傳的屬性</p><ul><li>readyState:<ul><li>０：尚未讀取</li><li>１：讀取中</li><li>２：已下載完畢</li><li>３：資訊交換中<ul><li>４：處理完畢</li></ul></li></ul></li><li>Status:即HTTP協定的狀態碼</li><li>responseText:傳回值視為字串用</li><li>responseXML:把傳回值視為 XMLDocument 物件</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://jck11.pixnet.net/blog/post/11624882-ajax%E6%A0%B8%E5%BF%83-xmlhttprequest%5B%E7%AD%86%E8%A8%98%5D">AJAX核心-XMLHttpRequest@神雕蝦</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/AJAX/%E4%B8%8A%E6%89%8B%E7%AF%87">上手篇 - AJAX - MDN</a></li></ul><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/AJAX">AJAX - MDN</a></li><li><a href="http://www.xul.fr/en-xml-ajax.html">Ajax Tutorial</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保哥 javascript 實戰課程筆記</title>
      <link href="/2015/02/22/old%20posts/2015-02-22-bogut-javascript-practical-notes/"/>
      <url>/2015/02/22/old%20posts/2015-02-22-bogut-javascript-practical-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript-語言特性"><a href="#javascript-語言特性" class="headerlink" title="javascript 語言特性"></a>javascript 語言特性</h2><ol><li><p>javascript是個動態型別語言，無法在開發期間宣告型別，意味著javascript的單一變數可能會隨時改變型別!</p></li><li><p>javascript是個弱型別的語言：意味著在開發時期無法指定javascript型別。只能在執行期間檢查型別。如果真的要知道這個變數的型態，只能在執行時透過typeof的方式將該變數目前的型別使用字串顯示。</p></li><li><p>javascript是個物件導向程式語言，除了五種 primitive type 以外其他都是物件。這部份會在下一節詳細的說明。</p></li></ol><h2 id="javascript-是個物件導向程式語言"><a href="#javascript-是個物件導向程式語言" class="headerlink" title="javascript 是個物件導向程式語言"></a>javascript 是個物件導向程式語言</h2><p>這節會從javascript是物件導向語言這個觀點延伸了解javascript的型別(type)。</p><ol><li><p>除了數值(number) 字串(string) 布林(boolean) null undefined 這五個是原始型別(Primitive Type)外，所有的東西都是物件。<br><img src="https://lh5.googleusercontent.com/-kJ98NBVTZi4/VOltbCHXWAI/AAAAAAAAE9I/VxitLDd70sc/w734-h522-no/JavaScriptTypes1.jpg"><br>(引用自<a href="http://codesupport.info/are-you-confuse-with-data-types-in-javascript-yet/">Are You Still Confuse with Data Types in JavaScript ?</a>)</p></li><li><p>Primitive Wrapper 是將 primitive type 包裝成物件， 提供了許多方便的方法。但其實primitive type也可以調用這些方法，因為在使用這些方法時，javascript運作的環境會自動將 prinitive type 轉換成 Primitive Wrapper。</p></li><li><p>下圖中橢圓形的是primitive type而方形的就代表的是物件，可以看出primitive wrapper也是一種物件。<br><img src="https://lh5.googleusercontent.com/-yhcDRauPQxU/VOlwYklxcCI/AAAAAAAAE9Y/Oapb6t3gwz4/w817-h850-no/javascript%2Bprimitive%2Bwrapper.jpg"><br>（引用自<a href="http://www.wintellect.com/devcenter/mharpur/what-is-the-difference-between-javascript-null-and-undefined">What is the difference between JavaScript null and undefined? – Wintellect DevCenter</a>)</p></li></ol><h2 id="javascript-的物件特性"><a href="#javascript-的物件特性" class="headerlink" title="javascript 的物件特性"></a>javascript 的物件特性</h2><p>了解javascript的型別之後，接下來我們要來了解javascript的物件特性。</p><h3 id="1-JavaScript物件是個容器-Container-。"><a href="#1-JavaScript物件是個容器-Container-。" class="headerlink" title="1. JavaScript物件是個容器(Container)。"></a>1. JavaScript物件是個容器(Container)。</h3><p>每個物件包含了<code>屬性(Property)</code>和<code>方法(Method或Function)</code>。</p><pre><code class="js">var car=&#123;&#125;;           //宣告物件(Object)car.nume = &quot;BMW&quot;;     //name是car的屬性(Property)car.start=function()&#123; //函式(Function)    return &quot;OK&quot;;&#125;var car_name = car[&#39;name&#39;];</code></pre><h3 id="2-JavaScript-物件其實就是-HashMap"><a href="#2-JavaScript-物件其實就是-HashMap" class="headerlink" title="2. JavaScript 物件其實就是 HashMap"></a>2. JavaScript 物件其實就是 HashMap</h3><ul><li><p>所有屬性名稱一定是字串</p></li><li><p>取得car的屬性name的內容有兩種取法 一種是物件取法<code>car.name</code> 和 另一種是陣列取法<code>car[&#39;name&#39;]</code>。</p></li><li><p>需要注意的是不能用數字當變數，所以<code>cat.007</code> is undefined ，但是妳可以使用<code>cat[&#39;007&#39;]</code>。</p></li></ul><p>（這部份code school的javascript課程有更多範例，未來有時間的時候再補充。）</p><h3 id="3-JavaScript沒有Class概念，所以你可以不需要constructor，就能建立物件"><a href="#3-JavaScript沒有Class概念，所以你可以不需要constructor，就能建立物件" class="headerlink" title="3. JavaScript沒有Class概念，所以你可以不需要constructor，就能建立物件"></a>3. JavaScript沒有Class概念，所以你可以不需要constructor，就能建立物件</h3><ol><li>javascript的constructor(建構式)就是函式，又稱建構式函式。</li><li>使用 new 關鍵字，透過建構式建立物件。</li></ol><pre><code class="js">function person(first, last, age, eyecolor) &#123;    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;&#125;var myFather = new person(&quot;John&quot;, &quot;Doe&quot;, 50, &quot;blue&quot;);var myMother = new person(&quot;Sally&quot;, &quot;Rally&quot;, 48, &quot;green&quot;);</code></pre><pre><code class="js">var myFather = new person(&quot;John&quot;, &quot;Doe&quot;, 50, &quot;blue&quot;);var myMother = new person(&quot;Sally&quot;, &quot;Rally&quot;, 48, &quot;green&quot;);</code></pre><ol><li>因為javascript沒有Class概念，所以必須借助prototype的特性。</li></ol><h3 id="4-javascript的物件可以不需先行宣告就可以自由擴充屬性"><a href="#4-javascript的物件可以不需先行宣告就可以自由擴充屬性" class="headerlink" title="4. javascript的物件可以不需先行宣告就可以自由擴充屬性"></a>4. javascript的物件可以不需先行宣告就可以自由擴充屬性</h3><ol><li><p>這點是我之前學習時沒有發現的微妙之處，一般物件導向程式語言如java一定要先行宣告變數才能使用，而javascript卻不需要。</p></li><li><p>因為原始型別無法自由擴增屬性，所以針對 number,string,boolean有提供原始型別包裹方式，包裹成物件後，即可透過該物件自由擴增屬性。</p></li><li><p>物件也可以透過下列的方法轉換成原始型別。<code>valueOf()</code> : 物件型別轉成原始型別。<code>toString()</code> : 物件型別轉成字串型別。</p></li></ol><pre><code class="js">  //物件範例  var obj = &#123; &#39;a&#39;:1, &#39;b&#39;:2 &#125;;  //擴增屬性  obj.c = 3;  //這時候obj就會有a, b, c三個屬性了  //刪除屬性  elete obj.b;  //這時候obj又只剩下a, c三個屬性了</code></pre><h3 id="5-原生物件與宿主物件"><a href="#5-原生物件與宿主物件" class="headerlink" title="5. 原生物件與宿主物件"></a>5. 原生物件與宿主物件</h3><p>javascript有兩種物件：</p><ul><li>原生物件(Native)，也可以叫做內建物件，例如Array、Date或是使用者自行定義(後面會提到)</li><li>宿主物件(Host)，例如window物件和所有DOM物件。</li><li>所有物件資料都從根物件(就是window)開始連結(chain)。</li></ul><p>怎麼去分辨這兩種物件，只要看看物件能不能在瀏覽器底下執行就可以，如果只能在瀏覽器底下執行，就是Host物件，如果在非瀏覽器的地方也可以執行，那就是Native。</p><h2 id="物件、變數與型別的關係"><a href="#物件、變數與型別的關係" class="headerlink" title="物件、變數與型別的關係"></a>物件、變數與型別的關係</h2><ul><li><p>物件(object)</p><ul><li>記憶體中的資料</li><li>僅存在執行時期</li></ul></li><li><p>變數(variable)</p><ul><li>用來儲存物件的記憶體位址(指標)</li><li>在開發時期進行宣告(使用var關鍵字)</li></ul></li><li><p>型別(type)</p><ul><li>用來標示物件的種類</li><li>不同型別可能會有不同的預設屬性與方法</li></ul></li></ul><p><img src="https://lh5.googleusercontent.com/-dtWA3IrgWbw/VOmNEZi5u8I/AAAAAAAAE98/m3Xk4tBMpzY/w577-h388-no/01333w234234willcourse.jpg"><br>(引用自<a href="http://windwaterbo-blog.logdown.com/posts/222722-baoge-typescript-combat-development-and-javascript-javascript-basic-beliefs-review">梅西的小腦袋</a>)</p><h3 id="範例：物件、變數與型別之間的關係"><a href="#範例：物件、變數與型別之間的關係" class="headerlink" title="範例：物件、變數與型別之間的關係"></a>範例：物件、變數與型別之間的關係</h3><p>請問以下出現過幾個記憶體物件? 出現過幾個變數? 出現過幾個型別?</p><pre><code class="js"> var a; a=1; a=&quot;a&quot;; a=&quot;a&quot;+a;</code></pre><p><img src="https://lh6.googleusercontent.com/-CLFAmse7xK8/VOmLPzb_mAI/AAAAAAAAE9s/0h3IJXlCU8o/w673-h500-no/02willcourse.jpg"><br>(引用自<a href="http://windwaterbo-blog.logdown.com/posts/222722-baoge-typescript-combat-development-and-javascript-javascript-basic-beliefs-review">梅西的小腦袋</a>)</p><p>ANS : 5個記憶體物件、1個變數、3個型別  ‘</p><h2 id="函式物件-funciton"><a href="#函式物件-funciton" class="headerlink" title="函式物件( funciton )"></a>函式物件( funciton )</h2><p>函式是個特殊的物件(其實函式本身有一個內部物件，用來存放在函式中宣告的變數、物件與屬性，只是外部無法存取該內部物件。)，有兩大特色</p><ol><li>函式是Javascript的一級物件(first-class object)</li></ol><ul><li>可以被動態建立</li><li>可以指定給變數，也可以複製給其他變數</li><li>可以擁有自己的屬性或方法(如同物件的特性)</li></ul><ol start="2"><li>提供變數的作用域(scope)，換句話說，作用域是看function範圍，而不是 {} 的符號範圍，跟C#不一樣。</li></ol><h3 id="函式表示法"><a href="#函式表示法" class="headerlink" title="函式表示法"></a>函式表示法</h3><ul><li>表式式<ul><li>具名表示<pre><code>var add = function add(a, b)&#123;return a+b;&#125;;</code></pre></li><li> 匿名表示<pre><code>var add = function (a, b)&#123;return a+b;&#125;;</code></pre></li></ul></li><li>   宣告式</li><li>具名宣告<pre><code>function add(a, b)&#123;return a+b;&#125;;</code></pre></li><li>匿名宣告<pre><code>function (a, b)&#123;return a+b;&#125;;</code></pre></li></ul><p>使用匿名的方式，在偵錯或是效能調教時，會無法看出確切的函式位置，盡量避免。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>保哥javascript實戰開發課程中還有更多的內容，本篇學習筆記重點放在理解 javascript 的重要特性和 javascript 的物件特性，函式部分只有稍稍帶過，更詳細的筆記將會在研讀<a href="http://www.codedata.com.tw/category/javascript/5">JavaScript語言核心系列</a>的時候記錄。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://sfcer0414.logdown.com/posts/193415-javascript-concept-of-finishing-school-experience-1">JavaScript觀念整理-保哥上課心得 (1) « Coding For Fun</a></li><li><a href="http://sfcer0414.logdown.com/posts/194246-javascript-concept-of-finishing-school-experience-2">JavaScript觀念整理-保哥上課心得 (2) « Coding For Fun</a></li><li><a href="http://l7960261.blogspot.tw/2014/01/javascript.html">Wilson.S.Weng: JavaScript 基礎訓練</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排版練習2：PSD to html with Bootstrap</title>
      <link href="/2015/02/12/old%20posts/2015-02-12-psd-to-html-with-bootstrap/"/>
      <url>/2015/02/12/old%20posts/2015-02-12-psd-to-html-with-bootstrap/</url>
      
        <content type="html"><![CDATA[<p>第二個練習一樣學習tuts的課程，選擇課程的好處是做到一半不知道該怎麼做時，有video解答可以看。看看高手怎麼做總是比自己亂弄的好的多。我選擇的課程是需要付費的，tuts還有一些免費的教材可以學習，影片或是文章教學都有，有興趣的自己發掘囉。第二個練習跟第一個練習不同之處在於本練習會使用bootstrap的grid system來排版，並且icon與logo會使用sprite css的方式來製作。</p><h2 id="Sprite-sheets"><a href="#Sprite-sheets" class="headerlink" title="Sprite sheets"></a>Sprite sheets</h2><p>sprite 說的是利用將 icon 集中在一張圖片上，藉由CSS設定不同顯示區域，來實現每一個不同的icon。這樣的好處是很可降低圖片request數，減少server負擔。現在我們要使用sprite的方法實作的是右上角的五個social-icon和左上角的mumbo logo。</p><h2 id="Create-Sprite-Sheets"><a href="#Create-Sprite-Sheets" class="headerlink" title="Create Sprite Sheets"></a>Create Sprite Sheets</h2><ol><li>首先在photoshop中用方框工具圈選5個icon</li><li>點選<code>file &gt; copy merge</code>複製五個icon</li><li><code>file &gt; new</code> 建立新檔案，圖像大小設定為250 X 250。</li><li>開啟ruler(view &gt; ruler)</li><li>從左側ruler拉進隔線每50px拉一條，這是為了等等區隔複製過來的icon，每個間隔會是50px。</li><li>使用方框工具(第二個工具)選取後，用移動工具(第一個工具)將icon對齊左上角(如果右下角的layer選錯的話，方框工具會選不到圖案）。</li><li>接著將mumbo logo也複製進來，放在第二排，對齊左上角，製作好的photoshop檔案會是長得像這樣。<br>註:<br><img src="https://lh5.googleusercontent.com/-kZxU_a73YTk/VNyjQ0_8wfI/AAAAAAAAE6g/LXCLe6pwyL4/w1410-h628-no/sprite.jpg"></li><li>將photoshop檔案 save for web，存成檔名為sprite.png的檔案。放在imgs資料夾下。</li><li>製作好圖片之後來實際做做看social-list，關鍵是將background設成sprite.png。再利用個別的class鎖定不同的位置，這樣就會顯示不同的icon。<pre><code class="css">.social-list li&#123;display: inline-block;margin: 0 2px;&#125;.social-list li a &#123;display: inline-block;width: 37px;height: 37px;background: url(../imgs/sprite.png) no-repeat 0 0;&#125;.social-list li a.vimeo &#123;background-position: -50px 0;&#125;.social-list li a.lastfm &#123;background-position: -100px 0;&#125;.social-list li a.linkedin &#123;background-position: -152px 0;&#125;.social-list li a.dribble &#123;background-position: -200px 0;&#125;</code></pre></li><li>這樣就完成social-icon了。<br><img src="https://lh5.googleusercontent.com/-uBsU7-pyW8U/VNy7yRTObPI/AAAAAAAAE7A/DMfdyVFwG1w/w734-h198-no/02mumbo.jpg"></li><li>接著要把左上方的logo用sprite的手法改寫。<pre><code class="css">header hgroup h1 a&#123;display: block;width: 172px;height: 25px;background: url(../imgs/sprite.png) no-repeat 0 -50px;&#125;</code></pre></li><li>如此一來便大功告成。使用photoshop手動製作sprite是比較沒效率的作法，現在已經有很多方便的工具可以使用，藉由這個練習了解sprite的原理，之後再學習快速開發的工具便容易許多。<br><img src="https://lh4.googleusercontent.com/-4Np5E53Y3Bs/VNy7xCZCx8I/AAAAAAAAE60/EcqUdwQ5P30/w992-h219-no/01mumbo.jpg"></li></ol><h2 id="學習筆記"><a href="#學習筆記" class="headerlink" title="學習筆記"></a>學習筆記</h2><ol><li><p>先來進行header的h1與h2排版，要達成的效果如下圖。還在苦惱怎麼使用純CSS設定長寬和box-model讓他服服貼貼的時候，突然發現有<code>.pull-left</code>可以用。真是太方便了。<br><img src="https://lh4.googleusercontent.com/-4Np5E53Y3Bs/VNy7xCZCx8I/AAAAAAAAE60/EcqUdwQ5P30/w992-h219-no/01mumbo.jpg"></p></li><li><p>使用<code>font-style: italic;</code>就可以讓標題有傾斜的效果。<br><img src="https://lh3.googleusercontent.com/-SJrEQRDSV8k/VN2vuvZQLeI/AAAAAAAAE7U/k4DQG9hf34U/w738-h118-no/titile.jpg"></p></li><li><p>如何讓li前面的dot變色？對li加上<code>color: #ff6b39;</code>就可以將dot一同變色。<br><img src="https://lh6.googleusercontent.com/ORaHhrfnK-RVQ7sUVN_6HgtGUMoww-gRJ5a8hFXqgPY=w733-h138-no"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> PSD to HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排版練習1：PSD to HTML Porfolio</title>
      <link href="/2015/02/12/old%20posts/2015-02-12-psd-to-html-porfolio/"/>
      <url>/2015/02/12/old%20posts/2015-02-12-psd-to-html-porfolio/</url>
      
        <content type="html"><![CDATA[<p>最近在訓練排版的熟練度，要快速打造protype基本的前端技能是必須的。我選擇的教材是tuts的psd to html porfolio。課程中介紹了詳細的切版流程，從切圖到建構html到用css排版都有詳細的介紹。本篇是psd to html也就是排版練習第一篇，練習的是使用純css來刻網站。接下來會練習更多題目，直到我掌握基本的排版技巧為止。</p><h2 id="photoshop基本操作"><a href="#photoshop基本操作" class="headerlink" title="photoshop基本操作"></a>photoshop基本操作</h2><p>psd to html 顧名思義就是把設計師做好的 photoshop 檔案，用 html 和 css 刻成網頁。這個練習很棒的地方就是模擬了一個設計師跟你合作。所以首先你的電腦裡需要安裝photoshop。我使用的是photoshop cc 2014版本。</p><ol><li>測量元素距離</li><li>查看字型、字體大小和行高</li><li>查看顏色</li></ol><h2 id="chrome基本操作"><a href="#chrome基本操作" class="headerlink" title="chrome基本操作"></a>chrome基本操作</h2><ol><li>使用page ruler測量網頁元素距離，可以看看</li><li>在dev tool修改css屬性即時更新畫面效果。</li><li>在dev tool中觀看html結構（雖然是自己刻的但是還是會忘記呀-.-）。</li><li>使用 livereload 套件即時更新修改結果。</li></ol><h2 id="開始實作"><a href="#開始實作" class="headerlink" title="開始實作"></a>開始實作</h2><ol><li>首先是header的部份，使用具有透明度的圖片格式會是png，加上背景色之後就會呈現以下效果。設定好背景與圖片之後使用float進行排版即完成。<br><img src="https://lh6.googleusercontent.com/-8Q9iZXAZiqk/VNw2LXZr5bI/AAAAAAAAE6A/ktsL_idFtFM/w1423-h62-no/03.jpg"></li><li>第二個部分是<code>section .feature</code>，使用的排版技巧是將三個<code>li</code>的寬度(width)設成33.333%，再使用<code>float:left</code>進行排版。需要注意的是，加上border時會產生寬度大於原本container寬度的bug，使用<code>box-sizing:border-box</code>將內部寬度大於原本ul寬度的問題修正掉。中間image的置中的效果其實是用anchor先包覆住image與h3，接著設定<code>padding-top:100px</code>來固定他的位置。<br><img src="https://lh3.googleusercontent.com/-6LXa00qZ29Y/VNw2KO3IG-I/AAAAAAAAE50/12hFpINuOxE/w1518-h464-no/04.jpg"></li><li>第三部分是<code>section .porfolio</code>，使用的排版技跟剛剛的<code>.feature有所不同</code>。首先設定<code>.container</code>的大小，本練習中<code>.container</code>的寬度設為900px。因為需要三個20px的間隔，所以900px-20px * 3=840px。最後除以四210px就是個元素的寬度<br><img src="https://lh3.googleusercontent.com/-IyV80Ie1x_o/VNw2H5tbK4I/AAAAAAAAE5o/StvGRpSkwL8/w1438-h450-no/01.jpg"></li><li>最後介紹的是footer，這邊使用的排版技巧跟feature相同，寬度設定為33.333%後使用<code>float:left</code>進行排版。Registration Form使用的排版技巧：設定input的寬度為100%，這樣就會看起來一列有一個input。對input設定padding會讓placeholer跟border有所空間，看起來更美觀。</li></ol><h2 id="練習後心得"><a href="#練習後心得" class="headerlink" title="練習後心得"></a>練習後心得</h2><p>這個練習難易度較低，但是也因為如此可以熟練chrome、text-editor和photoshop等必備的開發工具。對我來說是很適合的練習。練習過後對一些常用的CSS屬性更加熟悉，對開發速度是很有幫助的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> PSD to HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 套件整理</title>
      <link href="/2015/02/02/old%20posts/2015-02-02-atom-kit-recommended/"/>
      <url>/2015/02/02/old%20posts/2015-02-02-atom-kit-recommended/</url>
      
        <content type="html"><![CDATA[<p>  <code>atom-color-highlight</code><br>  在編輯器中即時顯示色碼對應的顏色。<br>  <code>atom-development-server</code><br>  一個很強大的東西，自己玩玩看吧。<br>  <code>atom-html-preview</code><br>  老實說我不太會用這個套件，但是很多人下載，我就跟著下載了＠＠<br>  <code>autocomplete-plus</code><br>  可以即時提示可用snippet或是路徑的套件。<br>  <code>autocomplete-snippets</code><br>  搭配autocomplete-plus可以提示套件內的內容。懶人可以多多使用，爽度很高。<br>  <code>bootstrap3-snippets</code><br>  我所使用的bootstrap3-snippet<br>  <code>color-picker</code><br>  顏色選擇器<br>  <code>docblockr</code><br>  很好用的加強comment的套件，在block comment中按下enter就會自動多加個星號。很方便。建立block comment的快捷鍵是<code>/**</code>加上<code>tab</code>。<br>  <code>emmet</code><br>  這就不用多做介紹了，網頁工程師必裝套件，如果不太清楚的話請google一下有很多介紹的好文。值得注意的是我會將預設的tab鍵改成慣用的按鍵，以免與snipppet相衝。<br>  <code>fancy-new-file</code><br>  快速建立檔案的套件，可以提示目前有的資料夾路徑。<br>  <code>gist-it</code><br>  用來將目前檔案或是選取的範圍製作成gist的工具。<br>  <code>gistom</code><br>  可以從自己github呼叫想要使用的gist的工具。<br>  <code>git-history</code><br>  配合tree-view使用可以顯示沒有commit過的檔案。<br>  <code>highlight-column</code><br>  <code>highlight-line</code><br>  以上兩者可以幫助寫程式對齊的問題，有時候會看到眼花很好用的XD。<br>  <code>highlight-selected</code><br>  選取的地方highlight顯示。<br>  <code>javascript-snippets</code><br>  <code>language-haml</code><br>  <code>linter</code><br>  可以當做debugger的好用工具，配合以下幾個套件使用，可以選擇性安裝你所撰寫的語言。<br>  <code>linter-csslint</code><br>  <code>linter-erb</code><br>  <code>linter-htmlhint</code><br>  <code>linter-jshint</code><br>  <code>livereload</code><br>  可以即時更新網頁的套件。<br>  <code>minimap</code><br>  右方出現小圖示讓我們知道目前畫面在檔案的哪一區段。<br>  <code>minimap-color-highlight</code><br>  可以顯示目前畫面在minimap的哪一區段。<br>  <code>open-in-browser</code><br>  可以在預設瀏覽器打開目前檔案的套件。<br>  <code>package-sync</code><br>  創造目前package的清單，值得注意的是如果之前已經建立過了，他將不會覆蓋，要手動刪除<code>.atom/package.cson</code>檔案，在進行新增。<br>  <code>rails-navigation</code><br>  配合vim-mode使用，可以快速切換model view controller。<br>  <code>rails-snippets</code><br>  我慣用的rails snippet。<br>  <code>save-session</code><br>  可以記錄目前檔案修改到哪邊的套件，跟另一套remember-session比起來的好處是啟動速度快非常多，所以我使用這套。<br>  <code>script</code><br>  可以在atom中直接執行程式碼的工具。<br>  <code>seti-syntax</code><br>  <code>seti-ui</code><br>  我所使用的佈景主題。<br>  <code>tabs-to-spaces</code><br>  可以將tab轉為空格。<br>  <code>vim-mode</code><br>  可以在atom中使用vim的指令。<br>  <code>zentabs</code><br>  限制開啟的分頁最多不超過5個。</p><p> 最後附上我的package清單，</p><pre><code>    ##packages.cson  &#39;packages&#39;: [  &#39;atom-color-highlight&#39;  &#39;atom-development-server&#39;  &#39;atom-html-preview&#39;  &#39;autocomplete-plus&#39;  &#39;autocomplete-snippets&#39;  &#39;bootstrap3-snippets&#39;  &#39;color-picker&#39;  &#39;docblockr&#39;  &#39;emmet&#39;  &#39;fancy-new-file&#39;  &#39;gist-it&#39;  &#39;gistom&#39;  &#39;git-history&#39;  &#39;highlight-column&#39;  &#39;highlight-line&#39;  &#39;highlight-selected&#39;  &#39;javascript-snippets&#39;  &#39;language-haml&#39;  &#39;linter&#39;  &#39;linter-csslint&#39;  &#39;linter-erb&#39;  &#39;linter-htmlhint&#39;  &#39;linter-jshint&#39;  &#39;livereload&#39;  &#39;minimap&#39;  &#39;minimap-color-highlight&#39;  &#39;open-in-browser&#39;  &#39;package-sync&#39;  &#39;rails-navigation&#39;  &#39;rails-snippets&#39;  &#39;save-session&#39;  &#39;script&#39;  &#39;seti-syntax&#39;  &#39;seti-ui&#39;  &#39;tabs-to-spaces&#39;  &#39;vim-mode&#39;  &#39;zentabs&#39;]</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Text Editor </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails - 拆解 Form Helper 以 Checkbox 為例</title>
      <link href="/2015/01/18/old%20posts/2015-01-18-rails-form-helper/"/>
      <url>/2015/01/18/old%20posts/2015-01-18-rails-form-helper/</url>
      
        <content type="html"><![CDATA[<p>使用Rails Form Helper時，很重要的一點是要知道Form Helper會產生什麼樣的Html Code，了解之，觀察之，這樣你才能修改成自己需要的樣子。如果要在form中加入check box，可以使用collection_check_boxes這個在rails 4新加入的form helper來完成。我們就以checkbox為例，來練習觀察html吧！</p><h2 id="Collection-Check-Box"><a href="#Collection-Check-Box" class="headerlink" title="Collection Check Box"></a>Collection Check Box</h2><p>第一個來使用到的是collection_check_boxes，完整的參數是<code>collection_check_boxes(object, method, collection, value_method, text_method, options = &#123;&#125;, html_options = &#123;&#125;, &amp;block)</code>，一看覺得眼花撩亂，沒關係，直接來看例子。首先我們有兩個model，分別為Post和Cateogry，他們是多對多的關係。現在我們想要在新增Post的時候可以用checkbox選擇Category。</p><pre><code class="erb">&lt;%= f.label &quot;Categories&quot; %&gt;&lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %&gt;        &lt;%= cb.label( class:&quot;checkbox inline&quot;)&#123;cb.check_box(class:&quot;checkbox&quot;)+cb.text&#125; %&gt;&lt;% end %&gt;</code></pre><p>產生的html是</p><pre><code class="html">&lt;input id=&quot;post_category_ids_1&quot; name=&quot;post[category_ids][]&quot; type=&quot;checkbox&quot; value=&quot;1&quot;&gt;&lt;label for=&quot;post_category_ids_1&quot;&gt;food&lt;/label&gt;&lt;input id=&quot;post_category_ids_2&quot; name=&quot;post[category_ids][]&quot; type=&quot;checkbox&quot; value=&quot;2&quot;&gt;&lt;label for=&quot;post_category_ids_2&quot;&gt;Play&lt;/label&gt;&lt;input name=&quot;post[category_ids][]&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;</code></pre><p>使用binding.pry來看看create送出的params有哪些東西。</p><p><img src="https://lh5.googleusercontent.com/prEm9rc0sIHt53jGcgC-dy7Ej3hjESh1-XymMINIzWE=w1743-h143-no"></p><p>用binding pry把form傳出的資訊抓出來看可以發現，params中傳送的key正是使用category_ids來做為名稱，因為checkbox的name都是相同的，所以只會有一個key(這邊不懂的話請去了解一下checkbox的html與select的html有什麼不一樣)。而value就是選擇的選項，因為我在form中勾選了第一個選項，所以顯示為”1”。label的for屬性，代表這是給哪一個專屬的<code>id</code>所使用的label，for與id常常搭配使用。</p><h2 id="手刻html版的checkbox"><a href="#手刻html版的checkbox" class="headerlink" title="手刻html版的checkbox"></a>手刻html版的checkbox</h2><p>知道會產生怎麼樣的form和知道會傳出怎麼樣的params以後我就可以手刻一個html版的checkbox。</p><pre><code class="erb">    &lt;% Category.all.each do |category| %&gt;      &lt;input id=&quot;post_category_ids_&lt;%= category.id %&gt;&quot; name=&quot;post[category_ids][&lt;%= category.id %&gt;]&quot;            type=&quot;checkbox&quot; value=&quot;&lt;%= category.id %&gt;&quot; /&gt;      &lt;label for=&quot;post_category_ids_&lt;%= category.id %&gt;&quot;&gt;&lt;%= category.name %&gt;&lt;/label&gt;    &lt;% end  %&gt;</code></pre><p>刻完之後更加了解了form中attribute的涵意(每個都要用手打阿)，在ruby on rails還沒有form helper時也是得要用手刻，這樣做的好處是可以對html更加的印象深刻，當然，如果閉著眼睛都記得這些tag怎麼使用了，再來使用form helper也不遲:)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails note : Require Creator</title>
      <link href="/2015/01/13/old%20posts/2015-01-13-rails-note-require-creator/"/>
      <url>/2015/01/13/old%20posts/2015-01-13-rails-note-require-creator/</url>
      
        <content type="html"><![CDATA[<p>增加一個叫做Creator的別名，讓我們在判別作者時文意更加通順。</p><h2 id="設定發文者"><a href="#設定發文者" class="headerlink" title="設定發文者"></a>設定發文者</h2><p>我們透過foreign key新增一個叫做creator的別名。作法是修改model/post.rb原本的</p><pre><code class="rb">    belongs_to :user</code></pre><p>改成</p><pre><code class="rb">    belongs_to :creator, foreign_key: &quot;user_id&quot;, class: &quot;User&quot;</code></pre><p>原本我們要使用post.user來取得文章作者，現在可以使用post.creator來取得作者。</p><h2 id="只有作者可以新增或修改文章"><a href="#只有作者可以新增或修改文章" class="headerlink" title="只有作者可以新增或修改文章"></a>只有作者可以新增或修改文章</h2><ol><li><p>到posts controller加上<code>before_action :require_creator, only: [:edit, :update]</code></p></li><li><p>在application controller中加入一個access dined的方法，這個方法的目的是「如果不是creator來新增或修改文章，就會出現錯誤訊息」。</p><pre><code class="rb">class ApplicationController &lt; ActionController::Base...   def access_denied     flash[:error] = &quot;You can&#39;t do that.&quot;     redirect_to root_path   endend</code></pre></li><li><p>接著在posts controller加上剛剛使用before action驗證的方法，require_creator驗證了兩件事情，第一是你必須登入，第二則是你必須是文章的作者。</p><pre><code class="rb">def require_creator   access_denied unless logged_in? &amp;&amp; (current_user == @post.creator)end</code></pre></li></ol><p>這樣子就做完發文的驗證了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 常用快速鍵</title>
      <link href="/2015/01/10/old%20posts/2015-01-10-atom-shortcuts/"/>
      <url>/2015/01/10/old%20posts/2015-01-10-atom-shortcuts/</url>
      
        <content type="html"><![CDATA[<h2 id="Sublime-快速鍵"><a href="#Sublime-快速鍵" class="headerlink" title="Sublime 快速鍵"></a>Sublime 快速鍵</h2><p>Sublime有的快速鍵Atom幾乎都有，以下是我有在使用的一些快速鍵。</p><h3 id="基本的移動與選取"><a href="#基本的移動與選取" class="headerlink" title="基本的移動與選取"></a>基本的移動與選取</h3><p>游標移至行頭/行尾<br>cmd + 左 / 右</p><p>跳到頁首頁尾<br>cmd + 上 或 下</p><p>游標移至上個單字 / 下個單字<br>option + 左 / 右</p><p>選取上個單字 / 下個單字<br>option + shift + 左 / 右</p><p>選取一行，多按幾次可以往下選<br>cmd + l</p><p>快速換行<br>ctrl + g 之後輸入要跳至的行數</p><h3 id="批次編輯多個單字或是編輯多行"><a href="#批次編輯多個單字或是編輯多行" class="headerlink" title="批次編輯多個單字或是編輯多行"></a>批次編輯多個單字或是編輯多行</h3><p>選取相同文字一次編輯，可按多次會選擇需要修改的相同字<br>cmd + d</p><p>一次編輯數行<br>cmd + shift + l</p><h3 id="批次移動單字-移動多行"><a href="#批次移動單字-移動多行" class="headerlink" title="批次移動單字/移動多行"></a>批次移動單字/移動多行</h3><p>整段選取改變位置<br>cmd + control + 上 或 下</p><p>整段選取改變位置（左右）<br>cmd + [ 或 ]</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在「整個project」內搜尋關鍵字。<br>cmd + shift + f</p><p>貼上時，符合縮排<br>cmd + shift + v</p><h2 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h2><p>ctrl + w 用html tag包覆選擇文字</p><p>選取文字 ＋ [ 或 {<br>配合原生的快速鍵：選取文字後直接按[或{，就可以包住選取文字。這樣想把<strong>文字包起來</strong>的問題可以說是完全解決。</p><p>ctrl + m<br>在切換到bracket的另一邊</p><p>alt + tab<br>擴展tag</p><h2 id="tree-view"><a href="#tree-view" class="headerlink" title="tree view"></a>tree view</h2><p>ctrl + 0 focus tree view<br>m 修改路徑或者名稱<br>a 增加檔案<br>delete 刪除檔案<br>d 複製重複檔案</p><h2 id="Vim-mode-Package"><a href="#Vim-mode-Package" class="headerlink" title="Vim mode Package"></a>Vim mode Package</h2><p>用Vim的指令來做一些畫面的移動，不過因為有lazy search，就算不是很熟悉Vim開發流程還是可以很順暢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Text Editor </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails Project 1 URL Shortener</title>
      <link href="/2015/01/04/old%20posts/2015-01-04-rails-project-1-url-shorter/"/>
      <url>/2015/01/04/old%20posts/2015-01-04-rails-project-1-url-shorter/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接下來我要藉由實作一些比較小型的Rails Project，來練習工程師必備的技能，其中最主要訓練的目標是能抓出需要實作的use case與如何從use case中實踐功能。因為沒有網頁的相關背景，如何磨練Html css javascript的基本實作能力也是這一階段的重點。</p><p>熟悉了如何使用Rails完成所要的需求與一些常見功能的開發之後，下一階段可以是學習Rails如何跟API互動或是開始學習Design Patterns。學習Dessign Pattern的原因有：一是可以讀的懂程式碼，二是了解為什麼要這麼寫。anyway，先把眼前的事情做好最重要let’s do it！</p><h2 id="Use-Case-Page-Flow-and-Data"><a href="#Use-Case-Page-Flow-and-Data" class="headerlink" title="Use Case , Page Flow and Data"></a>Use Case , Page Flow and Data</h2><p>在練習實作Project的過程中，我會格外地注意Use Case、Page Flow和Data。一個網站從無到有，便是先抓出使用者的需求，也就是Use Case，可以表達出身為不同的使用者，各需要哪些需求。</p><h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><p>Url Shortener顧名思義要能夠縮減網址，我們可以抓出幾個需求。</p><ul><li>使用者可以使用URL Shortener縮短網址</li><li>輸入URL Shortener產生的網址時必須連接到原網址。</li></ul><h3 id="Page-Flow"><a href="#Page-Flow" class="headerlink" title="Page Flow"></a>Page Flow</h3><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><h1 id="URL-Shortener-in-Rails"><a href="#URL-Shortener-in-Rails" class="headerlink" title="URL Shortener in Rails"></a>URL Shortener in Rails</h1><h2 id="1-建立專案"><a href="#1-建立專案" class="headerlink" title="1. 建立專案"></a>1. 建立專案</h2><pre><code>rails new url_shortener</code></pre><h2 id="2-route中加入url的resource，並指定首頁為url-new"><a href="#2-route中加入url的resource，並指定首頁為url-new" class="headerlink" title="2. route中加入url的resource，並指定首頁為url#new"></a>2. route中加入url的resource，並指定首頁為<code>url#new</code></h2><pre><code class="rb">root to: :redirect(&#39;/urls/new&#39;)resources :urls</code></pre><h2 id="3-建立controller，controller要加s"><a href="#3-建立controller，controller要加s" class="headerlink" title="3. 建立controller，controller要加s"></a>3. 建立controller，controller要加s</h2><pre><code>rails generate controller urls</code></pre><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><ol><li><p>建立model，名詞是單數。要使用的Model有兩個欄位，original用來記錄原始網址，random_id用來記錄縮址。</p><pre><code>rails g model url original:string random_id:string</code></pre></li><li><p>在model加上validates，這邊的意思是儲存時一定要有「原網址」的欄位。</p><pre><code class="rb">validates :original, presence: true</code></pre></li></ol><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>繼續完成controller，從index開始著手，在index我們希望可以看到全部儲存的連結。</p><pre><code class="ruby">class UrlsController &lt; ApplicationController  def  index      @urls = Url.all  endend</code></pre><h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><p>在action show我們希望可以做到的功能是「當使用者輸入縮址時，會轉址到原網址」，這也是也這個URL Shortener的核心功能。</p><pre><code class="rb">class UrlsController &lt; ApplicationController  .  .  .  def show      url = Url.where( random_id: params[:id] ).first    if url        redirect_to url.original    else        render &quot;index&quot;    end  endend</code></pre><h4 id="New"><a href="#New" class="headerlink" title="New"></a>New</h4><p> 在action new要做的事情是「當使用者輸入原始網址，會產生相對應的縮網址」</p><pre><code class="rb">class UrlsController &lt; ApplicationController  .  .  .  def new      @url = Url.new    letters = [(&#39;a&#39;..&#39;z&#39;),(&#39;A&#39;..&#39;Z&#39;)].map&#123;|i| i.to_a&#125;.flatten    @url.random_id = (0...8).map&#123; letters[rand(letters.length)]&#125;.join  endend</code></pre><p>letter陣列用來裝所有的字母包含大寫A-Z與小寫a-z。flatten使屬於Array的method是用來把許多陣列合併成單一的陣列。第二行</p><p><a href="http://railsfun.tw/t/and/46">產生隨機小寫英數字 幾種方法 and 效能</a></p><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><p>儲存一筆url資料，記得要使用strong parameter核對欄位。</p><pre><code class="rb">class UrlsController &lt; ApplicationController    .  .  .  def urls_params    params.require(:url).permit(:original, :random_id)  end  def create    @url = Url.new(urls_parmas)    if @url.save      redirect_to url_path    else      render &quot;new&quot;    end    endend</code></pre><p>比較show與new可以發現，前面有加@的變數，是view會使用到的變數。如果view不會用到，那就不要添加@，以免造成混淆，這樣在閱讀程式碼的時候，可以更清楚的知道這些變數作用在哪些地方。</p><p>來複習一下render的用法主要有四種：第一種是直接回傳結果，回傳的格式可以是xml,json,text…等等檔案格式。範例：<code>render text: &quot;hello world&quot;</code>、<code>render json: @event.to_json</code>。第二種是render template。可以直接指定template的路徑如：<code>render &quot;/events/index.html.erb&quot;</code>。如果是同controller的action可以寫成<code>render &quot;index&quot;</code>。第三種是回傳status code例如：<code>render status: 500</code>。第四種是回傳某template使用的layout，例如：<code>render layout: &quot;special_layout&quot;</code>。</p><p>其他用法請參考：<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-render">Layouts and Rendering in Rails</a></p><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>因為URL Shortener的action show是轉址，並不需要view，所以我們要實作的view只有index.html.erb和new.html.erb。</p><h3 id="index-html-erb"><a href="#index-html-erb" class="headerlink" title="index.html.erb"></a>index.html.erb</h3><pre><code class="html.erb">&lt;h1&gt;Url Shortener&lt;/h1&gt;&lt;% @urls.each do |url| %&gt;  &lt;p&gt;    &lt;%= link_to url.random_id, url_path(id: url.random_id) %&gt; --&gt; &lt;%= url.original %&gt;  &lt;/p&gt;&lt;% end %&gt;&lt;%= link_to &quot;Shorten another URL&quot;, new_url_path %&gt;</code></pre><h3 id="new-html-erb"><a href="#new-html-erb" class="headerlink" title="new.html.erb"></a>new.html.erb</h3><pre><code>&lt;h1&gt;Shorten a URL&lt;/h1&gt;erb&lt;% @url.errors.each do|attr,msg| %&gt;  &lt;%= msg %&gt; on &lt;%= attr %&gt;&lt;% end %&gt;&lt;%= form_for @url do |f| %&gt;  &lt;p&gt;    &lt;%= f.label :original %&gt; : &lt;%= f.text_field :original %&gt;  &lt;/p&gt;  &lt;%= f.hidden_field :random_id, value: @url.random_id %&gt;  &lt;%= f.submit &quot;Shorten my URL&quot; %&gt;&lt;% end %&gt;</code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>URL Shortener這個小Project需求上跟一般實作的留言板有點不一樣，但還是可以用new和index兩個action來達成了Use Case所抓出來的需求。這非常有趣，多做點不同專案的好處就是能夠用不同的角度來累積經驗。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 防止 Snippet Package 更新</title>
      <link href="/2014/10/29/old%20posts/2014-10-29-atom-prevent-snippet-package-updates/"/>
      <url>/2014/10/29/old%20posts/2014-10-29-atom-prevent-snippet-package-updates/</url>
      
        <content type="html"><![CDATA[<p>  使用 Snippet 最重要的針對自己的習慣客製化快捷鍵。 Atom 有許多內建的 Snippet，建議「不要」使用，因為那些設定會存在「Atom 程式」裡面，無法儲存在 .atom 資料夾中。所以一旦 Atom 版本更新之後，全部的設定都會不見。如果要使用 Snippet 請使用 Package 安裝，這樣用 git 來控管 .atom 資料夾時，就不會發生意外，全部的修改都能由 git 救回。</p><p>  回到正題，下載別人的 snippet package 後，經過客製化才會變成自己慣用的 snippet。這些自訂的 snippet ，在 package 更新後會全部不見，所以我們要防止 package 出現更新訊息，改成手動修改這些 snippet package 的更新。作法很簡單：<br>  以 atom-rails-snippet 來說：打開<code>package.json</code></p><pre><code>  &#123;&#123;  &quot;name&quot;: &quot;rails-snippets&quot;,  &quot;version&quot;: &quot;1.6.0&quot;,  &quot;main&quot;: &quot;./lib/rails-snippets&quot;,  &quot;activationEvents&quot;: [    &quot;rails-snippets:toggleErb&quot;  ],  ......&#125;</code></pre><p>將最上面的 name，從 “rails-snippets 改成 “my-rails-snippets，這麼一來原本會顯示的 update 訊息<br><img src="https://lh4.googleusercontent.com/Ek3vjV7b1lSugbidKFdlXsjovF0xg6Epx_1ivAO83g4=w1518-h502-no"><br>就會消失如下<br><img src="https://lh3.googleusercontent.com/-kR4FkYAcxSw/VFC9gOxVPmI/AAAAAAAADKI/dH8R_9SpKys/w1518-h454-no/Screen%2BShot%2B2014-10-29%2Bat%2B18.10.42.png"></p><p>但是在 package search 仍然可以搜尋的到<br><img src="https://lh6.googleusercontent.com/-vBJhu5pfLLo/VFC9f_VEzGI/AAAAAAAADKM/u-nHOLV0jwI/w554-h850-no/Screen%2BShot%2B2014-10-29%2Bat%2B18.10.57.png"><br>還是可以對 package 修改成自己要的樣子，超級方便的。</p><p>一直在思考要如何管理自己的 snippet ，目前想到的解法是使用 package 加上用 git 來管理 .atom 資料夾，達到「備份」與「自訂」兩個重要的需求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Text Editor </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch15：Shell Script ( Ch14跳過 )</title>
      <link href="/2014/10/13/old%20posts/2014-10-13-edx-linux-foundation-ch15shell-script/"/>
      <url>/2014/10/13/old%20posts/2014-10-13-edx-linux-foundation-ch15shell-script/</url>
      
        <content type="html"><![CDATA[<p>這是參加開源社群Tossug Linux讀書會的心得筆記，部分內容經過大大的補充，讓學習上更完整:）<br>Ch14講的是Printer，因為實際使用上較多Bug所以跳過這一章節，等有需要的時候再來學習。</p><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>linux系統可分為三個重要的部份：<br>1.kernel<br>2.shell<br>3.application</p><p>因為kernel的部份太過低階，所以需要透過一個友善介面(interface)來讓使用者操作的時候更為方便，這個介面便是shell。涵蓋範圍包括但不限於：</p><p>CLI (Command line interface)<br>GUI (Graphical user interface)</p><p>常見的CLI有以下幾種。<br><img src="https://lh4.googleusercontent.com/-Bxs23-huhzU/VDzh7zDaaII/AAAAAAAADII/sFNHHEnQwKk/w1618-h1185-no/Screen%2BShot%2B2014-10-14%2Bat%2B16.32.01.png"></p><p>sh是最古老的shell，大部分的linux系統使用上sh時，會直接使用其他shell的對應功能來取代，所以使用時需特別注意，就算語法是sh，其實實際上運作的是bash或者其他的shell如zsh…等等。</p><p>csh 用c寫shell</p><p>其他shell如zsh功能較bash強大，但是bash是一般linux系統最常見最基本的shell，所以撰寫 Shell Script 時，使用 Bash 是較好的選擇。</p><p>GUI的話，略過不提，在linux下還是學習Command Line來的踏實。</p><h2 id="Bash的兩種工作模式"><a href="#Bash的兩種工作模式" class="headerlink" title="Bash的兩種工作模式"></a>Bash的兩種工作模式</h2><ol><li>interactive mode</li><li>shell script mode</li></ol><p>interacitive mode 就是在終端機中一一輸入指令，等待一個指令執行完接著輸入下一個指令。而shell script mode顧名思義就是寫成.sh檔並執行裡面的shell script code，而shell script code就是由一連串的命令所組成。</p><h2 id="第一支bash-Scripts"><a href="#第一支bash-Scripts" class="headerlink" title="第一支bash Scripts"></a>第一支bash Scripts</h2><p>來試試看寫下第一個bash程式</p><pre><code class="sh">$ cat &gt; exscript.sh  #!/bin/bash  echo &quot;HELLO&quot;  echo &quot;WORLD&quot;</code></pre><p>輸入<code>chmod +x exscript.sh</code>讓檔案可以執行。</p><h2 id="重點整理"><a href="#重點整理" class="headerlink" title="重點整理"></a>重點整理</h2><h3 id="1-Defensive-BASH-Programming"><a href="#1-Defensive-BASH-Programming" class="headerlink" title="1.Defensive BASH Programming"></a>1.Defensive BASH Programming</h3><p><a href="http://www.kfirlavi.com/blog/2012/11/14/defensive-bash-programming/">http://www.kfirlavi.com/blog/2012/11/14/defensive-bash-programming/</a><br>好的coding style可以大幅降低錯誤發生的機率。</p><h3 id="2-double-brackets"><a href="#2-double-brackets" class="headerlink" title="2.double brackets"></a>2.double brackets</h3><p><a href="http://mywiki.wooledge.org/BashFAQ/031">http://mywiki.wooledge.org/BashFAQ/031</a><br>在使用判斷式的時候 (例如：if) 使用<code>[[]]</code>代替<code>[]</code>，這樣可以減少很大出錯的原因。</p><h3 id="3-如何實現function回傳值？"><a href="#3-如何實現function回傳值？" class="headerlink" title="3.如何實現function回傳值？"></a>3.如何實現function回傳值？</h3><p>Shell Script 可視為是一種字串取代的過程。呼叫 echo 輸出參數可以就可以讓其他不同scope的函數使用該參數。</p><h3 id="4-shell-script中的遞迴"><a href="#4-shell-script中的遞迴" class="headerlink" title="4. shell script中的遞迴"></a>4. shell script中的遞迴</h3><p>遞迴在shell scipt中並不會佔用太多的記憶體。這是由於shell script的語言特性是一連串的字串取代。</p><h2 id="你不知道的shell-script"><a href="#你不知道的shell-script" class="headerlink" title="你不知道的shell script"></a>你不知道的shell script</h2><p>Shell Script 可以 import libary。可以把程式拆成許多函式庫。<br>Shell Script 可以 include Module。可以把程式拆解成許多模組。<br>Shell Script 有 Test Unit 叫做shunit。</p><h1 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h1><p><a href="https://tossug.hackpad.com/Linux-11-10142014-b6y4uC6HCCw">tossug linux 讀書會 第11週</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Return Flight Ch5 ( 1 )：Advanced Event</title>
      <link href="/2014/10/10/old%20posts/2014-10-10-jquery-return-flight-5-jquery-plugins/"/>
      <url>/2014/10/10/old%20posts/2014-10-10-jquery-return-flight-5-jquery-plugins/</url>
      
        <content type="html"><![CDATA[<h1 id="advanced-event-handler"><a href="#advanced-event-handler" class="headerlink" title="advanced event handler"></a>advanced event handler</h1><h2 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h2><p>使用trigger就像是你按下那個按鈕。範例:</p><pre><code class="js">function picture() &#123; console.log(&#39;Show Plane&#39;); &#125;function status() &#123; console.log(&#39;In Service&#39;); &#125;function zoom() &#123; console.log(&#39;Zoom Picture&#39;); &#125;$(document).ready(function() &#123;    $(&#39;button&#39;).on(&#39;click.image&#39;, picture);    $(&#39;button&#39;).on(&#39;click.details&#39;, status);    $(&#39;button&#39;).on(&#39;mouseover.image&#39;, zoom);    ...    $(&#39;button&#39;).trigger(&#39;click&#39;);&#125;);</code></pre><p>使用trigger觸發事件(等於使用者按下按鈕)</p><pre><code class="js">$(&#39;button&#39;).trigger(&#39;click&#39;);</code></pre><p>會觸發這兩個</p><pre><code class="js">$(&#39;button&#39;).on(&#39;click.image&#39;, picture);$(&#39;button&#39;).on(&#39;click.details&#39;, status);</code></pre><h2 id="自訂-lt-event-gt-同時觸發多個事件"><a href="#自訂-lt-event-gt-同時觸發多個事件" class="headerlink" title="自訂&lt;event&gt;同時觸發多個事件"></a>自訂<code>&lt;event&gt;</code>同時觸發多個事件</h2><p>照理說evnt的格式是：</p><pre><code class="js">$(&lt;dom element&gt;).on(&quot;&lt;event&gt;.&lt;namespace&gt;&quot;, &lt;method&gt;)</code></pre><p>但其實jquery可以自訂event，讓我們做更多方便的操作。現在我們來自訂一個event。</p><pre><code class="js">$(&#39;.vacation&#39;).on(&#39;show.price&#39;, showPrice);</code></pre><p>可以看到本來應該是’click’的部份，已經用<code>show.price</code>這個我們新創的event所代替。<br>這樣我們就可以透過這個event來trigger所有的vacation。</p><pre><code class="js">$(&#39;.vacation&#39;).trigger(&#39;show.price&#39;);</code></pre><p>或是透過這個event來trigger最後一個vacation。</p><pre><code class="js">$(&#39;.vacation:last&#39;).trigger(&#39;show.price&#39;)</code></pre><p>完整範例：</p><pre><code class="js">var showPrice = function() &#123;...&#125;;$(&#39;.vacation&#39;).on(&#39;click.price&#39;, &#39;button&#39;, showPrice)$(&#39;.vacation&#39;).on(&#39;show.price&#39;, showPrice);$(&#39;show-prices&#39;).on(&#39;click&#39;, function(event) &#123;  event.preventDefault();  $(&#39;.vacation&#39;).trigger(&#39;show.price&#39;);&#125;;</code></pre><p>下面這個例子是，要在點擊show photo按鈕時，也會顯示天氣。這</p><pre><code class="js">$(document).ready(function()&#123;  // Get Weather  $(&#39;button&#39;).on(&#39;show.weather&#39;, function() &#123;    var results = $(this).closest(&#39;li&#39;).find(&#39;.results&#39;);    results.append(&#39;&lt;p&gt;Weather: 74&amp;deg;&lt;/p&gt;&#39;);    $(this).off(&#39;show.weather&#39;);  &#125;);  // Show Photos  $(&#39;button&#39;).on(&#39;click.photos&#39;, function() &#123;    var tour = $(this).closest(&#39;li&#39;);    var results = tour.find(&#39;.results&#39;);    results.append(&#39;&lt;p&gt;&lt;img src=&quot;/assets/photos/&#39;+tour.data(&#39;loc&#39;)+&#39;.jpg&quot; /&gt;&lt;/p&gt;&#39;);    $(this).off(&#39;click.photos&#39;);    $(this).trigger(&#39;show.weather&#39;);  &#125;);&#125;);</code></pre><p>這樣就不會像原來一個button綁兩個click listener，而是綁定一個click listener依序執行兩個函數。</p><pre><code class="js">$(document).ready(function()&#123;  // Get Weather  $(&#39;button&#39;).on(&#39;click.weather&#39;, function() &#123;    var results = $(this).closest(&#39;li&#39;).find(&#39;.results&#39;);    results.append(&#39;&lt;p&gt;Weather: 74&amp;deg;&lt;/p&gt;&#39;);    $(this).off(&#39;click.weather&#39;);  &#125;);  // Show Photos  $(&#39;button&#39;).on(&#39;click.photos&#39;, function() &#123;    var tour = $(this).closest(&#39;li&#39;);    var results = tour.find(&#39;.results&#39;);    results.append(&#39;&lt;p&gt;&lt;img src=&quot;/assets/photos/&#39;+tour.data(&#39;loc&#39;)+&#39;.jpg&quot; /&gt;&lt;/p&gt;&#39;);    $(this).off(&#39;click.photos&#39;);    $(this).trigger(&#39;click.weather&#39;);  &#125;);&#125;);</code></pre><h2 id="off"><a href="#off" class="headerlink" title="off"></a>off</h2><p>將符合event.namespace的handler移除<br><img src="https://lh4.googleusercontent.com/-Pponyl2bHfo/VDeZTWsGPlI/AAAAAAAADHc/8_d1EMnLjzc/w1650-h530-no/Screen%2BShot%2B2014-10-10%2Bat%2B15.31.35.png"><br>刪除符合event的handler<br><img src="https://lh4.googleusercontent.com/-OjeqhJM-sAQ/VDeZTcVpIZI/AAAAAAAADHk/RcghF-py-X4/w1650-h685-no/Screen%2BShot%2B2014-10-10%2Bat%2B15.31.45.png"><br>也可以指定namespace，符合namespace的handler都移除<br><img src="https://lh6.googleusercontent.com/-mA0cKkXEn74/VDeZTYFMVgI/AAAAAAAADHg/ffIlXNo3iuU/w1650-h688-no/Screen%2BShot%2B2014-10-10%2Bat%2B15.32.45.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Return Flight Ch4：Utility Methods</title>
      <link href="/2014/10/10/old%20posts/2014-10-10-jquery-return-flight-4/"/>
      <url>/2014/10/10/old%20posts/2014-10-10-jquery-return-flight-4/</url>
      
        <content type="html"><![CDATA[<h2 id="each"><a href="#each" class="headerlink" title="each"></a>each</h2><p>用each把result的物件讀出來，插入頁面元素之中。<br>要插入<code>&lt;p&gt;&lt;/p&gt;</code>之中使用的是html()<br>要插入img的src欄位，使用<code>find(&#39;img&#39;).attr(&#39;src&#39;, city.image)</code><br>之前也有使用過<code>attr()</code>這個方法來找到data欄位。</p><pre><code class="js">success: function(result)&#123;  $.each(result, function(index, city) &#123;    var favorite = $(&#39;.favorite-&#39;+index);    favorite.find(&#39;p&#39;).html(city.name);    favorite.find(&#39;img&#39;)            .attr(&#39;src&#39;, city.image);  &#125;);&#125;</code></pre><pre><code class="js">$.each(collection, function(&lt;index&gt;, &lt;object&gt;) &#123;&#125;);</code></pre><h2 id="getJSON"><a href="#getJSON" class="headerlink" title="getJSON"></a>getJSON</h2><p>用ajax設定<code>dataType:&#39;json&#39;</code></p><pre><code class="js">(&#39;.update-status&#39;).on(&#39;click&#39;, function() &#123;  $.ajax(&#39;/status&#39;, &#123;    contentType: &#39;application/json&#39;,    dataType: &#39;json&#39;,    success: function(result) &#123; ... &#125;    &#125;);&#125;);</code></pre><p>等於使用getJSON</p><pre><code class="js">$(&#39;.update-status&#39;).on(&#39;click&#39;, function() &#123;  $.getJSON(&#39;/status&#39;, function(result) &#123;    name: &#39;JFK - New York, NY&#39;,    var statusElements = ???    $(&#39;.status-list&#39;).html(statusElements)  &#125;);&#125;);</code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre><code class="js">var myNumbers = [1,2,3,4];var newNumbers = $.map(myNumbers, function(item, index)&#123; return item + 1 &#125;);  //myNumbers =&gt; [1,2,3,4]  //newNumbers =&gt; [2,3,4,5]</code></pre><h3 id="使用map插入元素"><a href="#使用map插入元素" class="headerlink" title="使用map插入元素"></a>使用map插入元素</h3><pre><code class="js">$.map(result, function(status, i) &#123;    var listItem = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;);    $(&#39;&lt;h3&gt;&#39; + status.name + &#39;&lt;/h3&gt;&#39;).appendTo(listItem);  $(&#39;&lt;p&gt;&#39; + status.status + &#39;&lt;/p&gt;&#39;).appendTo(listItem);  return listItem;&#125;);</code></pre><p>完整版</p><pre><code class="js">$(&#39;.update-flight-status&#39;).on(&#39;click&#39;, function() &#123;   $.getJSON(&#39;/status&#39;, function(result) &#123;     var statusElements = $.map(result, function(status, i) &#123;       var listItem = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;);       $(&#39;&lt;h3&gt;&#39;+status.name+&#39;&lt;/h3&gt;&#39;).appendTo(listItem);       $(&#39;&lt;p&gt;&#39;+status.status+&#39;&lt;/p&gt;&#39;).appendTo(listItem);       return listItem;&#125;);     $(&#39;.status-list&#39;).html(statusElements);   &#125;);&#125;);</code></pre><p>可以看出map需要另外指定一個陣列(statusElemets)來儲存所有的li。一次把一整包li，塞進ul中。<br>而each是一個一個塞進去。相似的部份用map是語意滿清楚的作法。</p><p>還有一個最大的不同是each回傳的陣列不會改變，而map回傳的陣列是經過處理的。請看下圖：<br><img src="https://lh5.googleusercontent.com/9HcvHuOpheqWWH6tJ8NpLniNpnlyllb1SpLk510t8cg=w1755-h1123-no"></p><h2 id="detach"><a href="#detach" class="headerlink" title="detach"></a>detach</h2><pre><code class="js">$(&#39;.update-flight-status&#39;).on(&#39;click&#39;, function() &#123;  $.getJSON(&#39;/status&#39;, function(result) &#123;    var statusElements = $.map(result, function(status, index) &#123;      var listItem = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;);      $(&#39;&lt;h3&gt;&#39;+status.name+&#39;&lt;/h3&gt;&#39;).appendTo(listItem);      $(&#39;&lt;p&gt;&#39;+status.status+&#39;&lt;/p&gt;&#39;).appendTo(listItem);      return listItem;    &#125;);    $(&#39;.status-list&#39;).detach()  &#125;);                .html(statusElements)                     .appendTo(&#39;.status&#39;);&#125;);</code></pre><p>這邊使用detach而不使用remove來刪除元素，因為detach其實不會把元素真正的刪除，而會保留下來。這樣做效率比較好。</p><p><a href="http://www.jquery001.com/jquery-detach-remove.html">detach與remvove的區別</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch13 Manipulating Text</title>
      <link href="/2014/10/07/old%20posts/2014-10-07-edx-linux-foundation-ch12-text/"/>
      <url>/2014/10/07/old%20posts/2014-10-07-edx-linux-foundation-ch12-text/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-cat-and-echo"><a href="#Section-1-cat-and-echo" class="headerlink" title="Section 1 cat and echo"></a>Section 1 cat and echo</h1><h2 id="cat-concatenate"><a href="#cat-concatenate" class="headerlink" title="cat(concatenate)"></a>cat(concatenate)</h2><pre><code>cat file</code></pre><p>顯示檔案，按空白鍵可以捲動</p><pre><code>cat file1 file2</code></pre><p>把file1和file2接起來顯示</p><pre><code>cat file1 file2 &gt; newfile</code></pre><p>把file1和file2接起來並且存成newfile。</p><pre><code>cat &gt; filename</code></pre><p>可以自行輸入內容，輸入完跳出後存成file(可輸入多行)。</p><pre><code>cat &gt;&gt; existingfile</code></pre><p>代表在檔案後端插入( append )檔案，可以自行輸入內容，輸入完跳出後存成file(可輸入多行)。</p><pre><code>cat &gt; filename &lt;&lt; EOF</code></pre><p>新增檔案的另一個方法，可以自行輸入內容，要離開的時候在句首輸入EOF。</p><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>cat反過來 ，效果是從檔案的後面幾行開始顯示，用法跟cat相同<br>tac file<br>tac file file2 &gt; newfile</p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>跟cat不同是的是echo預設插入或新增一行。<br>加上<code>-e</code>後允許使用<code>\n</code>或<code>\t</code>…等等的的特殊字元</p><pre><code>echo string &gt; newfileecho string &gt;&gt; existingfileecho $variable</code></pre><p>印出變數。</p><h1 id="Section-2-sed-and-awk"><a href="#Section-2-sed-and-awk" class="headerlink" title="Section 2 sed and awk"></a>Section 2 sed and awk</h1><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><pre><code>sed Command Syntaxsed -e command &lt;filename&gt;sed -f scriptfile &lt;filename&gt;</code></pre><h2 id="sed-的格式"><a href="#sed-的格式" class="headerlink" title="sed 的格式"></a>sed 的格式</h2><pre><code>sed s/pattern/replace_string/ filesed s/pattern/replace_string/g filesed 1,3s/pattern/replace_string/g filesed -i s/pattern/replace_string/g file</code></pre><blockquote><p>如果需要寫入檔案，建議直接輸出，不要使用 <code>-i</code> 參數，會比較安全。例如：<code>$ sed s/pattern/replace_string/g file &gt; file2</code></p></blockquote><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><pre><code>awk ‘command’ var=value fileawk -f scriptfile var=value file</code></pre><p>Examples:</p><pre><code>awk &#39;&#123; print $0 &#125;&#39; /etc/passwdawk -F: &#39;&#123; print $1 &#125;&#39; /etc/passwdawk -F: &#39;&#123; print $1 $6 &#125;&#39; /etc/passwd</code></pre><h1 id="Section-3-File-Manipulation"><a href="#Section-3-File-Manipulation" class="headerlink" title="Section 3 File Manipulation"></a>Section 3 File Manipulation</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><pre><code>sort filenamesort -usort -r</code></pre><p><code>sort -u</code> 將重複的資料僅列出一個(這邊不太確定)<br><code>sort -k pos1[,pos2]</code> 指定排序的key</p><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>刪除檔案中重複的資料，並儲存到另一個檔案，可以使用以下兩個方法。</p><pre><code>sort file1 file2 | uniq &gt; file3sort -u file1 file2 &gt; file3</code></pre><p>使用<code>-u</code>比較好，因為<code>uniq</code>本身有bug，只有在兩個相同的東西相鄰時才會合併。</p><pre><code>uniq -c filename</code></pre><p>計算重複的entry數量</p><h2 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h2><p>想要把兩張表合併起來可以用paste來做到，輸出的結果依照delimiters來區分欄位，delimiter可以是tab、空格, comma,  ‘|’等等。paste並不是很嚴謹的合併，需要先進行set且資料欄位齊全才可以使用。常用在user與group的對應。</p><pre><code>paste -d</code></pre><p>使用<code> -d</code>可以自訂delimiter。</p><pre><code>paste -spaste file1 file2paste -d, file1 file2paste -d &#39;:&#39; names phone</code></pre><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>$ cat phonebook</p><pre><code>555-123-4567 Bob555-231-3325 Carol555-340-5678 Ted555-289-6193 Alice</code></pre><p>$ cat directory</p><pre><code>555-123-4567 Anytown555-231-3325 Mytown555-340-5678 Yourtown555-289-6193 Youngstown</code></pre><p>The result of joining<br>$ join phonebook directory</p><pre><code>555-123-4567 Bob Anytown555-231-3325 Carol Mytown555-340-5678 Ted Yourtown555-289-6193 Alice Youngstown</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><pre><code>split infile &lt;Prefix&gt;</code></pre><p>範例：把一個字典檔切成99000行<br>wc可以用來查看檔案的行數或字數<br>$ wc -l american-english</p><pre><code>99171 american-english</code></pre><p>$ split american-english dictionary</p><p>$ ls -l dictionary*</p><pre><code>-rw-rw-r 1 me me 8552 Mar 23 20:19 dictionaryab-rw-rw-r 1 me me 8653 Mar 23 20:19 dictionaryaa. . .</code></pre><h1 id="Section-4-grep"><a href="#Section-4-grep" class="headerlink" title="Section 4 grep"></a>Section 4 grep</h1><p>用來搜尋文字的工具，會依照設定的pattern來搜尋，pattern中可以使用regular experssion</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><pre><code>grep [pattern] &lt;filename&gt;grep -v [pattern] &lt;filename&gt;grep [0-9] &lt;filename&gt;grep -C 3 [pattern] &lt;filename&gt;grep -A 3 [pattern] &lt;filename&gt;grep -B 3 [pattern] &lt;filename&gt;</code></pre><h1 id="Section-5"><a href="#Section-5" class="headerlink" title="Section 5"></a>Section 5</h1><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>用來刪除一段文字，或者替換一段文字。</p><p>Command    Usage</p><pre><code>$ tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre><p>Convert lower case to upper case</p><pre><code>$ tr &#39;&#123;&#125;&#39; &#39;()&#39; &lt; inputfile &gt;</code></pre><p>outputfile    Translate braces into parenthesis</p><pre><code>$ echo &quot;This is for testing&quot; | tr [:space:] &#39;\t&#39;</code></pre><p>Translate white-space to tabs</p><pre><code>$ echo &quot;This is for testing&quot; | tr -s [:space:]</code></pre><p>Squeeze repetition of characters using -s</p><pre><code>$ echo &quot;the geek stuff&quot; | tr -d &#39;t&#39;</code></pre><p>Delete specified characters using -d option</p><pre><code>$ echo &quot;my username is 432234&quot; | tr -cd [:digit:]</code></pre><p>Complement the sets using -c option</p><pre><code>$ tr -cd [:print:] &lt; file.txt</code></pre><p>Remove all non-printable character from a file</p><pre><code>$ tr -s &#39;\n&#39; &#39; &#39; &lt; file.txt</code></pre><p>Join all the lines in a file into a single line</p><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>想要將這個資料流的處理過程中將某段訊息存下來，就使用tee指令。</p><pre><code>ls -l | tee newfile</code></pre><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>word count<br>計算line的數量或字數</p><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>這個指令可以將一段訊息的某一段給他『切』出來</p><h1 id="Section-6"><a href="#Section-6" class="headerlink" title="Section 6"></a>Section 6</h1><p>使用 <code>strings</code> 需安裝 <code>binutils</code>。string可以用來</p><h2 id="作業更好的解法-By-Carl"><a href="#作業更好的解法-By-Carl" class="headerlink" title="作業更好的解法(By Carl)"></a>作業更好的解法(By Carl)</h2><p>Lab 2</p><pre><code>awk -F: &#39;&#123; print $7 &#125;&#39; /etc/passwd | sort -u | sed &#39;/^$/d&#39;</code></pre><p>or</p><pre><code>awk -F: &#39;&#123; print $7 &#125;&#39; /etc/passwd | sort -u | grep -v &#39;^$&#39;</code></pre><p>Lab 3<br>解答的做法不好，應該單獨對 <code>$7</code> 做處理。</p><h1 id="讀後心得"><a href="#讀後心得" class="headerlink" title="讀後心得"></a>讀後心得</h1><p>課程中對awk sed等強大的指令只有輕輕帶過，但這次的範圍跟之後要學的shell script有密切的關係，開啟了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Returm Flight Ch2：Javascript Object &amp; Function</title>
      <link href="/2014/10/06/old%20posts/2014-10-06-jquery-return-flight-2/"/>
      <url>/2014/10/06/old%20posts/2014-10-06-jquery-return-flight-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Part-1-javascript-Object"><a href="#Part-1-javascript-Object" class="headerlink" title="Part 1. javascript Object"></a>Part 1. javascript Object</h1><p>將改原本的程式重構，所有的function都變成Object的Method，增加可讀性。</p><p>這是原本的code</p><pre><code class="js">var confirmation = &#123;  init: function() &#123;    $(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;button&#39;, function() &#123;      $.ajax(&#39;confirmation.html&#39;, &#123; ... &#125;);    &#125;);    $(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;.view-boarding-pass&#39;, function(event) &#123; ... &#125;); &#125;  &#125;;  $(document).ready(function() &#123;      confirmation.init();  &#125;);</code></pre><p>把function全部獨立出來，用this呼叫，增加可讀性。</p><pre><code class="js">var confirmation = &#123;  init: function() &#123;    $(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;button&#39;, this.loadConfirmation);    $(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;.view-boarding-pass&#39;, this.showBoardingPass);  &#125;,  loadConfirmation: function() &#123; ... &#125;  showBoardingPass: function(event) &#123; ... &#125;&#125;;$(document).ready(function() &#123;  confirmation.init();&#125;);</code></pre><h1 id="Part2-javascript-Function"><a href="#Part2-javascript-Function" class="headerlink" title="Part2 javascript Function"></a>Part2 javascript Function</h1><h2 id="Object-vs-Function"><a href="#Object-vs-Function" class="headerlink" title="Object vs Function"></a>Object vs Function</h2><p>這是物件，只允許一個vacation。</p><pre><code class="js">var vacation = &#123;  init: function() &#123;    // init vacation&#125;$(document).ready(function() &#123;  vacation.init();&#125;);</code></pre><p>這是function，允許多個vacation。</p><pre><code class="js">function Vacation(destination) &#123;  // init vacation to destination&#125;$(document).ready(function() &#123;  var paris = new Vacation(&#39;Paris&#39;);  var london = new Vacation(&#39;London&#39;);&#125;);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Return Flight Ch1 ( 2 )：補充筆記</title>
      <link href="/2014/10/06/old%20posts/2014-10-06-jquery-return-flight-1-ajax-basics/"/>
      <url>/2014/10/06/old%20posts/2014-10-06-jquery-return-flight-1-ajax-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-html-插入元素"><a href="#使用-html-插入元素" class="headerlink" title="使用.html()插入元素"></a>使用.html()插入元素</h2><p>要使用的ajax長這樣，點下#tour之下的button後，如果出現錯誤，就會顯示錯誤訊息。</p><pre><code class="js">$(document).ready(function() &#123;  var el = $(&quot;#tour&quot;);  el.on(&quot;click&quot;, &quot;button&quot;, function() &#123;    $.ajax(&#39;/photos.html&#39;, &#123;      data: &#123;location: el.data(&#39;location&#39;)&#125;,      success: function(response) &#123;        $(&#39;.photos&#39;).html(response).fadeIn();      &#125;,      error: function() &#123;        $(&#39;.photos&#39;).html(&#39;&lt;li&gt;There was a problem fetching the latest photos. Please try again.&lt;/li&gt;&#39;);      &#125;    &#125;);  &#125;);&#125;);</code></pre><p>在錯誤發生的時候，在<code>.photo</code>底下插入<code>&lt;li&gt;</code>元素</p><pre><code class="js">      error: function() &#123;        $(&#39;.photos&#39;).html(&#39;&lt;li&gt;There was a problem fetching the latest photos. Please try again.&lt;/li&gt;&#39;);</code></pre><p>ajax回傳之後的html</p><pre><code class="html">&lt;li&gt;  &lt;img src=&quot;/assets/photos/paris1.jpg&quot;&gt;  &lt;span style=&quot;display: none;&quot;&gt;Arc de Triomphe&lt;/span&gt;&lt;/li&gt;&lt;li&gt;  &lt;img src=&quot;/assets/photos/paris2.jpg&quot;&gt;  &lt;span style=&quot;display: none;&quot;&gt;The Eiffel Tower&lt;/span&gt;&lt;/li&gt;&lt;li&gt;  &lt;img src=&quot;/assets/photos/london.jpg&quot;&gt;  &lt;span style=&quot;display: none;&quot;&gt;London&lt;/span&gt;&lt;/li&gt;</code></pre><h1 id="event-delegate"><a href="#event-delegate" class="headerlink" title="event delegate"></a>event delegate</h1><p>錯誤寫法</p><pre><code class="js">$(&#39;.confirmation .view-boarding-pass&#39;).on(&#39;click&#39;, function()&#123; ... &#125;);</code></pre><p>正確寫法</p><pre><code class="js">$(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;.view-boarding-pass&#39;, function()&#123; ... &#125;)</code></pre><p>因為當頁面載入時，<code>.view-boarding-pass</code>並不存在，所以必須使用把要選擇的元素寫在event handler裡面又稱為<strong>event delegate</strong>的作法。</p><h1 id="做出Loading特效"><a href="#做出Loading特效" class="headerlink" title="做出Loading特效"></a>做出Loading特效</h1><p>這是一個使用event delegate概念完成的特效。</p><pre><code class="js">$(&#39;.photos&#39;).on(&#39;mouseenter&#39;, &#39;li&#39;, showPhotos)            .on(&#39;mouseleave&#39;, &#39;li&#39;, showPhotos);</code></pre><p>完整js檔如下</p><pre><code class="js">$(document).ready(function() &#123;  function showPhotos() &#123;    $(this).find(&#39;span&#39;).slideToggle();  &#125;  $(&#39;.photos&#39;).on(&#39;mouseenter&#39;, &#39;li&#39;, showPhotos)              .on(&#39;mouseleave&#39;, &#39;li&#39;, showPhotos);  var el = $(&quot;#tour&quot;);  el.on(&quot;click&quot;, &quot;button&quot;, function() &#123;    $.ajax(&#39;/photos.html&#39;, &#123;      data: &#123;location: el.data(&#39;location&#39;)&#125;,      success: function(response) &#123;        $(&#39;.photos&#39;).html(response).fadeIn();      &#125;,      error: function() &#123;        $(&#39;.photos&#39;).html(&#39;&lt;li&gt;There was a problem fetching the latest photos. Please try again.&lt;/li&gt;&#39;);      &#125;,      timeout: 3000,      beforeSend: function() &#123;        $(&#39;#tour&#39;).addClass(&#39;is-fetching&#39;);      &#125;,      complete: function() &#123;        $(&#39;#tour&#39;).removeClass(&#39;is-fetching&#39;);      &#125;    &#125;);  &#125;);&#125;);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sinatra 初體驗(2) template與layout</title>
      <link href="/2014/10/03/old%20posts/2014-10-03-try-sinatra-02/"/>
      <url>/2014/10/03/old%20posts/2014-10-03-try-sinatra-02/</url>
      
        <content type="html"><![CDATA[<p>第一次使用Sinatra，還滿好玩的。<br>只要輸入<code>gem install sinatra</code>安裝<br>之後在ruby檔中<code>require &quot;sinatra/base&quot;</code>就可以使用了</p><h2 id="each-with-index"><a href="#each-with-index" class="headerlink" title="each_with_index"></a>each_with_index</h2><p>原來要使用each_with_index來取出index，我還在想說沒有i怎麼用＠＠</p><pre><code class="erb">&lt;%  @images.each_with_index do |image, index| %&gt;    &lt;h2&gt;&lt;a href=&quot;/images/&lt;%= index  %&gt;&quot;&gt;&lt;%= image[:title] %&gt;&lt;/a&gt;&lt;/h2&gt;    &lt;p&gt;        &lt;img src=&quot;&lt;%= image[:url]%&gt;&quot; alt=&quot;&quot; /&gt;    &lt;/p&gt;&lt;% end %&gt;</code></pre><h2 id="初次使用haml"><a href="#初次使用haml" class="headerlink" title="初次使用haml"></a>初次使用haml</h2><p>一樣輸入<code>gem install haml</code>安裝<br>使用方法跟erb的template差不多</p><pre><code class="rb">get &quot;/images/:index&quot; do |index|  index = index.to_i  @image = IMAGES[index]  haml :&quot;images/show&quot;end</code></pre><p>比較有趣的地方是路徑前面都要多加個冒號。</p><p>view寫成這樣<br>/view/images/show.haml<br><img src="https://lh4.googleusercontent.com/IyZRngoLIbb7-on1_ZO0KTyU3CkXMHgQOSscwcwFAJE=w1383-h518-p-no"></p><h2 id="使用layout"><a href="#使用layout" class="headerlink" title="使用layout"></a>使用layout</h2><p> 在views底下新增一個layout.erb<br> views/layout.erb</p><pre><code class="rb"> &lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;/&gt;        &lt;title&gt;Erb layout&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;%= yield %&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>這是app.rb也就是route</p><pre><code class="rb">   get &#39;/images&#39; do    @images = IMAGES    erb :images  end  get &quot;/images/:index&quot; do |index|    index = index.to_i    @image = IMAGES[index]    haml :&quot;images/show&quot;, layout: true  end</code></pre><p>這邊的haml預設的 layout 會找 views/layout.haml 而不是 layout.erb，所以會找不到。<br>這邊 <code>layout: true</code> 其實可以不用設定，預設就會套用了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sinatra 初體驗(1) - Route</title>
      <link href="/2014/10/03/old%20posts/2014-10-03-try-sinatra-01-route/"/>
      <url>/2014/10/03/old%20posts/2014-10-03-try-sinatra-01-route/</url>
      
        <content type="html"><![CDATA[<h1 id="First-Sinatra-App"><a href="#First-Sinatra-App" class="headerlink" title="First Sinatra App"></a>First Sinatra App</h1><p>輸入<code>gem install sinatra</code>安裝gem</p><p>建立app.rb檔</p><pre><code class="rb">require &quot;sinatra/base&quot;class App &lt; Sinatra::Base    get &#39;/&#39; do        &quot;Hello World!!&quot;    endend</code></pre><p>建立config.ru</p><pre><code class="rb">    require &quot;./app&quot; # relative file path    run App   #class Name</code></pre><p>輸入<code>rackup</code>啟動server，在 <code>http://localhost:9292</code> 即可看到Hello World</p><h2 id="使用curl來模仿HTTP-Verb-GET"><a href="#使用curl來模仿HTTP-Verb-GET" class="headerlink" title="使用curl來模仿HTTP Verb - GET"></a>使用curl來模仿HTTP Verb - GET</h2><pre><code>curl -v &quot;http://localhost:9292&quot;</code></pre><p>RESTful HTTP Post:</p><pre><code>curl -X POST -d &quot;http://localhost:9292&quot;</code></pre><p><a href="http://stackoverflow.com/questions/14978411/http-post-and-get-using-curl-in-linux">http-post-and-get-using-curl-in-linux</a></p><p><a href="http://evelynnote.blogspot.tw/2011/03/curl.html">curl指令用法</a></p><h2 id="改寫app為post"><a href="#改寫app為post" class="headerlink" title="改寫app為post"></a>改寫app為post</h2><pre><code class="rb">require &quot;sinatra/base&quot;class App &lt; Sinatra::Base    post &#39;/&#39; do        &quot;Hello World!!&quot;    endend</code></pre><p>輸入<code>curl -X Post -v -d &quot;&quot; http://localhost:9292</code><br>這邊分號沒有寫錯，因為就是要傳一個空字串給server。<br>這樣server就會傳回http response</p><h2 id="HTTP-verb-都來一次"><a href="#HTTP-verb-都來一次" class="headerlink" title="HTTP verb 都來一次"></a>HTTP verb 都來一次</h2><pre><code class="rb"># app.rbrequire &quot;sinatra/base&quot;class App &lt; Sinatra::Base    get &#39;/&#39; do        &quot;Hello World!!&quot;    end    post &#39;/&#39; do        &quot;Hello World via POST!!&quot;    end    put &#39;/&#39; do        &quot;Hello World via PUT!!&quot;    end    delete &#39;/&#39; do        &quot;Hello World via DELETE!!&quot;    endend</code></pre><p>輸入<code>curl -X POST -v -d &quot;&quot; http://localhost:9292</code><br>回應<code>Hello World via POST!!</code><br>輸入<code>curl -X PUT -v -d &quot;&quot; http://localhost:9292</code><br>回應<code>Hello World via PUT!!</code><br>輸入<code>curl -X DELETE -v -d &quot;&quot; http://localhost:9292</code><br>回應<code>Hello World via DELETE!!</code></p><h2 id="解析完整的POST"><a href="#解析完整的POST" class="headerlink" title="解析完整的POST"></a>解析完整的POST</h2><pre><code>    &gt; POST / HTTP/1.1    &gt; User-Agent: curl/7.30.0    &gt; Host: localhost:9292    &gt; Accept: */*    &gt; Content-Length: 0    &gt; Content-Type: application/x-www-form-urlencoded    &gt;    &lt; HTTP/1.1 200 OK    &lt; Content-Type: text/html;charset=utf-8    &lt; Content-Length: 22    &lt; X-Xss-Protection: 1; mode=block    &lt; X-Content-Type-Options: nosniff    &lt; X-Frame-Options: SAMEORIGIN    * Server WEBrick/1.3.1 (Ruby/2.0.0/2013-11-22) is not blacklisted    &lt; Server: WEBrick/1.3.1 (Ruby/2.0.0/2013-11-22)    &lt; Date: Fri, 03 Oct 2014 07:58:10 GMT    &lt; Connection: Keep-Alive    &lt;    * Connection #0 to host localhost left intact    Hello World via POST!!%</code></pre><p>比較重要的欄位有</p><ol><li>第一行，說明是使用哪種http動詞</li><li><code>Content-Type: text/html;charset=utf-8</code> 說明是html</li><li>最後輸出的就是route相對輸出的內容</li></ol><h2 id="接下來"><a href="#接下來" class="headerlink" title="接下來"></a>接下來</h2><pre><code class="rb">get &quot;/hello/:first_name/:last_name&quot; do |first, last|  &quot;hello#&#123;first&#125;#&#123;last&#125;&quot;end</code></pre><p>在網址列輸入<code>http://0.0.0.0:9292/hello/steven/huang</code><br>網頁上就會印出 hellostevenhuang</p><h2 id="這樣寫的缺點"><a href="#這樣寫的缺點" class="headerlink" title="這樣寫的缺點"></a>這樣寫的缺點</h2><p>這樣寫的話有如果網址列輸入<code>http://0.0.0.0:9292/hello/test</code><br>就會出現 <code>Sinatra doesn’t know this ditty</code> 的錯誤，因為這樣的寫法比較沒有彈性，route並沒有match到網址。</p><h2 id="修正選擇性欄位的問題"><a href="#修正選擇性欄位的問題" class="headerlink" title="修正選擇性欄位的問題"></a>修正選擇性欄位的問題</h2><pre><code class="rb">get &quot;/hello/:first_name/?:last_name?&quot; do |first, last|  &quot;hello#&#123;first&#125;#&#123;last&#125;&quot;end</code></pre><p>這樣的話 last_name 就變成了選擇性欄位<br>有沒有輸入都會進入這個 route<br>來測試看看：<br>輸入 <code>http://0.0.0.0:9292/hello/steven</code><br>果然輸出了 hellosteven</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Sinatra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Techdays Videos 釋出</title>
      <link href="/2014/10/01/old%20posts/2014-10-01-techday-videos/"/>
      <url>/2014/10/01/old%20posts/2014-10-01-techday-videos/</url>
      
        <content type="html"><![CDATA[<p>門票要價15000的techday影片釋出了<br>蒐集了幾個比較有興趣的影片，分別是:</p><ul><li>保哥的 <a href="http://channel9.msdn.com/Events/TechDays/TechDays-Taiwan-2014/DEV203">使用 TypeScript 開發大型應用程式</a></li></ul><p>幾個敏捷開發的經驗分享:</p><ul><li><a href="http://channel9.msdn.com/Events/TechDays/TechDays-Taiwan-2014/DEV308">Kanban 看板及 Lean 精實的技巧在大型軟體開發專案</a></li><li><a href="http://channel9.msdn.com/Events/TechDays/TechDays-Taiwan-2014/DEV301">現代化網站開發技巧應用實例 Modern Web Development Practices</a></li><li><a href="http://channel9.msdn.com/Events/TechDays/TechDays-Taiwan-2014/DEV306">從版本管控到持續整合 (Continuous Integration, CI) 的實踐</a></li></ul><p>其他就請大家自己挖寶囉</p><ul><li><a href="http://channel9.msdn.com/Events/TechDays/TechDays-Taiwan-2014?sort=viewed&direction=asc&page=7#theSessions">techday videos</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Agile </tag>
            
            <tag> Kanban </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation 補充筆記</title>
      <link href="/2014/09/30/old%20posts/2014-09-30-edx-linux-foundation-to-add-notes/"/>
      <url>/2014/09/30/old%20posts/2014-09-30-edx-linux-foundation-to-add-notes/</url>
      
        <content type="html"><![CDATA[<ol><li>七層筆記＋tcp/ip筆記</li><li>ip</li><li>mac</li><li>socket</li><li>基本知識<br>乙太網路<br>了解封包內容</li></ol><h2 id="名詞釐清"><a href="#名詞釐清" class="headerlink" title="名詞釐清"></a>名詞釐清</h2><p>IEEE<br>國際上專業制定單位的組織<br>LAN (LOCAL AREA NETWORK)<br>區域網路<br>WAN (WIDE  AREA NETWORK)<br>廣域網路<br>NIC(NETWORK INTERFACE CARD)<br>NI</p><h1 id="1-OSI-Open-System-Interconnection-七層協定"><a href="#1-OSI-Open-System-Interconnection-七層協定" class="headerlink" title="1. OSI (Open System Interconnection) 七層協定"></a>1. OSI (Open System Interconnection) 七層協定</h1><h2 id="layer-1-phisical-layer"><a href="#layer-1-phisical-layer" class="headerlink" title="layer 1 phisical layer"></a>layer 1 phisical layer</h2><h2 id="layer-2-data-link-layer"><a href="#layer-2-data-link-layer" class="headerlink" title="layer 2 data link layer"></a>layer 2 data link layer</h2><h3 id="偏軟體的子層-MAC-media-access-control"><a href="#偏軟體的子層-MAC-media-access-control" class="headerlink" title="偏軟體的子層 MAC(media access control)"></a>偏軟體的子層 MAC(media access control)</h3><p>MAC 是網路媒體所能處理的主要資料包裹，這也是最終被實體層編碼成位元串的資料。</p><h4 id="MAC-frame"><a href="#MAC-frame" class="headerlink" title="MAC frame"></a>MAC frame</h4><h3 id="偏硬體的子層LLC-logical-link-control"><a href="#偏硬體的子層LLC-logical-link-control" class="headerlink" title="偏硬體的子層LLC(logical link control)"></a>偏硬體的子層LLC(logical link control)</h3><p>主要在多工處理來自上層的封包資料 (packet) 並轉成 MAC 的格式</p><h2 id="layer-3-Network-layer"><a href="#layer-3-Network-layer" class="headerlink" title="layer 3 Network layer"></a>layer 3 Network layer</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><h2 id="layer-4-transport-layer"><a href="#layer-4-transport-layer" class="headerlink" title="layer 4 transport layer"></a>layer 4 transport layer</h2><h2 id="layer-5-session-layer"><a href="#layer-5-session-layer" class="headerlink" title="layer 5 session layer"></a>layer 5 session layer</h2><h2 id="layer-6-presentation-layer"><a href="#layer-6-presentation-layer" class="headerlink" title="layer 6 presentation layer"></a>layer 6 presentation layer</h2><h2 id="layer-7-application-layer"><a href="#layer-7-application-layer" class="headerlink" title="layer 7 application layer"></a>layer 7 application layer</h2><h1 id="2-TCP-IP是什麼？如何運作？"><a href="#2-TCP-IP是什麼？如何運作？" class="headerlink" title="2. TCP/IP是什麼？如何運作？"></a>2. TCP/IP是什麼？如何運作？</h1><h2 id="2-TCP-IP-如何運作"><a href="#2-TCP-IP-如何運作" class="headerlink" title="2.TCP/IP 如何運作"></a>2.TCP/IP 如何運作</h2><p>那 TCP/IP 是如何運作的呢？我們就拿妳常常連上的 Yahoo 入口網站來做個說明好了，整個連線的狀態可以這樣看：</p><ol><li>應用程式階段：妳打開瀏覽器，在瀏覽器上面輸入網址列，按下 [Enter]。此時網址列與相關資料會被瀏覽器包成一個資料， 並向下傳給 TCP/IP 的應用層；</li><li>應用層：由應用層提供的 HTTP 通訊協定，將來自瀏覽器的資料包起來，並給予一個應用層表頭，再向傳送層丟去；</li><li>傳送層：由於 HTTP 為可靠連線，因此將該資料丟入 TCP 封包內，並給予一個 TCP 封包的表頭，向網路層丟去；</li><li>網路層：將 TCP 包裹包進 IP 封包內，再給予一個 IP 表頭 (主要就是來源與目標的 IP 囉)，向鏈結層丟去；</li><li>鏈結層：如果使用乙太網路時，此時 IP 會依據 CSMA/CD 的標準，包裹到 MAC 訊框中，並給予 MAC 表頭，再轉成位元串後， 利用傳輸媒體傳送到遠端主機上。<br>等到 Yahoo 收到你的包裹後，在依據相反方向拆解開來，然後交給對應的層級進行分析，最後就讓 Yahoo 的 WWW 伺服器軟體得到你所想要的資料，該伺服器軟體再根據你的要求，取得正確的資料後，又依循上述的流程，一層一層的包裝起來， 最後傳送到你的手上！就是這樣囉！</li></ol><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>MAC 其實就是我們上面一直講到的訊框 (frame) 囉！ 只是這個訊框上面有兩個很重要的資料，就是目標與來源的網卡卡號，因此我們又簡稱網卡卡號為 MAC 而已。 簡單的說，你可以把MAC想成是一個在網路線上面傳遞的包裹，而這個包裹是整個網路硬體上面傳送資料的最小單位了。 也就是說，網路線可想成是一條『一次僅可通過一個人』的獨木橋， 而 MAC 就是在這個獨木橋上面動的人啦！</p><h2 id="乙太網路"><a href="#乙太網路" class="headerlink" title="乙太網路"></a>乙太網路</h2><p>乙太網路已經是一項公認的標準介面了，如此一來，大家都可以依據這個標準來設定與開發自己的硬體， 只要硬體符合這個標準，理論上，他就能夠加入乙太網路的世界，所以，購買乙太網路時， 僅需要查看這個乙太網路卡支援哪些標準就能夠知道這個硬體的功能有哪些， 而不必知道這個乙太網路卡是由哪家公司所製造的吶</p><h2 id="RJ-45接頭"><a href="#RJ-45接頭" class="headerlink" title="RJ-45接頭"></a>RJ-45接頭</h2><h3 id="乙太網路的傳輸協定：CSMA-CD"><a href="#乙太網路的傳輸協定：CSMA-CD" class="headerlink" title="乙太網路的傳輸協定：CSMA/CD"></a>乙太網路的傳輸協定：CSMA/CD</h3><p>每張乙太網路卡出廠時，就會賦予一個獨一無二的卡號，那就是所謂的 MAC (Media Access Control) 啦！</p><h2 id="route-1"><a href="#route-1" class="headerlink" title="route"></a>route</h2><h1 id="IP-的取得方式"><a href="#IP-的取得方式" class="headerlink" title="IP 的取得方式"></a>IP 的取得方式</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h2 id="DHCP-Dynamic-Host-Configuration-Protocol"><a href="#DHCP-Dynamic-Host-Configuration-Protocol" class="headerlink" title="DHCP(Dynamic Host Configuration Protocol)"></a>DHCP(Dynamic Host Configuration Protocol)</h2><h2 id="透過撥接取得："><a href="#透過撥接取得：" class="headerlink" title="透過撥接取得："></a>透過撥接取得：</h2><p>向你的 ISP 申請註冊，取<br>得帳號密碼後，直接撥接到 ISP ，你的 ISP 會透過他們自己的設定，讓你的作業系統取得正確的網路參數。</p><p>IP 是門牌，TCP 是樓層，真正提供服務的，是在該樓層的那個人 (Protocol)！</p><h2 id="ICMP-協定"><a href="#ICMP-協定" class="headerlink" title="ICMP 協定"></a>ICMP 協定</h2><p>ICMP 的全名是『 Internet Control Message Protocol, 網際網路訊息控制協定 』。 基本上，ICMP 是一個錯誤偵測與回報的機制，最大的功能就是可以確保我們網路的連線狀態與連線的正確性！ ICMP 也是網路層的重要封包之一，不過，這個封包並非獨立存在，而是納入到 IP 的封包中！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch12：Network</title>
      <link href="/2014/09/30/old%20posts/2014-09-30-edx-linux-foundation-ch12-network/"/>
      <url>/2014/09/30/old%20posts/2014-09-30-edx-linux-foundation-ch12-network/</url>
      
        <content type="html"><![CDATA[<h2 id="IP-and-package"><a href="#IP-and-package" class="headerlink" title="IP and package"></a>IP and package</h2><p>IP(Internet Protocol) address is essential for routing packets of information through the network.These packets contain <strong>data buffers</strong> together with <strong>headers</strong> which contain information about where the packet is going to and coming from, and where it fits in the sequence of packets that constitute the stream.</p><h2 id="Decoding-IPv4-Addresses"><a href="#Decoding-IPv4-Addresses" class="headerlink" title="Decoding IPv4 Addresses"></a>Decoding IPv4 Addresses</h2><p>A 32-bit IPv4 address is divided into four 8-bit sections called octets.</p><p><img src="https://lh5.googleusercontent.com/-B9UGhE1NesY/VCoF-IowH0I/AAAAAAAADDQ/0QZbRLRjUlk/w1653-h213-no/Screen%2BShot%2B2014-09-30%2Bat%2B09.15.39.png"></p><p><strong>IP address</strong> are divided into five classes</p><p><img src="https://lh6.googleusercontent.com/-rgUCVtxI9gk/VCoF-H3gCzI/AAAAAAAADDU/sJFdNhvXi9k/w1655-h803-no/Screen%2BShot%2B2014-09-30%2Bat%2B09.18.47.png"></p><p>Classes A, B, and C are classified into two parts: <strong>Network addresses(Net ID)</strong> and <strong>Host address (Host ID)</strong>. The Net ID is used to identify the network, while the Host ID is used to identify a host in the network.<br>Class D is used for special multicast applications (information is broadcast to multiple computers simultaneously)<br>Class E is reserved for future use.</p><h2 id="IP-Address-Allocation"><a href="#IP-Address-Allocation" class="headerlink" title="IP Address Allocation"></a>IP Address Allocation</h2><p>Typically, a range of IP addresses are requested from your <strong>Internet Service Provider(ISP)</strong> by your organization’s network administrator</p><p>You can assign IP addresses to computers over a network manually or dynamically.</p><p><img src="https://lh3.googleusercontent.com/-Gdkko-JytG4/VCoK16007yI/AAAAAAAADDs/BKfxn8tDBfA/w1278-h660-no/Screen%2BShot%2B2014-09-30%2Bat%2B09.43.14.png"></p><p>When you assign IP addresses manually, you add static (never changing) addresses to the network. When you assign IP addresses dynamically (they can change every time you reboot or even more often), the <strong>Dynamic Host Configuration Protocol (DHCP)</strong> is used to assign IP addresses.</p><h2 id="Manually-Allocating-an-IP-Address"><a href="#Manually-Allocating-an-IP-Address" class="headerlink" title="Manually Allocating an IP Address"></a>Manually Allocating an IP Address</h2><p>??<br>ipcalc</p><h2 id="Name-Resolution"><a href="#Name-Resolution" class="headerlink" title="Name Resolution"></a>Name Resolution</h2><p>Name Resolution is used to convert numerical IP address values into a human-readable format known as the <strong>hostname</strong>.<strong>text</strong> For example, 140.211.169.4 is the numerical IP address that refers to the linuxfoundation.org hostname. Hostnames are easier to remember.<br><img src="https://lh5.googleusercontent.com/2VU-chSrk_oMUIEB0vphQlRJ43uY73L016WiEjS-JkI=w1490-h1140-no"></p><h2 id="Using-Domain-Name-System-DNS-and-Name-Resolution-Tools"><a href="#Using-Domain-Name-System-DNS-and-Name-Resolution-Tools" class="headerlink" title="Using Domain Name System (DNS) and Name Resolution Tools"></a>Using Domain Name System (DNS) and Name Resolution Tools</h2><p>Domain Name System (DNS) translates Internet domain and host names to IP addresses.<br>私有IP對應的主機名稱<code>cat /etc/hosts</code><br>顯示DNS IP<code>cat /etc/resolv.conf</code></p><pre><code>host linuxfoundation.org</code></pre><pre><code>nslookup linuxfoundation.org</code></pre><pre><code>dig linuxfoundation.org</code></pre><p>look up domain name information</p><p><img src="https://plus.google.com/photos/106207382048371838527/albums/6044136604797521137/6061411979084535810?pid=6061411979084535810&oid=106207382048371838527"></p><h2 id="Network-Interfaces"><a href="#Network-Interfaces" class="headerlink" title="Network Interfaces"></a>Network Interfaces</h2><p>Network interfaces are a connection channel between a device and a network.</p><p>Physically, network interfaces can proceed through a <strong>network interface card (NIC)</strong> or can be more abstractly implemented as software.</p><p>A list of currently active network interfaces is reported by the ifconfig utility which you may have to run as the superuser.</p><h2 id="Network-Configuration-Files"><a href="#Network-Configuration-Files" class="headerlink" title="Network Configuration Files"></a>Network Configuration Files</h2><p> /etc/init.d/network start<br> ???</p><h2 id="Network-Configuration-Commands"><a href="#Network-Configuration-Commands" class="headerlink" title="Network Configuration Commands"></a>Network Configuration Commands</h2><p>To view the IP address:<br>$ /sbin/ip addr show</p><p>To view the routing information:<br>$ /sbin/ip route show</p><p><strong>ip</strong> is a very powerful program that can do many things. Older (and more specific) utilities such as <strong>ifconfig</strong> and <strong>route</strong> are often used to accomplish similar tasks. A look at the relevant man pages can tell you much more about these utilities.</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><strong>ping</strong> is used to check whether or not a machine attached to the network can receive and send data; i.e., it confirms that the remote host is online and is responding.<br>To check the status of the remote host, at the command prompt, type <code>ping &lt;hostname&gt;</code>.<br><img src="https://lh3.googleusercontent.com/-WWCJScptKVw/VCoaHRUmzLI/AAAAAAAADEY/LDb4BD_pTZY/w1517-h653-no/Screen%2BShot%2B2014-09-30%2Bat%2B10.48.06.png"></p><h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><p>Servers maintain <strong>routing tables</strong> containing the addresses of each node in the network.<strong>route</strong> is used to view or change the IP routing table.<br><img src="https://lh6.googleusercontent.com/-8Xy4nDL37cE/VCocCP4OY1I/AAAAAAAADEs/XiRhyVmMkEc/w1653-h490-no/Screen%2BShot%2B2014-09-30%2Bat%2B10.56.54.png"></p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>？？？<br>traceroute is used to inspect the route which the data packet takes to reach the destination host which makes it quite useful for troubleshooting network delays and errors.</p><p>Check the route which the data packet takes to reach the destination host (google.com). Type <code>traceroute &lt;domain&gt;</code>.</p><h2 id="More-Networking-Tools"><a href="#More-Networking-Tools" class="headerlink" title="More Networking Tools"></a>More Networking Tools</h2><p>Now, let’s learn about some additional networking tools. Networking tools are very useful for monitoring and debugging network problems, such as network connectivity and network traffic.<br><img src="https://lh6.googleusercontent.com/-kGM0kxMWbts/VCotWIqGvwI/AAAAAAAADFc/OlpwAh0CkQ4/w1653-h708-no/Screen%2BShot%2B2014-09-30%2Bat%2B12.10.45.png"></p><h2 id="Using-More-Networking-Tools"><a href="#Using-More-Networking-Tools" class="headerlink" title="Using More Networking Tools"></a>Using More Networking Tools</h2><p>sudo ethtool eth0<br>netstat -r<br>sudo nmap -sP 10.0.2.15/24</p><p>先看自己啟動哪些service<br>service stats<br>lsof socket_name</p><h3 id="strace-ls"><a href="#strace-ls" class="headerlink" title="strace ls"></a>strace ls</h3><p>可以知道command怎麼run的</p><h3 id="netstat-grep某個port"><a href="#netstat-grep某個port" class="headerlink" title="netstat grep某個port"></a>netstat grep某個port</h3><p>看某個server的port</p><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>operating</p><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p>fd: 識別馬<br>lsof 可以茶城市到底開了多少個fd</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal Kanban：能夠用在自己身上的敏捷方法 學習筆記</title>
      <link href="/2014/09/29/old%20posts/2014-09-29-personal-kanban/"/>
      <url>/2014/09/29/old%20posts/2014-09-29-personal-kanban/</url>
      
        <content type="html"><![CDATA[<h1 id="如何將敏捷方法用在個人身上"><a href="#如何將敏捷方法用在個人身上" class="headerlink" title="如何將敏捷方法用在個人身上?"></a>如何將敏捷方法用在個人身上?</h1><h2 id="符合敏捷精神-Agile"><a href="#符合敏捷精神-Agile" class="headerlink" title="符合敏捷精神 Agile"></a>符合敏捷精神 Agile</h2><p>因為Scrum需要角色的區分，所以對個人來說，並不需要使用Scrum，只要符合敏捷精神即可。</p><h2 id="「個人看板系統」Personal-Kanban"><a href="#「個人看板系統」Personal-Kanban" class="headerlink" title="「個人看板系統」Personal Kanban"></a>「個人看板系統」Personal Kanban</h2><p>偶然發現這個真的是太酷了，一直在尋找可以管理自己的敏捷方法。在今天終於找到了答案。Personal Kanban可以讓自己看見自己的問題。看到自己問題之後便能夠做出調整，持續改善，增加產能。這也是敏捷方法的精神，透過敏捷方法改善單位時間的產能，避免低效率的加班，如此一來有更多的時間休息、散心，有更多的時間學習新的知識，形成正向循環。</p><h2 id="實行Personal-Kanban三步驟"><a href="#實行Personal-Kanban三步驟" class="headerlink" title="實行Personal Kanban三步驟"></a>實行Personal Kanban三步驟</h2><ol><li>visualize(視覺化)：把你手頭的工作用流程畫出來</li><li>Limit Work-in-progress（限制WIP)：依據利特爾調整進行中工作的數量。</li><li>Manage flow（管理工作流)：透過反省、分析最佳化你的工作，這是最有價值的部分。</li></ol><h3 id="步驟1-視覺化"><a href="#步驟1-視覺化" class="headerlink" title="步驟1: 視覺化"></a>步驟1: 視覺化</h3><p>把手頭上的工作畫成你的第一個看板。<br>因為看的到所以知道</p><ol><li>我漏了什麼？</li><li>每日排序工作行程，變得井然有序。</li><li>改善工作流程。</li><li>知道自己該做些什麼</li></ol><h3 id="步驟2：限制WIP數量來提高TH"><a href="#步驟2：限制WIP數量來提高TH" class="headerlink" title="步驟2：限制WIP數量來提高TH"></a>步驟2：限制WIP數量來提高TH</h3><h4 id="Buffering-緩衝區法"><a href="#Buffering-緩衝區法" class="headerlink" title="Buffering 緩衝區法"></a>Buffering 緩衝區法</h4><p>運用增減 Buffer 大小的控制方式，正是 Kanban Method 的威力所在，請依據利特爾法則 Little’s law ，來追求最大的產出。</p><h4 id="利特爾法則"><a href="#利特爾法則" class="headerlink" title="利特爾法則"></a>利特爾法則</h4><p><img src="https://lh4.googleusercontent.com/mLD54mGAOKQa0D2FpHbn_fJSBFkifnyfYXF0Qrg8Zws=w1753-h655-no"><br>Work in Process (進行中的工作) 同時開工但是卻尚未完工的工作項目數量<br>Throughput (產能) 團隊在單位時間內的產出。<br>Lead time (開發週期時間) 團隊完成一個項目所花費的平均時間。</p><p>如何來限制半成品 WIP數與獲取最大的產能TH值，便成了Kanban方法不斷從看板上做調整以追求開發瓶頸的工作了。<em><strong>設定限制工作項WIP數目可以讓我們更專注，更清楚眼前應該認真完成的目標。</strong></em></p><h3 id="步驟3：管理工作流：個人看板讓你掌握時間《做自己》"><a href="#步驟3：管理工作流：個人看板讓你掌握時間《做自己》" class="headerlink" title="步驟3：管理工作流：個人看板讓你掌握時間《做自己》"></a>步驟3：管理工作流：個人看板讓你掌握時間《做自己》</h3><p>個人看板不只是拿來提升個人工作效能, 它更能拿來管理自己生活與工作流程，讓你知道如何掌握時間《做自己》。</p><h4 id="如何改善瓶頸？"><a href="#如何改善瓶頸？" class="headerlink" title="如何改善瓶頸？"></a>如何改善瓶頸？</h4><ol><li>注意自己開始和完成工作的速率</li><li>每個工作是否按步就班在自己能夠容忍的範圍之內完成。</li><li>超過WIP的狀況嚴重嘛？應該採用寬鬆的方法（加大WIP值）還是緊縮的方法讓現象能夠改善呢？</li><li>等待的時間過程如何改善？</li></ol><blockquote><p><strong>等待</strong>是最沒有產能的工作，即使在個人的看板系統裡頭，你仍然會發現它充滿了人與人之間的合作關係，這正是所謂的人是群體的動物，是不可能離群索居的。那些與其他人相互關聯的工作，往往不僅僅是效能的問題它可能還牽扯到彼此之間的滿意和信任的程度，這些或許才是你真正在意的。因此把你認為重要的工作呈現出來，已經是一個好的開始了。</p></blockquote><h4 id="遭遇到緊急事故；看板方法該如何規劃呢"><a href="#遭遇到緊急事故；看板方法該如何規劃呢" class="headerlink" title="遭遇到緊急事故；看板方法該如何規劃呢?"></a>遭遇到緊急事故；看板方法該如何規劃呢?</h4><p>就在看板下方另外開闢一條渠道來單獨處理它，我們稱之為:新增渠道的處理方法。這正是所謂的多工，對效能而言是很不好的，但事出必有因，再怎麼無奈也得做。而且必須盡快做完</p><h4 id="持續改善"><a href="#持續改善" class="headerlink" title="持續改善"></a>持續改善</h4><p>看板方法是典型的改善工程，它的改進方式強烈的依靠經驗，因此問題成了你最佳的導師，所以成長的過程就變成: 發覺問題 -&gt; 思考如何改善並嘗試改善它 -&gt; 在解決問題後，繼續再來…。因此持續改善便成為了他的座右銘。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>使用敏捷方法改善個人效率一直是我非常想做的事情，今天偶然間開啟了Kanban的這一扇門，讓我日後學習有了方向。</p><p>主要研讀對象：這篇學習筆記是研讀以下文章所作出的筆記，想要深入了解務必讀一讀下列的文章。</p><ul><li><a href="http://ruddyblog.wordpress.com/2014/09/21/%E9%81%8B%E7%94%A8%E5%80%8B%E4%BA%BA%E7%9C%8B%E6%9D%BF%E5%81%9A%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/">運用個人看板做時間管理</a></li><li><a href="http://ruddyblog.wordpress.com/2014/08/25/%E7%94%A8%E4%BE%86%E6%8F%90%E5%8D%87%E5%80%8B%E4%BA%BA%E6%95%88%E8%83%BD%E7%9A%84%E3%80%8C%E5%80%8B%E4%BA%BA%E7%9C%8B%E6%9D%BF%E7%B3%BB%E7%B5%B1%E3%80%8D-personal-kanban/">用來提升個人效能的「個人看板系統」– Personal Kanban</a></li></ul><h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><ul><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/kanban.html">看板方法介紹（1）：Kanban這個字是什麼意思？</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/2push-pull.html">看板方法介紹（2）：Push 和 Pull</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/3kanban-visualizelimit-wip.html">看板方法介紹（3）：Kanban方法的六個實務做法–Visualize與Limit WIP</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/4kanban-manage-flow.html">看板方法介紹（4）：Kanban方法的六個實務做法–Manage Flow</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/5kanbanmake-policies-explicit.html">看板方法介紹（5）：Kanban方法的六個實務做法—Make Policies Explicit</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/6kanbanimplement-feedback-loops.html">看板方法介紹（6）：Kanban方法的六個實務做法—Implement Feedback Loops</a></li><li><a href="http://teddy-chen-tw.blogspot.tw/2014/08/7kanbanimprove-collaboratively-evolve.html">看板方法介紹（7）：Kanban方法的六個實務做法—Improve Collaboratively, Evolve Experimentally</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Agile </tag>
            
            <tag> Kanban </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch11：Local Security Principle section 4~5</title>
      <link href="/2014/09/22/old%20posts/2014-09-22-edx-linux-foundation-ch11-local-security-principle-section-45/"/>
      <url>/2014/09/22/old%20posts/2014-09-22-edx-linux-foundation-ch11-local-security-principle-section-45/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-4-Working-with-passwords"><a href="#Section-4-Working-with-passwords" class="headerlink" title="Section 4: Working with passwords"></a>Section 4: Working with passwords</h1><h2 id="How-Passwords-are-Stored"><a href="#How-Passwords-are-Stored" class="headerlink" title="How Passwords are Stored"></a>How Passwords are Stored</h2><p> On modern systems, passwords are actually stored in an encrypted format in a secondary file named <code>/etc/shadow</code>. Only those with root access can modify/read this file.</p><h2 id="Password-Encryption"><a href="#Password-Encryption" class="headerlink" title="Password Encryption"></a>Password Encryption</h2><p>Most Linux distributions rely on a modern password encryption algorithm called <strong>SHA-512</strong> (Secure Hashing Algorithm 512 bits), developed by the U.S. National Security Agency (NSA) to encrypt passwords.</p><p>可以玩玩看下面這個指令，加密test這個字。</p><pre><code>echo -n test | sha512sum</code></pre><h2 id="Good-Password-Practices"><a href="#Good-Password-Practices" class="headerlink" title="Good Password Practices"></a>Good Password Practices</h2><p>IT professionals follow several good practices for securing the data and the password of every user.</p><h3 id="1-Password-aging"><a href="#1-Password-aging" class="headerlink" title="1.Password aging"></a>1.Password aging</h3><p><strong>Password aging</strong> is a method to ensure that users get prompts that remind them to create a new password after a specific period. This can ensure that passwords, if cracked, will only be usable for a limited amount of time. This feature is implemented using <strong>chage</strong>, which configures the password expiry information for a user.</p><h3 id="2-PAM"><a href="#2-PAM" class="headerlink" title="2.PAM"></a>2.PAM</h3><p>Another method is to force users to set strong passwords using Pluggable Authentication Modules (PAM). PAM can be configured to automatically verify that a password created or modified using the passwd utility is sufficiently strong. PAM configuration is implemented using a library called pam_cracklib.so, which can also be replaced by pam_passwdqc.so for more options.</p><h3 id="3-John-the-ripper"><a href="#3-John-the-ripper" class="headerlink" title="3.John the ripper"></a>3.John the ripper</h3><p>One can also install password cracking programs, such as John The Ripper, to secure the password file and detect weak password entries. It is recommended that written authorization be obtained before installing such tools on any system that you do not own.</p><h1 id="Seciton-5-Securing-the-Boot-Process-and-Hardware"><a href="#Seciton-5-Securing-the-Boot-Process-and-Hardware" class="headerlink" title="Seciton 5: Securing the Boot Process and Hardware"></a>Seciton 5: Securing the Boot Process and Hardware</h1><h2 id="Requiring-Boot-Loader-Passwords"><a href="#Requiring-Boot-Loader-Passwords" class="headerlink" title="Requiring Boot Loader Passwords"></a>Requiring Boot Loader Passwords</h2><p>You can secure the boot process with a secure password to prevent someone from bypassing the user authentication step.</p><h3 id="GRUB-version-1（older-version）"><a href="#GRUB-version-1（older-version）" class="headerlink" title="GRUB version 1（older version）"></a>GRUB version 1（older version）</h3><p>you can invoke <strong>grub-md5-crypt</strong>  which will prompt you for a password and then encrypt as shown on the adjoining screen.</p><p>You then must edit <code>/boot/grub/grub.conf</code> by adding the following line below the timeout entry:</p><pre><code>password --md5 $1$Wnvo.1$qz781HRVG4jUnJXmdSCZ30</code></pre><p>You can also force passwords for only certain boot choices rather than all.<br>舊的作法是直接修改<code>/boot/grub/grub.conf</code></p><h3 id="GRUB-version-2（older-version）"><a href="#GRUB-version-2（older-version）" class="headerlink" title="GRUB version 2（older version）"></a>GRUB version 2（older version）</h3><p>For the now more common GRUB version 2 things are more complicated, and you have more flexibility and can do things like use user-specific passwords, which can be their normal login password.  Also you never edit the configuration file, <code>/boot/grub/grub.cfg</code>, directly, rather you edit system configuration files in <code>/etc/grub.d</code> and then run <strong>update-grub</strong>. One explanation of this can be found at <a href="https://help.ubuntu.com/community/Grub2/Passwords">https://help.ubuntu.com/community/Grub2/Passwords</a>.</p><p>新的作法不直接修改<code>/boot/grub/grub.cfg</code>，而是先修改<code>/etc/grub.d</code>然後跑update-grub。</p><h2 id="Hardware-Vulnerability"><a href="#Hardware-Vulnerability" class="headerlink" title="Hardware Vulnerability"></a>Hardware Vulnerability</h2><p><strong>When hardware is physically accessible, security can be compromised by:</strong></p><ol><li>Key logging: Recording the real time activity of a computer user including the keys they press. The captured data can either be stored locally or transmitted to remote machines</li><li>Network sniffing: Capturing and viewing the network packet level data on your network</li><li>Booting with a live or rescue disk</li><li>Remounting and modifying disk content</li></ol><p><strong>The guidelines of security are:</strong></p><ol><li>Lock down workstations and servers</li><li>Protect your network links such that it cannot be accessed by people you do not trust</li><li>Protect your keyboards where passwords are entered to ensure the keyboards cannot be tampered with</li><li>Ensure a password protects the BIOS in such a way that the system cannot be booted with a live or rescue DVD or USB key</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch11：Local Security Principle section 1~3</title>
      <link href="/2014/09/22/old%20posts/2014-09-22-edx-linux-foundation-ch11-understanding-linux-security/"/>
      <url>/2014/09/22/old%20posts/2014-09-22-edx-linux-foundation-ch11-understanding-linux-security/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-Understanding-Linux-Security"><a href="#Section-1-Understanding-Linux-Security" class="headerlink" title="Section 1 Understanding Linux Security"></a>Section 1 Understanding Linux Security</h1><p>使用者權限的管理在個人電腦上可以放輕鬆使用，但如果是多人共用的電腦，就必須限制的嚴格，最好只給用戶他所可以用的權限就好，不要多給，本章將會以最嚴格的標準來說明如何管理使用者的權限以增加安全性。</p><h2 id="User-Accounts"><a href="#User-Accounts" class="headerlink" title="User Accounts"></a>User Accounts</h2><p>For each user, the following seven fields are maintained in the /etc/passwd file:<br><img src="https://lh5.googleusercontent.com/Qizgf3rUafom1Uf72hKqjWWcp911th-wiySVy0Rct4o=w1483-h1185-no"></p><h2 id="Types-of-Accounts"><a href="#Types-of-Accounts" class="headerlink" title="Types of Accounts"></a>Types of Accounts</h2><p>By default, Linux distinguishes between several account types in order to isolate processes and workloads. Linux has four types of accounts:</p><ul><li>root</li><li>System</li><li>Normal</li><li>Network</li></ul><p> The <code>last</code> utility, which shows the last time each user logged into the system, can be used to help identify potentially inactive accounts which are candidates for system removal.</p><h2 id="Understanding-the-root-Account"><a href="#Understanding-the-root-Account" class="headerlink" title="Understanding the root Account"></a>Understanding the root Account</h2><p> root is the most privileged account on a Linux/UNIX system. This account has the ability to carry out all facets of system administration, including adding accounts, changing user passwords, examining log files, installing software, etc. Utmost care must be taken when using this account. It has no security restrictions imposed upon it.</p><h1 id="section-2-Understanding-the-usage-of-root"><a href="#section-2-Understanding-the-usage-of-root" class="headerlink" title="section 2: Understanding the usage of root"></a>section 2: Understanding the usage of root</h1><h2 id="Operations-that-Require-root-Privileges"><a href="#Operations-that-Require-root-Privileges" class="headerlink" title="Operations that Require root Privileges"></a>Operations that Require root Privileges</h2><p> root privileges are required to perform operations such as:</p><ul><li>Creating, removing and managing user accounts.</li><li>Managing software packages.</li><li>Removing or modifying system files.</li><li>Restarting system services.</li></ul><p>一般用戶也可以安裝或是更新軟體，但是只有root帳號可以讓軟體做一些跟系統有關的事情。<br><img src="https://lh4.googleusercontent.com/IFzh7nozJnb-TvQqkzSRYh7acu0Hfyv_fYdNMIJTsDE=w1443-h948-no"></p><h2 id="Creating-a-New-User-in-Linux"><a href="#Creating-a-New-User-in-Linux" class="headerlink" title="Creating a New User in Linux"></a>Creating a New User in Linux</h2><p>useradd <username><br>passwd <username></p><h2 id="Operations-That-Do-Not-Require-root-Privileges"><a href="#Operations-That-Do-Not-Require-root-Privileges" class="headerlink" title="Operations That Do Not Require root Privileges"></a>Operations That Do Not Require root Privileges</h2><h3 id="SUID（Set-owner-User-ID-upon-execution）"><a href="#SUID（Set-owner-User-ID-upon-execution）" class="headerlink" title="SUID（Set owner User ID upon execution）"></a>SUID（Set owner User ID upon execution）</h3><p>SUID (similar to the Windows “run as” feature)is a special kind of file permission given to a file. SUID provides temporary permissions to a user to run a program with the permissions of the file owner  (which may be root) instead of the permissions held by the user.</p><p>當 s 這個標誌出現在檔案擁有者的 x 權限上時，例如<code>/usr/bin/passwd</code> 這個檔案的權限狀態：『-rwsr-xr-x』，此時就被稱為 Set UID，簡稱為 SUID 的特殊權限。明明 <code>/etc/shadow</code> 就不能讓 vbird 這個一般帳戶去存取的，為什麼還能夠修改這個檔案內的密碼呢？ 這就是 SUID 的功能!</p><ol><li>vbird 對於 <code>/usr/bin/passwd</code> 這個程式來說是具有 x 權限的，表示 vbird 能執行 passwd；</li><li>passwd 的擁有者是 root 這個帳號；</li><li>vbird 執行 passwd 的過程中，會『暫時』獲得 root 的權限；</li><li><code>/etc/shadow</code> 就可以被 vbird 所執行的 passwd 所修改。</li></ol><p>另外，SUID 僅可用在binary program 上， 不能夠用在 shell script 上面！這是因為 shell script 只是將很多的 binary 執行檔叫進來執行而已！</p><h1 id="Section-3-Comparing-sudo-and-su"><a href="#Section-3-Comparing-sudo-and-su" class="headerlink" title="Section 3:Comparing sudo and su"></a>Section 3:Comparing sudo and su</h1><p>Users’ authorization for using sudo is based on configuration information stored in the <code>/etc/sudoers</code> file and in the <code>/etc/sudoers.d</code> directory.</p><h2 id="The-sudoers-File"><a href="#The-sudoers-File" class="headerlink" title="The sudoers File"></a>The sudoers File</h2><p>Whenever sudo is invoked, a trigger will look at /etc/sudoers and the files in /etc/sudoers.d to determine if the user has the right to use sudo and what the scope of their privilege is. Unknown user requests and requests to do operations not allowed to the user.</p><h3 id="Edit-sudoers"><a href="#Edit-sudoers" class="headerlink" title="Edit sudoers"></a>Edit sudoers</h3><p> You can edit the <code>sudoers</code> file by using <code>visudo</code>, which ensures that only one person is editing the file at a time.</p><p>The basic structure of an entry is:</p><pre><code>who where = (as_whom) what</code></pre><h3 id="etc-sudoers-d"><a href="#etc-sudoers-d" class="headerlink" title="/etc/sudoers.d"></a>/etc/sudoers.d</h3><p>Most Linux distributions now prefer you add a file in the directory <code>/etc/sudoers.d</code> with a name the same as the user. This file contains the individual user’s sudo configuration, and one should leave the master configuration file untouched except for changes that affect all users.</p><h2 id="Command-Logging"><a href="#Command-Logging" class="headerlink" title="Command Logging"></a>Command Logging</h2><p>By default, sudo commands and any failures are logged in <code>/var/log/auth.log</code> under the Debian distribution family, and in <code>/var/log/messages</code> or <code>/var/log/secure</code> on other systems.This is an important safeguard to allow for tracking and accountability of sudo use. A typical entry of the message contains:</p><p>Running a command such as sudo whoami results in a log file entry such as:<br>Dec 8 14:20:47 server1 sudo: op : TTY=pts/6 PWD=/var/log USER=root COMMAND=/usr/bin/whoami</p><h2 id="Process-Isolation"><a href="#Process-Isolation" class="headerlink" title="Process Isolation"></a>Process Isolation</h2><p>Linux is considered to be more secure than many other operating systems because processes are naturally isolated from each other. One process normally cannot access the resources of another process, even when that process is running with the same user privileges.</p><h2 id="Hardware-Device-Access"><a href="#Hardware-Device-Access" class="headerlink" title="Hardware Device Access"></a>Hardware Device Access</h2><h3 id="device-special-file-often-called-a-device-node-under-the-dev-directory-that-corresponds-to-the-device-being-accessed"><a href="#device-special-file-often-called-a-device-node-under-the-dev-directory-that-corresponds-to-the-device-being-accessed" class="headerlink" title="device special file (often called a device node) under the /dev directory that corresponds to the device being accessed."></a>device special file (often called a device node) under the /dev directory that corresponds to the device being accessed.</h3><h3 id="dev-sd"><a href="#dev-sd" class="headerlink" title="/dev/sd*"></a>/dev/sd*</h3><p>Hard disks, for example, are represented as /dev/sd*. While a root user can read and write to the disk in a raw fashion (for example, by doing something like:</p><pre><code>$ echo hello world &gt; /dev/sda1</code></pre><p>寫入divice node很容易會毀掉整個檔案系統，所以絕對不要直接存取device node。</p><h2 id="Keeping-Current"><a href="#Keeping-Current" class="headerlink" title="Keeping Current"></a>Keeping Current</h2><p>The best practice is to take advantage of your Linux distribution’s mechanism for automatic updates and never postpone them. It is extremely rare that such an update will cause new problems.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Agile Meetup 2014 9月：喚醒者的工具箱</title>
      <link href="/2014/09/18/old%20posts/2014-09-18-agile-meetup-2014-in-september/"/>
      <url>/2014/09/18/old%20posts/2014-09-18-agile-meetup-2014-in-september/</url>
      
        <content type="html"><![CDATA[<h2 id="Part1-當一個好的教練！"><a href="#Part1-當一個好的教練！" class="headerlink" title="Part1:當一個好的教練！"></a>Part1:當一個好的教練！</h2><h3 id="如何讓一個二十幾年沒運動的阿宅學會打球"><a href="#如何讓一個二十幾年沒運動的阿宅學會打球" class="headerlink" title="如何讓一個二十幾年沒運動的阿宅學會打球"></a>如何讓一個二十幾年沒運動的阿宅學會打球</h3><p>一個網球教練如何讓一個二十幾年沒出門運動的宅女學會打球，答案是沒有太多的技巧，沒有標準的動作，當場示範怎麼打網球，然後把球丟給那個宅宅，阿宅揮空幾次以後，發現真的打的到了！證明學習的最好方法不是看書，而是用本能來適應。</p><h3 id="Try-error-嘗試錯誤"><a href="#Try-error-嘗試錯誤" class="headerlink" title="Try error 嘗試錯誤"></a>Try error 嘗試錯誤</h3><p>人類的腦子分為兩個部分，其中腦幹會想保護自己。 先讓人專注之後，保護自己的機制就會降低<br>一旦降低了自己的恐懼感，便增加awareness。<br>learning the hard way<br>自己跌倒才會學到</p><h2 id="Part2-營銷"><a href="#Part2-營銷" class="headerlink" title="Part2:營銷"></a>Part2:營銷</h2><p>訊息爆炸的時代如何讓別人知道自己的產品，關鍵是這事情是否令人所印象深刻（markable），製造一些話題，會有不錯的效果（紫牛效應）。</p><h3 id="一個例子-雕爺牛楠"><a href="#一個例子-雕爺牛楠" class="headerlink" title="一個例子-雕爺牛楠"></a>一個例子-雕爺牛楠</h3><p>找美食家來試吃，每個月淘汰兩道菜，增加兩道菜，製造話題<br>1.理解鐵桿粉絲真正想要需要什麼<br>2.墨守成歸是風險最大的作法<br>3.在邊緣求生存才是正確的作法</p><blockquote><p>敏捷轉型其實是個營銷</p></blockquote><h2 id="Part3-不同的人思考的方式"><a href="#Part3-不同的人思考的方式" class="headerlink" title="Part3:不同的人思考的方式"></a>Part3:不同的人思考的方式</h2><h3 id="第一種人early-adopter"><a href="#第一種人early-adopter" class="headerlink" title="第一種人early adopter"></a>第一種人early adopter</h3><p>特色：喜歡嘗鮮</p><h4 id="原則一：specific-具體的"><a href="#原則一：specific-具體的" class="headerlink" title="原則一：specific 具體的"></a>原則一：specific 具體的</h4><p>轉型的時候行為是很重要的，關注具體的行為，並鼓勵之<br>變革的行為需要鼓勵</p><blockquote><p>the curse of knowledge 認知心理學</p></blockquote><p>在daily scrum提出具體的問題<br>讓人喝幾口水後&gt; 抓住具體的機會，讓人做反思</p><p>1.抓住機會&gt; 你這會是為我開的？<br>2.有人不來開會<br>團隊自己的問題，不該由scrum master來叫。<br>解答：基於事實，剛剛看到有人在看窗外。<br>3.誰來畫板<br>趕緊去網路上找一個最爛的板，別人受不了就會去畫了，畫了第一次以後就是他畫了。</p><blockquote><p>好的教練對好的team才有作用，對爛的team還是沒救（指大家想不想為了進步而努力）。</p></blockquote><h3 id="第二種人-early-majority"><a href="#第二種人-early-majority" class="headerlink" title="第二種人 early majority"></a>第二種人 early majority</h3><p>願意判斷，很實際，但害怕失敗。<br>這些人怎麼搞？<br>1.穿他的鞋跟他一起做事情 ，讓他發現一些新的方式<br>讓人自己來找你做事情<br>2.做出的事情可以分享<br>network-利用網絡傳小消息</p><h3 id="第三種人-late-majority-後知後覺"><a href="#第三種人-late-majority-後知後覺" class="headerlink" title="第三種人 late majority 後知後覺"></a>第三種人 late majority 後知後覺</h3><p>要用傳染，社會壓力的方式<br>例子：<br>do me a favor 叫下屬看某一頁，引起他的興趣。</p><h3 id="第四種人"><a href="#第四種人" class="headerlink" title="第四種人"></a>第四種人</h3><p>i’m working the change</p><p>###演講投影片<br><a href="http://www.slideshare.net/tengzy/isniper-how-to-make-the-change-when-change-is-hard">連結</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Agile Meetup 2014 9月：More with LeSS</title>
      <link href="/2014/09/18/old%20posts/2014-09-18-agile-meetup-2014-september-more-with-less-to-participate-in-experiences/"/>
      <url>/2014/09/18/old%20posts/2014-09-18-agile-meetup-2014-september-more-with-less-to-participate-in-experiences/</url>
      
        <content type="html"><![CDATA[<p>這是第三次參加agile meetup，真的很感謝scrum community舉辦這麼這麼有優質又免費的活動。<br>今天的主題LeSS在講的是Large-Scale Scrum，也就是大型的scrum組織如何協同合作。</p><p>每一個小team都要正確的執行scrum，否則team的數量一多更容易崩壞。</p><h2 id="今天提到的scrum原則"><a href="#今天提到的scrum原則" class="headerlink" title="今天提到的scrum原則"></a>今天提到的scrum原則</h2><ol><li><p>每個團隊成員都有責任管理自己</p></li><li><p>scaling itegration<br>每個人都不斷的提交(commit)，一天提交2~5次是不夠的，最好可以每小時都commit。</p></li><li><p>在backlog中刪除不必要的功能</p></li></ol><blockquote><p>resource pool是不可行的方式<br>resource pool指的是誰有空誰就被抓去組成一個團隊來處理新的專案，因為每次成立新的團隊就要一段磨和期，無形間浪費了很多的產能。一個scrum team組成三年以上都有可能再度成長。</p></blockquote><h2 id="feature-team與component-team"><a href="#feature-team與component-team" class="headerlink" title="feature team與component team"></a>feature team與component team</h2><p>由feature來組隊代替由componet team，因為這樣的開發方式可以降低cycle time，也就是從收到ticket到完成的時間。因為componet team是把所有功能做好之後再組合起來，這樣開發cycle time至少都需要6週以上。而如果針對feature來開發，則1周內就可以看到成果，符合agile精神</p><h2 id="community-of-practice"><a href="#community-of-practice" class="headerlink" title="community of practice"></a>community of practice</h2><p>每個feature team派出代表，了解其他的team所寫的componentd</p><h2 id="單元測試的重要性"><a href="#單元測試的重要性" class="headerlink" title="單元測試的重要性"></a>單元測試的重要性</h2><p>單元測試可以讓別人知道如何使用你的程式，並且可以讓別人知道你的程式有什麼功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 學習筆記</title>
      <link href="/2014/09/17/old%20posts/2014-09-17-vim-learning-notes/"/>
      <url>/2014/09/17/old%20posts/2014-09-17-vim-learning-notes/</url>
      
        <content type="html"><![CDATA[<p>常用指令筆記</p><p>第一課：<br>使用hjkl控制上下左右</p><p>第二課：<br>使用w e b跳躍單字</p><p>第三課：<br>使用dd剪下一行，並使用p或P貼上。</p><p>第三課：移動<br>跳至某一行 <code>:第幾行</code><br>跳至段落<code>&#123;</code>或<code>&#125;</code><br>跳至句首$<br>跳至句尾0<br>跳至某行：</p><p>第四課：畫面捲動<br>page down:<br>page up:</p><h2 id="Vim資源整理"><a href="#Vim資源整理" class="headerlink" title="Vim資源整理"></a>Vim資源整理</h2><p><a href="http://vim-adventures.com/">VIM Adventures</a><br><a href="https://www.facebook.com/groups/vim.tw/">Vim 正體中文社團</a><br><a href="http://vim.wikia.com/wiki/Best_Vim_Tips">Best Vim Tips</a><br><a href="http://www.vimgenius.com/">Vimgenius</a><br>一個畫面精美的教學，不過考法似乎是用背的XD<br><a href="http://www.openvim.com/sandbox.html">Iteractive Vim</a><br>右邊有指令邊看邊試還不錯用，但並非全部vim的指令都支援，只有表上的可以使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch10：Text Editor</title>
      <link href="/2014/09/17/old%20posts/2014-09-17-edx-linux-foundation-ch10text-editor/"/>
      <url>/2014/09/17/old%20posts/2014-09-17-edx-linux-foundation-ch10text-editor/</url>
      
        <content type="html"><![CDATA[<p>本週比較輕鬆，介紹的是Text Editor，但是我卻從中得到很多收穫。課程中介紹了Vim和Emacs，話說這是我第一次聽到Emacs這個編輯器，但他卻是原生的linux編輯器。而且還有不少的愛用者，開發效率也不輸Vim！<br>( 以下內容大部分由Carl大哥所分享，加上我的心得所寫而成。 )</p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>VIM Adventures<br><a href="http://vim-adventures.com/">http://vim-adventures.com/</a><br>初學Vim的好遊戲，強迫你要用Vim指令來解謎破關XD</p><p>Vim 正體中文社團<br><a href="https://www.facebook.com/groups/vim.tw/">https://www.facebook.com/groups/vim.tw/</a><br>有很多的Vim資源、套件。</p><p>Best Vim Tips<br><a href="http://vim.wikia.com/wiki/Best_Vim_Tips">http://vim.wikia.com/wiki/Best_Vim_Tips</a></p><p>Vimgenius<br><a href="http://www.vimgenius.com/">http://www.vimgenius.com/</a><br>一個畫面精美的教學，不過考法似乎是用背的XD</p><p>Iteractive Vim<br><a href="http://www.openvim.com/sandbox.html">http://www.openvim.com/sandbox.html</a><br>右邊有指令邊看邊試還不錯用，但並非全部vim的指令都支援，只有表上的可以使用。</p><h3 id="vim使用技巧"><a href="#vim使用技巧" class="headerlink" title="vim使用技巧"></a>vim使用技巧</h3><p>ZZ = :wq</p><p>無法寫入的狀況<br>關鍵字：vim sudo</p><p>github vundle</p><p>:set paste<br>貼進來就不會縮排變成梯形</p><p>ultra vim<br><a href="https://github.com/bcbcarl/ultra_vim">https://github.com/bcbcarl/ultra_vim</a></p><h2 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h2><p>特色：功能強大，可取代 IDE</p><p>Emacs tutorial: C-h t<br>p.16 commands for emacs</p><p>Awesome Emacs<br><a href="https://github.com/emacs-tw/awesome-emacs">https://github.com/emacs-tw/awesome-emacs</a></p><p>Emacs 台灣<br><a href="https://twitter.com/EmacsTW">https://twitter.com/EmacsTW</a></p><p>Emacs 中文<br><a href="https://plus.google.com/communities/115469134289640648214">https://plus.google.com/communities/115469134289640648214</a></p><p>Dot-Emacs<br><a href="http://www.emacswiki.org/emacs/CategoryDotEmacs">http://www.emacswiki.org/emacs/CategoryDotEmacs</a><br><a href="http://www.dotemacs.de/">http://www.dotemacs.de</a></p><p>Emacs Starter Kit<br><a href="http://eschulte.github.io/emacs-starter-kit/">http://eschulte.github.io/emacs-starter-kit/</a></p><p>Configuring Emacs as a Python IDE<br><a href="http://blog.csdn.net/mikelearnscode/article/details/23022277">http://blog.csdn.net/mikelearnscode/article/details/23022277</a><br>可與 PyCharm 一拼，作者試了 Sublime 依然選了 Emacs，建議來看看。</p><p>emac starter kit<br>不錯的套件包</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch 9：User Environment Section 5 File Permissions</title>
      <link href="/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-user-environment-section-5-file-permissions/"/>
      <url>/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-user-environment-section-5-file-permissions/</url>
      
        <content type="html"><![CDATA[<h2 id="File-Ownership"><a href="#File-Ownership" class="headerlink" title="File Ownership"></a>File Ownership</h2><p><img src="https://lh5.googleusercontent.com/5pM1DTFHc1_5F8GpOpCa5rfG7hBk7xk9JN4uPV9UIxk=w1755-h485-no"></p><h1 id="0-File-Permission-Modes"><a href="#0-File-Permission-Modes" class="headerlink" title="0.File Permission Modes"></a>0.File Permission Modes</h1><table><thead><tr><th align="center">rwx:</th><th align="center">rwx:</th><th align="center">rwx</th></tr></thead><tbody><tr><td align="center">u:</td><td align="center">g:</td><td align="center">o</td></tr></tbody></table><h3 id="rwx"><a href="#rwx" class="headerlink" title="rwx"></a>rwx</h3><p> Files have three kinds of permissions: read (r), write (w), execute (x). These are generally represented as in <strong>rwx</strong>.</p><h3 id="ugo"><a href="#ugo" class="headerlink" title="ugo"></a>ugo</h3><p> u:user/owner<br> g:group<br> 0:others</p><h2 id="1-chmod"><a href="#1-chmod" class="headerlink" title="1.chmod"></a>1.chmod</h2><pre><code>$ ls -l a_file-rw-rw-r-- 1 coop coop 1601 Mar 9 15:04 a_file$ chmod uo+x,g-w a_file$ ls -l a_file-rwxr--r-x 1 coop coop 1601 Mar 9 15:04 a_file</code></pre><h3 id="This-kind-of-syntax-can-be-difficult-to-type-and-remember"><a href="#This-kind-of-syntax-can-be-difficult-to-type-and-remember" class="headerlink" title="This kind of syntax can be difficult to type and remember"></a>This kind of syntax can be difficult to type and remember</h3><p>so one often uses a shorthand which lets you set all the permissions in one step.</p><p><strong>4</strong> if read permission is desired.<br><strong>2</strong> if write permission is desired.<br><strong>1</strong> if execute permission is desired.<br>Thus <strong>7</strong> means read/write/execute, <strong>6</strong> means read/write, and <strong>5</strong> means read/execute.</p><p>When you apply this to the chmod command you have to give three digits for each degree of freedom, such as in</p><pre><code>$ chmod 755 a_file$ ls -l a_file-rwxr-xr-x 1 coop coop 1601 Mar 9 15:04 a_file</code></pre><h2 id="2-chown"><a href="#2-chown" class="headerlink" title="2.chown"></a>2.chown</h2><p>有三個檔案file-1, file-2, temp</p><pre><code>$ ls -ltotal 4-rw-rw-r--. 1 bob bob 0 Mar 16 19:04 file-1-rw-rw-r--. 1 bob bob 0 Mar 16 19:04 file-2drwxrwxr-x. 2 bob bob 4096 Mar 16 19:04 temp</code></pre><p>對file-1下<code>chown</code>改變檔案擁有者為root</p><pre><code>$ sudo chown root file-1[sudo] password for bob:</code></pre><p>下<code>ls -a</code>看檔案完整的訊息，發現檔案擁有者已經改變成root。</p><pre><code>$ ls -ltotal 4-rw-rw-r--. 1 root bob 0 Mar 16 19:04 file-1-rw-rw-r--. 1 bob bob 0 Mar 16 19:04 file-2drwxrwxr-x. 2 bob bob 4096 Mar 16 19:04 temp</code></pre><h2 id="3-chgrp"><a href="#3-chgrp" class="headerlink" title="3.chgrp"></a>3.chgrp</h2><p>續上面的例子：這次對file-2下<code>chgrp</code>改變檔案的群組。</p><pre><code>$ sudo chgrp bin file-2$ ls -ltotal 4-rw-rw-r--. 1 root bob 0 Mar 16 19:04 file-1-rw-rw-r--. 1 bob bin 0 Mar 16 19:04 file-2drwxrwxr-x. 2 bob bob 4096 Mar 16 19:04 temp</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch 9：User Environment Section 3 and 4</title>
      <link href="/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-user-environment-section-3-recalling-previous-commands/"/>
      <url>/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-user-environment-section-3-recalling-previous-commands/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-3-Recalling-Previous-Commands"><a href="#Section-3-Recalling-Previous-Commands" class="headerlink" title="Section 3:Recalling Previous Commands"></a>Section 3:Recalling Previous Commands</h1><h3 id="Up-and-Down"><a href="#Up-and-Down" class="headerlink" title="Up and Down"></a>Up and Down</h3><p> you can recall previously used commands simply by using the Up and Down cursor keys.</p><h3 id="histroy"><a href="#histroy" class="headerlink" title="histroy"></a>histroy</h3><p> To view the list of previously executed commands, you can just type history at the command line.</p><h3 id="bash-history"><a href="#bash-history" class="headerlink" title="~/.bash_history."></a>~/.bash_history.</h3><p>The list of commands is displayed with the most recent command appearing last in the list. This information is stored in ~/.bash_history.</p><h2 id="Using-History-Environment-Variables"><a href="#Using-History-Environment-Variables" class="headerlink" title="Using History Environment Variables"></a>Using History Environment Variables</h2><p><strong>$HISTFILE</strong> stores the location of the history file.<br><strong>$HISTFILESIZE</strong> stores the maximum number of lines in the history file.<br><strong>$HISTSIZE</strong> stores the maximum number of lines in the history file for the current session.</p><pre><code>ubuntu@ip-172-31-27-94:~$ echo $HISTFILE/home/ubuntu/.bash_historyubuntu@ip-172-31-27-94:~$ echo $HISTFILESIZE2000ubuntu@ip-172-31-27-94:~$ echo $HISTSIZE1000ubuntu@ip-172-31-27-94:~$</code></pre><h2 id="Finding-and-Using-Previous-Commands"><a href="#Finding-and-Using-Previous-Commands" class="headerlink" title="Finding and Using Previous Commands"></a>Finding and Using Previous Commands</h2><h3 id="Up-Down-arrow-key"><a href="#Up-Down-arrow-key" class="headerlink" title="Up/Down arrow key"></a>Up/Down arrow key</h3><p>Browse through the list of commands previously executed</p><h3 id="Pronounced-as-bang-bang"><a href="#Pronounced-as-bang-bang" class="headerlink" title="!! (Pronounced as bang-bang)"></a>!! (Pronounced as bang-bang)</h3><p>Execute the previous command</p><h3 id="CTRL-R"><a href="#CTRL-R" class="headerlink" title="CTRL-R"></a>CTRL-R</h3><p>Search previously used commands</p><h2 id="Executing-Previous-Commands"><a href="#Executing-Previous-Commands" class="headerlink" title="Executing Previous Commands"></a>Executing Previous Commands</h2><p><img src="https://lh5.googleusercontent.com/-2D4GK51OD00/VB6ZUJyvS2I/AAAAAAAADAM/DpVtbXnDTBA/w1753-h628-no/Screen%2BShot%2B2014-09-21%2Bat%2B17.22.50.png"></p><h1 id="Section-4-Command-Aliases"><a href="#Section-4-Command-Aliases" class="headerlink" title="Section 4:Command Aliases"></a>Section 4:Command Aliases</h1><h2 id="Creating-Aliases"><a href="#Creating-Aliases" class="headerlink" title="Creating Aliases"></a>Creating Aliases</h2><p>You can create customized commands or modify the behavior of already existing ones by creating aliases. Most often these aliases are placed in your <code> ~/.bashrc</code>  file so they are available to any command shells you create.</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>列出所有的縮寫(alias)</p><h3 id="alias-縮寫＝’指令’"><a href="#alias-縮寫＝’指令’" class="headerlink" title="alias 縮寫＝’指令’"></a>alias 縮寫＝’指令’</h3><p>設定新的縮寫</p><h3 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h3><p><img src="https://lh3.googleusercontent.com/-QFhJn8bGUes/VB6cgWaY8bI/AAAAAAAADAY/5yPSqpMnpxA/w1695-h1185-no/Screen%2BShot%2B2014-09-21%2Bat%2B17.36.55.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch 9：User Environment Section 2 Environment Variables</title>
      <link href="/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-environment-variable/"/>
      <url>/2014/09/14/old%20posts/2014-09-14-edx-linux-foundation-ch-9-environment-variable/</url>
      
        <content type="html"><![CDATA[<p>##Environment Variables<br>Environment variables are simply named quantities that have specific values and are understood by the command shell, such as bash. Some of these are pre-set (built-in) by the system, and others are set by the user either at the command line or within startup and other scripts.</p><p>環境變數可以幫我們達到很多功能～包括家目錄的變換啊、提示字元的顯示啊、執行檔搜尋的路徑啊等等的， 還有很多很多啦！那麼，既然環境變數有那麼多的功能，問一下，目前我的 shell 環境中， 有多少預設的環境變數啊？我們可以利用兩個指令來查閱，分別是 env 與 export 呢！</p><p>###env和export<br>env是environment的簡寫，可以列出來所有的環境變數。</p><pre><code>$ envSSH_AGENT_PID=1892GPG_AGENT_INFO=/run/user/me/keyring-Ilf3vt/gpg:0:1TERM=xtermSHELL=/bin/bash...</code></pre><p>如果使用 export 也會是一樣的內容～ 只不過， export 還有其他額外的功能就是了。（下面會講到）</p><pre><code>$ exportdeclare -x COLORTERM=gnome-terminaldeclare -x COMPIZ_BIN_PATH=/usr/bin /declare -x COMPIZ_CONFIG_PROFILE=ubuntu...</code></pre><p>###set<br>用 set 觀察所有變數 (含環境變數與自訂變數)</p><pre><code>$ setBASH=/bin/bashBASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignoreBASH_ALIASES=()...</code></pre><p>###環境變數與自定變數<br>By default, variables created within a script are only available to the current shell; child processes (sub-shells) will not have access to values that have been set or modified. Allowing child processes to see the values, requires use of the export command.</p><p>環境變數與自訂變數這兩者之間有啥差異呢？其實這兩者的差異在於<strong>『 該變數是否會被子程序所繼續引用』</strong><br>子程序僅會繼承父程序的環境變數， 子程序不會繼承父程序的自訂變數啦！所以你在原本 bash 的自訂變數在進入了子程序後就會消失不見， 一直到你離開子程序並回到原本的父程序後，這個變數才會又出現！</p><p>##Setting Environment Variables</p><p>###Show the value of a specific variable</p><pre><code>echo $SHELL</code></pre><p>###Export a new variable value<br>export除了可以查看以外還可以用來設定環境變數</p><pre><code>export VARIABLE=value (or VARIABLE=value; export VARIABLE)</code></pre><p>###Add a variable permanently</p><pre><code>Edit ~/.bashrc and add the line export VARIABLE=value</code></pre><p>Type source <code>~/.bashrc</code> or just <code>. ~/.bashrc</code> (dot ~/.bashrc); or just start a new shell by typing  <code>bash</code></p><p>##The HOME Variable<br>HOME is an environment variable that represents the home (or login) directory of the user.<br>輸入<code>echo $HOME</code>會顯示家目錄的路徑<br>輸入<code>cd</code>後面不加目錄名稱會切換到家目錄</p><p>##The PATH Variable<br>PATH is an ordered list of directories (the path) which is scanned when a command is given to find the appropriate program or script to run. Each directory in the path is separated by colons (:). A null (empty) directory name (or ./) indicates the current directory at any given time.</p><p>###show $Path<br>echo $PATH</p><p>###To prefix a private bin directory to your path:</p><pre><code>$ export PATH=$HOME/bin:$PATH$ echo $PATH/home/me/bin:/usr/local/bin:/usr/bin:/bin/usr</code></pre><p>延伸閱讀：<a href="http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path">鳥哥：$Path</a></p><p>##The PS1 Variable<br>Prompt Statement (PS) is used to customize your prompt string in your terminal windows to display the information you want.<br>用來改變終端機外觀的變數。</p><p>##The SHELL Variable<br>The environment variable SHELL points to the user’s default command shell and contains the full pathname to the shell:</p><pre><code>$ echo $SHELL/bin/bash</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch 9：User Environment Section 1 Account</title>
      <link href="/2014/09/13/old%20posts/2014-09-13-edx-linux-foundation-ch-9/"/>
      <url>/2014/09/13/old%20posts/2014-09-13-edx-linux-foundation-ch-9/</url>
      
        <content type="html"><![CDATA[<h1 id="Section-1-Account"><a href="#Section-1-Account" class="headerlink" title="Section 1 Account"></a>Section 1 Account</h1><h2 id="1-Identifying-the-Current-User"><a href="#1-Identifying-the-Current-User" class="headerlink" title="1. Identifying the Current User"></a>1. Identifying the Current User</h2><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><p>To list the currently logged-on users, type <code>who</code></p><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><p>To identify the current user, type <code>whoami</code></p><h3 id="who-a"><a href="#who-a" class="headerlink" title="who -a"></a>who -a</h3><p>Giving <code>who</code> the <code>-a</code> option will give more detailed information.</p><h1 id="2-Basics-of-Users-and-Groups"><a href="#2-Basics-of-Users-and-Groups" class="headerlink" title="2. Basics of Users and Groups"></a>2. Basics of Users and Groups</h1><p>Linux uses groups for organizing users. Groups are collections of accounts with certain shared permissions.</p><h3 id="UID-and-GID"><a href="#UID-and-GID" class="headerlink" title="UID and GID"></a>UID and GID</h3><p>All Linux users are assigned a unique user ID (<code>uid</code>), which is just an integer, as well as one or more group ID’s (gid), including a default one which is the same as the user ID.</p><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a><code>/etc/passwd</code></h3><p>這個檔案的構造是這樣的：每一行都代表一個帳號，有幾行就代表有幾個帳號在你的系統中！ 不過需要特別留意的是，裡頭很多帳號本來就是系統正常運作所必須要的，我們可以簡稱他為系統帳號， 例如 bin, daemon, adm, nobody 等等，這些帳號請不要隨意的殺掉他</p><pre><code>ubuntu@ip-172-31-27-94:~$ head -n 4 /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologin</code></pre><ol><li><p>帳號名稱：<br>就是帳號啦！用來對應 UID 的。例如 root 的 UID 對應就是 0 (第三欄位)；</p></li><li><p>密碼：<br>早期 Unix 系統的密碼就是放在這欄位上！但是因為這個檔案的特性是所有的程序都能夠讀取，這樣一來很容易造成密碼資料被竊取， 因此後來就將這個欄位的密碼資料給他改放到 /etc/shadow 中了。所以這裡你會看到一個『 x 』！</p></li><li><p>UID：<br><img src="https://lh5.googleusercontent.com/kZDKBDkeEs8mmyEsJNC78JD5tTmtdtmU72h3ZnjMt1c=w1743-h1090-no" alt="資料來源：鳥哥"></p></li><li><p>GID<br>這個與 /etc/group 有關！其實 /etc/group 的觀念與 /etc/passwd 差不多，只是他是用來規範群組名稱與 GID 的對應而已！</p></li><li><p>使用者資訊說明欄<br>這個欄位基本上並沒有什麼重要用途，只是用來解釋這個帳號的意義而已</p></li><li><p>家目錄<br>root 的家目錄在 /root<br>預設的使用者家目錄在 /home/yourIDname</p></li><li><p>Shell<br>當使用者登入系統後就會取得一個 Shell 來與系統的核心溝通以進行使用者的操作任務。那為何預設 shell 會使用 bash 呢？就是在這個欄位指定的囉！ 這裡比較需要注意的是，有一個 shell 可以用來替代成讓帳號無法取得 shell 環境的登入動作！那就是 /sbin/nologin 這個東西！這也可以用來製作純 pop 郵件帳號者的資料呢！</p></li></ol><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a><code>/etc/shadow</code></h3><p>早期的密碼也有加密過，但卻放置到 /etc/passwd 的第二個欄位上！這樣一來很容易被有心人士所竊取的， 加密過的密碼也能夠透過暴力破解法去 try and error (試誤) 找出來！因為這樣的關係，所以後來發展出將密碼移動到 /etc/shadow 這個檔案分隔開來的技術， 而且還加入很多的密碼限制參數在 /etc/shadow 裡頭呢</p><p>詳細內容請看：<br><a href="http://linux.vbird.org/linux_basic/0410accountmanager.php#shadow_file">鳥哥：/etc/shadow 檔案結構</a></p><h3 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a><code>/etc/group</code></h3><p>Control of group membership is administered through the <code>/etc/group</code> file, which shows a list of groups and their members.</p><pre><code>ubuntu@ip-172-31-27-94:~$ head -n 4 /etc/grouproot:x:0:daemon:x:1:bin:x:2:sys:x:3:</code></pre><p>這個檔案每一行代表一個群組，也是以冒號『:』作為欄位的分隔符號，共分為四欄，每一欄位的意義是：</p><ol><li><p>群組名稱：<br>就是群組名稱啦！</p></li><li><p>群組密碼：<br>通常不需要設定，這個設定通常是給『群組管理員』使用的，目前很少有這個機會設定群組管理員啦！ 同樣的，密碼已經移動到 /etc/gshadow 去，因此這個欄位只會存在一個『x』而已；</p></li><li><p>GID：<br>就是群組的 ID 啊。我們 /etc/passwd 第四個欄位使用的 GID 對應的群組名，就是由這裡對應出來的！</p></li><li><p>此群組支援的帳號名稱：<br>我們知道一個帳號可以加入多個群組，那某個帳號想要加入此群組時，將該帳號填入這個欄位即可。 舉例來說，如果我想要讓 dmtsai 也加入 root 這個群組，那麼在第一行的最後面加上『,dmtsai』，注意不要有空格， 使成為『 root:x:0:root,dmtsai 』就可以囉～</p></li></ol><h1 id="3-Adding-and-Removing-Users"><a href="#3-Adding-and-Removing-Users" class="headerlink" title="3. Adding and Removing Users"></a>3. Adding and Removing Users</h1><p>Only the <em>root user</em> can add and remove users and groups.</p><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>In the simplest form an account for the new user turkey would be done with:</p><pre><code>$ sudo useradd turkey</code></pre><p>which by default sets the home directory to <code>/home/turkey</code>, populates it with some basic files (copied from /etc/skel) and adds a line to /etc/passwd such as:</p><pre><code>turkey:x:502:502::/home/turkey:/bin/bash</code></pre><p>and sets the default shell to <code>/bin/bash</code></p><h3 id="userdel-and-userdel-r"><a href="#userdel-and-userdel-r" class="headerlink" title="userdel and userdel -r"></a>userdel and userdel -r</h3><p>Removing a user account is as easy as typing userdel turkey However, this will leave the /home/turkey directory intact. This might be useful if it is a temporary inactivation. To remove the home directory while removing the account one needs to use the <code>-r</code> option to userdel.</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>Typing id with no argument gives information about the current user, as in:</p><pre><code>$ iduid=500(george) gid=500(george) groups=106(fuse),500(george)</code></pre><p>If given the name of another user as an argument, id will report information about that other user.</p><p><img src="https://lh5.googleusercontent.com/-DlvXntyuZuo/VB5Yp-Bv8eI/AAAAAAAAC_M/na_IAEG8CLg/w1755-h153-no/Screen%2BShot%2B2014-09-21%2Bat%2B12.46.47.png"></p><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>所謂這『人有失手，馬有亂蹄』，您說是吧？所以囉，當然有的時候會『不小心』在 useradd 的時候加入了錯誤的設定資料。或者是，在使用 useradd 後，發現某些地方還可以進行細部修改。 此時，當然我們可以直接到 /etc/passwd 或 /etc/shadow 去修改相對應欄位的資料， 不過，Linux 也有提供相關的指令讓大家來進行帳號相關資料的微調呢～那就是 usermod 囉～</p><p><a href="http://linux.vbird.org/linux_basic/0410accountmanager.php#usermod">鳥哥：usermod</a></p><h1 id="4-Adding-and-Removing-Groups"><a href="#4-Adding-and-Removing-Groups" class="headerlink" title="4. Adding and Removing Groups"></a>4. Adding and Removing Groups</h1><h3 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h3><p>Adding a new group is done with groupadd:</p><pre><code>$ sudo /usr/sbin/groupadd anewgroup</code></pre><h3 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h3><p>The group can be removed with</p><pre><code>$ sudo /usr/sbin/groupdel anewgroup</code></pre><h3 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h3><p>輸入<code>groups turkey</code>查看turkey的group</p><pre><code>$groups turkeyturkey : turkey</code></pre><p>得到turkey : turkey，代表預設的群組是自己。</p><h3 id="使用usermod修改群組"><a href="#使用usermod修改群組" class="headerlink" title="使用usermod修改群組"></a>使用usermod修改群組</h3><p>Adding a user to an already existing group is done with usermod.</p><pre><code>$ sudo /usr/sbin/usermod -G anewgroup turkey$ groups turkeyturkey: turkey anewgroup</code></pre><p>-g  ：後面接初始群組，修改 /etc/passwd 的第四個欄位，亦即是 GID 的欄位！<br>-G  ：後面接次要群組，修改這個使用者能夠支援的群組，修改的是 /etc/group 囉～</p><h1 id="5-The-root-Account"><a href="#5-The-root-Account" class="headerlink" title="5. The root Account"></a>5. The root Account</h1><p>The root account is very powerful and has full access to the system. Other operating systems often call this the administrator account; in Linux it is often called the superuser account.</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>switch or substitute user</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>sudo 可以讓你以其他用戶的身份執行指令 (通常是使用 root 的身份來執行指令)</p><h3 id="etc-sudoers"><a href="#etc-sudoers" class="headerlink" title="/etc/sudoers"></a>/etc/sudoers</h3><p>sudo configuration files are stored in the <code>/etc/sudoers</code> file and in the <code>/etc/sudoers.d/</code> directory. By default, the sudoers.d directory is empty.</p><h1 id="6-Startup-Files"><a href="#6-Startup-Files" class="headerlink" title="6.Startup Files"></a>6.Startup Files</h1><h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h3><p>In Linux, the command shell program (generally bash)  uses one or more startup files to configure the environment. Files in the <code>/etc</code> directory <strong>define global settings for all users</strong> while Initialization files in the user’s home directory can include and/or override the global settings.</p><h3 id="etc-profile-login-shell-reading-it"><a href="#etc-profile-login-shell-reading-it" class="headerlink" title="/etc/profile(login shell reading it)"></a><code>/etc/profile</code>(login shell reading it)</h3><p>When you first login to Linux, /etc/profile is read and evaluated, after which the following files are searched (if they exist) in the listed order:</p><ol><li>~/.bash_profile</li><li>~/.bash_login</li><li>~/.profile</li></ol><p>The Linux login shell evaluates whatever startup file that it comes across first and ignores the rest. This means that if it finds ~/.bash_profile, it ignores ~/.bash_login and ~/.profile. Different distributions may use different startup files.</p><h3 id="bashrc-non-login-shell-reading-it"><a href="#bashrc-non-login-shell-reading-it" class="headerlink" title="~/.bashrc (non-login shell reading it)"></a><code>~/.bashrc</code> (non-login shell reading it)</h3><p>However, every time you create a new shell, or terminal window, etc., you do not perform a full system login; only the ~/.bashrc file is read and evaluated.</p><h3 id="bash-history"><a href="#bash-history" class="headerlink" title="~/.bash_history"></a><code>~/.bash_history</code></h3><p>還記得我們在歷史命令提到過這個檔案吧？預設的情況下， 我們的歷史命令就記錄在這裡啊！而這個檔案能夠記錄幾筆資料，則與 HISTFILESIZE 這個變數有關啊。每次登入 bash 後，bash 會先讀取這個檔案，將所有的歷史指令讀入記憶體， 因此，當我們登入 bash 後就可以查知上次使用過哪些指令囉。至於更多的歷史指令， 請自行回去參考喔！</p><h2 id="login-shell-和-no-login-shell"><a href="#login-shell-和-no-login-shell" class="headerlink" title="login shell 和 no-login shell"></a>login shell 和 no-login shell</h2><p>“login shell” 代表用戶登入, 比如使用“su -“ 命令, 或者用ssh 連接到某一個服務器上, 都會使用該用戶默認shell 啟動login shell 模式.該模式下的shell會去自動執行/etc/profile和<del>/.profile文件,但不會執行任何的bashrc文件,所以一般再/etc/profile或者</del>/.profile裡我們會手動去source bashrc文件.而no-login shell 的情況是我們在終端下直接輸入bash 或者bash -c “CMD” 來啟動的shell.該模式下是不會自動去運行任何的profile 文件.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDX Linux Foundation Ch 8：Filesystem</title>
      <link href="/2014/09/08/old%20posts/2014-09-08-edx-linux-foundation-ch-8-filesystem/"/>
      <url>/2014/09/08/old%20posts/2014-09-08-edx-linux-foundation-ch-8-filesystem/</url>
      
        <content type="html"><![CDATA[<h2 id="File-system"><a href="#File-system" class="headerlink" title="File system"></a>File system</h2><h2 id="Mount"><a href="#Mount" class="headerlink" title="Mount"></a>Mount</h2><h3 id="File-system-table"><a href="#File-system-table" class="headerlink" title="File system table"></a>File system table</h3><p> If you want it to be automatically available every time the system starts up, you need to edit the file /etc/fstab accordingly (the name is short for Filesystem Table)</p><p> man fstab可以查詢文件</p><h2 id="NFC-The-Network-Filesystem"><a href="#NFC-The-Network-Filesystem" class="headerlink" title="NFC(The Network Filesystem)"></a>NFC(The Network Filesystem)</h2><h2 id="file-system-arctecture"><a href="#file-system-arctecture" class="headerlink" title="file system arctecture"></a>file system arctecture</h2><p>The <code>/bin</code> directory contains executable binaries, essential commands used in single-user mode, and essential commands required by all system users, such as:</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EDX Linux Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits 2 ( 1 )：BLOCKS, PROCS &amp; LAMBDAS</title>
      <link href="/2014/09/06/old%20posts/2014-09-06-ruby-bits_2-1-blocks-procs/"/>
      <url>/2014/09/06/old%20posts/2014-09-06-ruby-bits_2-1-blocks-procs/</url>
      
        <content type="html"><![CDATA[<p>雖然跟Ruby bit名字很像，但是內容的確比較進階點。</p><h1 id="two-ways-for-storing-blocks"><a href="#two-ways-for-storing-blocks" class="headerlink" title="two ways for storing blocks"></a>two ways for storing blocks</h1><h2 id="1-Proc"><a href="#1-Proc" class="headerlink" title="1.Proc"></a>1.Proc</h2><pre><code class="rb">my_proc = Proc.new do  puts &quot;tweet&quot;endmy_proc.call # =&gt; tweet</code></pre><p>等同於</p><pre><code class="rb">my_proc = Proc.new &#123; puts &quot;tweet&quot; &#125;my_proc.call # =&gt; tweet</code></pre><h2 id="2-lambda"><a href="#2-lambda" class="headerlink" title="2.lambda"></a>2.lambda</h2><p>使用lambda來儲存又稱為static lambda。</p><pre><code class="rb">my_proc = lambda &#123; puts &quot;tweet&quot; &#125;my_proc.call  # =&gt; tweet</code></pre><p>Ruby1.9以前的版本是這樣寫</p><pre><code class="rb">my_proc = -&gt; &#123; puts &quot;tweet&quot; &#125;my_proc.call  # =&gt; tweet</code></pre><h1 id="block-to-lambda"><a href="#block-to-lambda" class="headerlink" title="block to lambda"></a>block to lambda</h1><pre><code class="rb">class Tweet  def post    if authenticate?(@user, @password)      # submit the tweet      yield    else      raise &#39;Auth Error&#39;    end  endend</code></pre><pre><code class="rb">tweet = Tweet.new(&#39;Ruby Bits!&#39;)tweet.post &#123; puts &quot;Sent!&quot; &#125;</code></pre><p>等同於</p><pre><code class="rb">class Tweet  def post(success)    if authenticate?(@user, @password)      # submit the tweet      success.call    else      raise &#39;Auth Error&#39;    end  endend</code></pre><pre><code class="rb">tweet = Tweet.new(&#39;Ruby Bits!&#39;)success = -&gt; &#123; puts &quot;Sent!&quot; &#125;tweet.post(success)</code></pre><h1 id="multiple-lambdas"><a href="#multiple-lambdas" class="headerlink" title="multiple lambdas"></a>multiple lambdas</h1><pre><code class="rb">class Tweet  def post(success, error)    if authenticate?(@uerser, @password)      # submit the tweet      success.call    else      error.call    end  endend</code></pre><pre><code class="rb">tweet = Tweet.new(&#39;Ruby Bits!&#39;)success = -&gt; &#123; puts &quot;Sent!&quot; &#125;error = -&gt; &#123; raise &#39;Auth Error&#39; &#125;tweet.post(success, error)</code></pre><h1 id="Using-the-ampersand"><a href="#Using-the-ampersand" class="headerlink" title="Using the ampersand"></a>Using the ampersand</h1><p>有兩種情況會用到ampersand也就是<code>＆</code>符號</p><h2 id="1-Calling-a-method-with-amp-in-front-of-a-parameter"><a href="#1-Calling-a-method-with-amp-in-front-of-a-parameter" class="headerlink" title="1.Calling a method with &amp; in front of a parameter"></a>1.Calling a method with &amp; in front of a parameter</h2><pre><code class="rb">tweets.each(&amp;printer)</code></pre><p>turn a proc into block</p><h2 id="2-Defining-a-method-with-amp-in-front-of-a-parameter"><a href="#2-Defining-a-method-with-amp-in-front-of-a-parameter" class="headerlink" title="2.Defining a method with &amp; in front of a parameter"></a>2.Defining a method with &amp; in front of a parameter</h2><pre><code class="rb">def each(&amp;block)</code></pre><p>turns a block into a proc so it can be assigned to parameter</p><p>這兩種用法很常同時使用</p><h2 id="example-1"><a href="#example-1" class="headerlink" title="example 1:"></a>example 1:</h2><pre><code class="rb">printer = lambda &#123; |tweet| puts tweet &#125;tweets.each (printer) (</code></pre><p>這樣會出現錯誤，因為each expects a block, not a proc.<br>改成這樣就沒問題了。</p><pre><code class="rb">printer = lambda &#123; |tweet| puts tweet &#125;tweets.each(&amp;printer)</code></pre><p><code>&amp;</code>turns proc into block</p><h2 id="example-2"><a href="#example-2" class="headerlink" title="example 2:"></a>example 2:</h2><pre><code class="rb">class Timeline  attr_accessor :tweets  def each(&amp;block)       #block into proc    tweets.each(&amp;block)  #proc back into a block  endend</code></pre><pre><code class="rb">timeline = Timeline.new(tweets)timeline.each do |tweet|  puts tweetend</code></pre><h1 id="symbol-to-Proc"><a href="#symbol-to-Proc" class="headerlink" title="symbol to Proc"></a>symbol to Proc</h1><p>未完待續…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 6 )：Blocks 學習筆記</title>
      <link href="/2014/09/06/old%20posts/2014-09-06-ruby-bits-6-blocks/"/>
      <url>/2014/09/06/old%20posts/2014-09-06-ruby-bits-6-blocks/</url>
      
        <content type="html"><![CDATA[<p>不得不再說一次，這些主題都超級重要，不先學Ruby直接學Rails感覺很卡。果然要從基礎開始打才是王道。在看這篇之前請先看完<a href="http://bombersnote.logdown.com/posts/2014/09/06/231080">method / block / yield / Proc / lambda</a>，很多觀念都是從這邊的延伸。</p><h2 id="conventions"><a href="#conventions" class="headerlink" title="conventions"></a>conventions</h2><p>block有兩種表達方式</p><h3 id="single-block"><a href="#single-block" class="headerlink" title="single block"></a>single block</h3><p>braces if the block is a single line</p><pre><code class="rb">words.each &#123; |word| puts word &#125;</code></pre><h3 id="multiblock"><a href="#multiblock" class="headerlink" title="multiblock"></a>multiblock</h3><p>do/end if it’s multiple lines</p><pre><code class="rb">words.each do |word|  backward_word = word.reverse  puts backward_wordend</code></pre><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>這邊有一個yield的範例</p><pre><code class="rb">def call_this_block_twice    yield    yieldend</code></pre><pre><code class="rb">call_this_block_twice&#123; puts &quot;twitter&quot;&#125;  #=&gt;twitter twitter</code></pre><p>一開始看一定看不懂他是怎麼做的，因為他省略了很多東西，其實call block可以拆解成三個部分，第一個部分是定義呼叫block的function，在這個例子中就是</p><pre><code class="rb">def call_this_block_twice    yield    yieldend</code></pre><p>使用yield的時候可以省略傳入的&amp;block與呼叫的.call方法，上面這段程式碼等同於</p><pre><code class="rb">def call_this_block_twice(&amp;block)    block.call    block.callend</code></pre><p>第二個部分是宣告block<br>在這個例子中省略了這一部分，其實”twitter”就是一個傳入的block。</p><p>第三部分是傳入block到function之中輸出結果<br>把”twitter”這個block傳進能夠處理block的function之中。</p><pre><code class="rb">call_this_block_twice&#123; puts &quot;twitter&quot;&#125;  #=&gt;twitter twitter</code></pre><h3 id="yield-arguments"><a href="#yield-arguments" class="headerlink" title="yield - arguments"></a>yield - arguments</h3><p>再來看另一個範例</p><pre><code class="rb">def call_this_block  yield &quot;tweet&quot;end</code></pre><p>yield中傳入了參數”tweet”，也就等於block.call(“tweet”)</p><pre><code class="rb">call_this_block &#123; |myarg| puts myarg &#125;  #=&gt;tweet</code></pre><pre><code class="rb">call_this_block &#123; |myarg| puts myarg.upcase &#125;  #=&gt;TWEET</code></pre><p>這時候如果要在call block的時候呼叫參數，要用<code>|</code>和<code>|</code>把輸入的參數包起來。接著後面的陳述式就可以對輸入的進行一些處理。</p><h2 id="Your-own-“each”"><a href="#Your-own-“each”" class="headerlink" title="Your own “each”"></a>Your own “each”</h2><p>現在我的class中有兩個method，一個要列出朋友的tweet，一個要儲存朋友的tweet。可以發現<code>@user.friends.each do |friend| </code>這段iteration重複了。</p><pre><code class="rb">class Timeline  def list_tweets    @user.friends.each do |friend|      friend.tweets.each &#123; |tweet| puts tweet &#125;    end  end  def store_tweets    @user.friends.each do |friend|      friend.tweets.each &#123; |tweet| tweet.cache &#125;    end  endend</code></pre><p>於是我們來著撰寫自己的each</p><pre><code class="rb">class Timeline  def each    @user.friends.each do |friend|      friend.tweets.each &#123; |tweet| yield tweet &#125;    end  endendtimeline = Timeline.new(user)timeline.each &#123; |tweet| puts tweet &#125;timeline.each &#123; |tweet| tweet.cache &#125;</code></pre><p>加入Enumerable擴充更多的method</p><pre><code class="rb">class Timeline  def each...end  include Enumerableend</code></pre><p>在include Enumerable這個module之後，瞬間多了很多method（如下），要解了更多就去看看<a href="http://ruby-doc.org/core-2.1.2/Enumerable.html">ruby-doc Enumerable</a>吧。</p><pre><code class="rb">timeline.sort_by  &#123; |tweet| tweet.created_at &#125;timeline.map      &#123; |tweet| tweet.status &#125;timeline.find_all &#123; |tweet| tweet.status =~ /\@codeschool/ &#125;</code></pre><h2 id="重構練習"><a href="#重構練習" class="headerlink" title="重構練習"></a>重構練習</h2><pre><code class="rb">def update_status(user, tweet)  begin    sign_in(user)    post(tweet)  rescue ConnectionError =&gt; e    logger.error(e)ensure    sign_out(user)    endend</code></pre><pre><code class="rb">def get_list(user, list_name)  begin    sign_in(user)    retrieve_list(list_name)  rescue ConnectionError =&gt; e    logger.error(e)ensure    sign_out(user)    endend</code></pre><p>有裡個method裡面除了核心邏輯以外全部都一樣。這樣的話我們需要進行重構來實現DRY原則。因為Proc本身就是匿名函數也就是一段未執行程式碼，所以特別適用這個情況。</p><p>把重複的地方獨立出來，核心邏輯用yield代替。</p><pre><code class="rb">def while_signed_in_as(user) begin    sign_in(user)    yield  rescue ConnectionError =&gt; e    logger.error(e)  ensure    sign_out(user)  endend</code></pre><p>使用do的時候會省略傳入的&amp;block，所以這段程式碼其實是對block做些處理，並顯示在block.call也就是yield的部份。</p><pre><code class="rb">while_signed_in_as(user) do  post(tweet)end</code></pre><pre><code class="rb">tweets = while_signed_in_as(user) do  retrieve_list(list_name)end</code></pre><p>最後可以改寫的精簡一點<br>去掉不必要的begin和end</p><pre><code class="rb">def while_signed_in_as(user)  sign_in(user)  yield  rescue ConnectionError =&gt; e    logger.error(e)  ensure    sign_out(user)end</code></pre><h2 id="作業實作"><a href="#作業實作" class="headerlink" title="作業實作"></a>作業實作</h2><h3 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h3><p>使用each代替for迴圈。原來使用for迴圈的程式：</p><pre><code class="rb">def list  for i in 0...(games.length)    game = games[i]    puts game.name  endend</code></pre><p>改寫成each</p><pre><code class="rb">def list  games.each do|game|    puts game.name  endend</code></pre><h3 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h3><p>現在我們有一個class叫做Game裡面裝著每場比賽的資訊。<br>有一個陣列叫做Games，裡面蒐集了很多場的比賽。<br>現在我們要在Library中寫一個方法叫做each_on_system(system)，讓他可以讀出Games陣列裡面符合輸入的system的比賽。</p><pre><code class="rb">class Library  attr_accessor :games  def initialize(games = [])    self.games = games  end  def each_on_system(system)  endend</code></pre><p>使用範例example.rb</p><pre><code class="rb">library = Library.new(GAMES)library.each_on_system(&quot;SNES&quot;) &#123; puts &quot;Found a Super Nintendo game&quot; &#125;</code></pre><p>將library修正後，即為所得。</p><pre><code class="rb">class Library  attr_accessor :games  def initialize(games = [])    self.games = games  end  def each_on_system(system)    games.each do|game|      yield if game.system == system    end  endend</code></pre><h3 id="6-3-Passing-Argument-to-Blocks"><a href="#6-3-Passing-Argument-to-Blocks" class="headerlink" title="6.3 Passing Argument to Blocks"></a>6.3 Passing Argument to Blocks</h3><p>讓產生的block能夠使用iterator的參數。如下圖可以使用|game|。</p><pre><code class="rb">library = Library.new(GAMES)library.each_on_system(&quot;SNES&quot;) &#123; |game| puts game.name &#125;</code></pre><h3 id="6-4-Return-Value-From-block"><a href="#6-4-Return-Value-From-block" class="headerlink" title="6.4 Return Value From block"></a>6.4 Return Value From block</h3><p>Modify the list method to yield to a block and print whatever the block returns.<br>除了能夠在block中使用以外還要可以直接印出來。</p><pre><code class="rb">library = Library.new(GAMES)library.list &#123; |game| &quot;#&#123;game.name&#125; (#&#123;game.system&#125;) - #&#123;game.year&#125;&quot; &#125;</code></pre><pre><code class="rb">class Library  attr_accessor :games  def initialize(games = [])    self.games = games  end  def list    games.each do |game|      puts yield game    end  endend</code></pre><h3 id="6-5include-Enumerable-module"><a href="#6-5include-Enumerable-module" class="headerlink" title="6.5include Enumerable module"></a>6.5include Enumerable module</h3><h3 id="6-6重構以避免重複"><a href="#6-6重構以避免重複" class="headerlink" title="6.6重構以避免重複"></a>6.6重構以避免重複</h3><pre><code class="rb">class Game  attr_accessor :name, :year, :system  attr_reader :created_at  def initialize(name, options=&#123;&#125;)    self.name = name    self.year = options[:year]    self.system = options[:system]    @created_at = Time.now  end  def play    begin      emulator = Emulator.new(system)      emulator.play(self)    rescue Exception =&gt; e      puts &quot;Emulator failed: #&#123;e&#125;&quot;    end  end  def screenshot    begin      emulator = Emulator.new(system)      emulator.start(self)      emulator.screenshot    rescue Exception =&gt; e      puts &quot;Emulator failed: #&#123;e&#125;&quot;    end  endend</code></pre><pre><code class="rb">class Game  attr_accessor :name, :year, :system  attr_reader :created_at  def initialize(name, options=&#123;&#125;)    self.name = name    self.year = options[:year]    self.system = options[:system]    @created_at = Time.now  end  def play    emulate do |emulator|      emulator.play(self)    end  end  def screenshot    emulate do |emulator|      emulator.start(self)      emulator.screenshot    end  end  private  def emulate    begin      emulator = Emulator.new(system)      yield emulator    rescue Exception =&gt; e      puts &quot;Emulator failed: #&#123;e&#125;&quot;    end  endend</code></pre><pre><code class="rb">class Emulator  def initialize(system)    # Creates an emulator for the given system  end  def play(game)    # Runs the given game in the emulator  end  def start(game)    # Loads the given game but doesn&#39;t run it  end  def screenshot    # Returns a screenshot of the currently loaded game  endend</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 5 )：Modules</title>
      <link href="/2014/09/05/old%20posts/2014-09-05-ruby-bits-5-modules/"/>
      <url>/2014/09/05/old%20posts/2014-09-05-ruby-bits-5-modules/</url>
      
        <content type="html"><![CDATA[<p>Ruby bits的課程真的很不錯，講到的主題都是很重要的東西。有點相見恨晚的感覺，趕快把它做完吧!</p><h2 id="本節學習目標"><a href="#本節學習目標" class="headerlink" title="本節學習目標"></a>本節學習目標</h2><ol><li>module</li><li>activesupport ::Concern</li><li>了解self的意義</li></ol><h1 id="part1-module"><a href="#part1-module" class="headerlink" title="part1: module"></a>part1: module</h1><h2 id="class-method與instance-method"><a href="#class-method與instance-method" class="headerlink" title="class method與instance method"></a>class method與instance method</h2><h3 id="use-extend-to-expose-methods-as-class-method"><a href="#use-extend-to-expose-methods-as-class-method" class="headerlink" title="use extend to expose methods as class method"></a>use extend to expose methods as class method</h3><pre><code class="rb">class Tweet  extend Searchableend</code></pre><p>使用的時候，直接呼叫class（開頭大寫）。</p><pre><code class="rb">Tweet.find_all_from(&#39;@GreggPollack&#39;)</code></pre><h3 id="use-include-to-expose-methods-as-instance-methods"><a href="#use-include-to-expose-methods-as-instance-methods" class="headerlink" title="use include to expose methods as instance methods"></a>use include to expose methods as instance methods</h3><p>instance method用include引進module</p><pre><code class="rb">class Image  include ImageUtilsend</code></pre><pre><code class="rb">image = user.imageimage.preview</code></pre><h1 id="part2-how-to-include-class-method-and-instance-method-in-the-same-time"><a href="#part2-how-to-include-class-method-and-instance-method-in-the-same-time" class="headerlink" title="part2 :how to include class method and instance method in the same time"></a>part2 :how to include class method and instance method in the same time</h1><h2 id="第一種方法：依照直覺該怎麼寫"><a href="#第一種方法：依照直覺該怎麼寫" class="headerlink" title="第一種方法：依照直覺該怎麼寫"></a>第一種方法：依照直覺該怎麼寫</h2><p>第一種方法是在class中includ module並且extend classmothods。<br>下例中Image想要使用ImageUtils這個module的class method與instance method，所以用兩種方式各自引用。</p><pre><code class="rb">class Image  include ImageUtils  extend ImageUtils::ClassMethodsend</code></pre><pre><code class="rb">module ImageUtils  def preview  end  def transfer(destination)  end  module ClassMethods    def fetch_from_twitter(user)    end  endend</code></pre><p>使用上可以按照之前所學的來呼叫class method與instance method</p><pre><code class="rb">image = user.imageimage.previewImage.fetch_from_twitter(&#39;gregg&#39;)</code></pre><h2 id="第二種方法-method-hooks"><a href="#第二種方法-method-hooks" class="headerlink" title="第二種方法:method hooks"></a>第二種方法:method hooks</h2><p>這樣每次使用module的時候都需要explore兩種module實在太麻煩了，引入class module這個動作在module完成，這樣我們就不需要每次都引入兩種method，只要引入module就可以了。於是第二種方法method hook產生了：</p><pre><code class="rb">class Image  include ImageUtils  #extend ImageUtils::ClassMethods       刪除掉引入class method的這一行end</code></pre><pre><code class="rb">module ImageUtils  def self.included(base)  #加入self.include （self就是ImageUtils這個module）    base.extend(ClassMethods)  end  def preview  end  def transfer(destination)  end  module ClassMethods    def fetch_from_twitter(user)    end  endend</code></pre><h1 id="part3-使用Activesupport-Concern解決相依性問題"><a href="#part3-使用Activesupport-Concern解決相依性問題" class="headerlink" title="part3: 使用Activesupport :: Concern解決相依性問題"></a>part3: 使用Activesupport :: Concern解決相依性問題</h1><blockquote><p>Activesupport :: Concern代表什麼意思<br>:: is basically a namespace resolution operator. It allows you to access items in modules, or class-level items in classes. For example, say you had this setup:<br>關鍵字double colon ruby<br><a href="http://stackoverflow.com/questions/3009477/what-is-rubys-double-colon-all-about">What is Ruby’s double-colon (::) all about?</a></p></blockquote><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在terminal下<code>gem install activesupport</code>安裝activesupport<br>在module檔中(xxx.rb)中require ‘active_support/concern’</p><pre><code class="rb">require &#39;active_support/concern&#39; module ImageUtils  extend ActiveSupport::Concern  included do    clean_up    end  module ClassMethods    def fetch_from_twitter(user)    end    def clean_up    end  endend</code></pre><p>這樣就可以直接include ImageUtil的ClassMethods</p><pre><code class="rb">class Image    include ImageUtilsend</code></pre><p>這樣看起來沒什麼了不起的對吧？只是換個寫法。實際上cocern的出現是為了解決更重要的問題，讓我們看下去。</p><h2 id="Acitvesupport-concern要解決的問題"><a href="#Acitvesupport-concern要解決的問題" class="headerlink" title="Acitvesupport::concern要解決的問題"></a>Acitvesupport::concern要解決的問題</h2><pre><code class="rb">module ImageUtils  def self.included(base)      #base is ImageProcessing module    base.extend(ClassMethods)  end  module ClassMethods    def clean_up; end    endend</code></pre><pre><code class="rb">module ImageProcessing    include ImageUtils  def self.included(base)    base.clean_up                #undefined method error  endend</code></pre><pre><code class="rb">class Image   include ImageProcessingend</code></pre><p>這樣乍看之下好像沒問題，但是卻有個嚴重的問題導致無法執行，因為ImageUtils變成是由ImageProcessing所 include，所以對 ImageUtils 的 self.included 來說，他的參數 base 變成了 ImageProcessing 了，所以他就沒辦法存取到宿主 Host 的任何函式及變數，do_host_something 時就會失敗。</p><p>Okay，ActiveSupport::Concern 就是來幫助解決這個難題，我們希望宿主可以不需要知道 modules 之間的 dependencies 關係。dependencies 關係寫在 module 裡面就好了。</p><pre><code class="rb">module ImageUtils  extend ActiveSupport::Concern  module ClassMethods    def clean_up; end  endend</code></pre><pre><code class="rb">module ImageProcessing  extend ActiveSupport::Concern  include ImageUtils  included do    clean_up  endend</code></pre><pre><code class="rb">class Image  include ImageProcessingend</code></pre><p>Dependencies are properly resolved！！</p><h1 id="part4-作答中遇到的問題"><a href="#part4-作答中遇到的問題" class="headerlink" title="part4 作答中遇到的問題"></a>part4 作答中遇到的問題</h1><h2 id="5-1-宣告成class-method"><a href="#5-1-宣告成class-method" class="headerlink" title="5.1 宣告成class method"></a>5.1 宣告成class method</h2><p>原本的</p><pre><code class="rb">module GameUtils  def lend_to_friend(game, friend_email)  endend</code></pre><p>改成</p><pre><code class="rb">module GameUtils  def self.lend_to_friend(game, friend_email)  endend</code></pre><p>這樣呼叫時就會從原本的</p><pre><code class="rb">game = Game.new(&quot;Contra&quot;)game.lend_to_friend(game, &quot;gregg@codeschool.com&quot;)</code></pre><p>變成</p><pre><code class="rb">game = Game.new(&quot;Contra&quot;)GameUtils.lend_to_friend(game, &quot;gregg@codeschool.com&quot;)</code></pre><h2 id="5-2-reopen-game-and-include-the-gameutil-module"><a href="#5-2-reopen-game-and-include-the-gameutil-module" class="headerlink" title="5.2 reopen game and include the gameutil module"></a>5.2 reopen game and include the gameutil module</h2><h2 id="5-3-reopen-Game-and-expose-the-method-from-module-as-class-method-of-Game-class"><a href="#5-3-reopen-Game-and-expose-the-method-from-module-as-class-method-of-Game-class" class="headerlink" title="5.3 reopen Game and expose the method from module as class method of Game class"></a>5.3 reopen Game and expose the method from module as class method of Game class</h2><p>原本</p><pre><code class="rb">class Gameend</code></pre><p>加上GameUtils的class method</p><pre><code class="rb">class Game  extend GameUtilsend</code></pre><h2 id="5-4-extend-the-single-game-object-with-Playable-module"><a href="#5-4-extend-the-single-game-object-with-Playable-module" class="headerlink" title="5.4 extend the single game object with Playable module"></a>5.4 extend the single game object with Playable module</h2><p>原本</p><pre><code class="rb">game = Game.new(&quot;Contra&quot;)game.play</code></pre><p>加入module Playable的method到game這個instance中。</p><pre><code class="rb">game = Game.new(&quot;Contra&quot;)game.extend(Playable)game.play</code></pre><p>module長這樣</p><pre><code class="rb">module Playable  def play  endend</code></pre><p>這個用法讓我有點困惑，特地查了一下<a href="http://ruby-doc.org/core-2.1.2/Object.html#method-i-extend">ruby-doc</a><br>extend的解釋如下<br>Adds to obj the instance methods from each module given as a parameter.<br>雖然是用extend這個字，但並非是繼承的意思，而是加入instance method。</p><h2 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h2><p>使用self.include初始化class method</p><h2 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h2><p>使用ActiveSupport::Concern代替self.included</p><h2 id="5-7-AcitveSupport-Concern-part-II"><a href="#5-7-AcitveSupport-Concern-part-II" class="headerlink" title="5.7 AcitveSupport::Concern part II"></a>5.7 AcitveSupport::Concern part II</h2><p>使用included class method</p><h2 id="5-8-AcitveSupport-Concern-part-III"><a href="#5-8-AcitveSupport-Concern-part-III" class="headerlink" title="5.8 AcitveSupport::Concern part III"></a>5.8 AcitveSupport::Concern part III</h2><h2 id="延伸閱讀："><a href="#延伸閱讀：" class="headerlink" title="延伸閱讀："></a>延伸閱讀：</h2><p><a href="http://ihower.tw/blog/archives/3949">深入Rails3: ActiveSupport::Concern</a><br><a href="http://rubylearning.com/satishtalim/ruby_self.html">Self - The current/default object</a><br><a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 4 )：ActiveSupport</title>
      <link href="/2014/09/05/old%20posts/2014-09-05-ruby-bits-4-active-support/"/>
      <url>/2014/09/05/old%20posts/2014-09-05-ruby-bits-4-active-support/</url>
      
        <content type="html"><![CDATA[<h1 id="install-it-and-load-it"><a href="#install-it-and-load-it" class="headerlink" title="install it and load it"></a>install it and load it</h1><h2 id="install-it"><a href="#install-it" class="headerlink" title="install it"></a>install it</h2><p>gem install activesupport<br>gem install i18n</p><h2 id="load-it"><a href="#load-it" class="headerlink" title="load it"></a>load it</h2><p>require ‘active_support/all’</p><h2 id="core-extensions-array"><a href="#core-extensions-array" class="headerlink" title="core extensions: array"></a>core extensions: array</h2><p>array.form()<br>array.to()<br>array.in_group_of<br>array.splite</p><p><img src="https://lh5.googleusercontent.com/OB4R69JvbILh1yuu6vN19DE4F4N0D2x2ctwontchPpg=w1755-h930-no"></p><h2 id="core-extensions-Date"><a href="#core-extensions-Date" class="headerlink" title="core extensions: Date"></a>core extensions: Date</h2><p>.at_beginning_of_day<br>.at_end_of_monthr</p><p><img src="https://lh4.googleusercontent.com/-gTpPXf3apRg/VAl8eIYhssI/AAAAAAAAC6I/gCGNlSzXD8E/w1755-h930-no/Screen%2BShot%2B2014-09-05%2Bat%2B17.03.04.png"><br><img src="https://lh6.googleusercontent.com/-hrKJGiJ99Sk/VAl8eMcWUCI/AAAAAAAAC6E/cE1O4VGHvZ4/w1753-h913-no/Screen%2BShot%2B2014-09-05%2Bat%2B17.03.22.png"></p><h2 id="core-extensions-hash"><a href="#core-extensions-hash" class="headerlink" title="core extensions:hash"></a>core extensions:hash</h2><p>有兩個hash<br>options = {user: ‘codeschool’, lang: ‘fr’}<br>new_options = {user: ‘codeschool’, lang: ‘fr’, password: ‘dunno’}</p><h3 id="options-diff-new-options"><a href="#options-diff-new-options" class="headerlink" title="options.diff(new_options)"></a><strong>options.diff(new_options)</strong></h3><p>比較option與new_options的不同</p><h3 id="options-stringify-keys"><a href="#options-stringify-keys" class="headerlink" title="options.stringify_keys"></a><strong>options.stringify_keys</strong></h3><p>turn keys into strings<br><img src="https://lh6.googleusercontent.com/e2_pcizuLi1OlUovuZiSojCpYSu6RN7By3sOxdyXlP8=w1755-h925-no"></p><h3 id="Merge-hash"><a href="#Merge-hash" class="headerlink" title="Merge hash"></a>Merge hash</h3><p>會以前面的為主<br><img src="https://lh4.googleusercontent.com/bbHJCbvWR4bZkbWafn50FU-zEs_2mN961DVc7LCyRnE=w1518-h828-no"></p><h3 id="remove-keys"><a href="#remove-keys" class="headerlink" title="remove keys"></a>remove keys</h3><p>new_options.except(:password)</p><h3 id="檢查是否有額外的key"><a href="#檢查是否有額外的key" class="headerlink" title="檢查是否有額外的key"></a>檢查是否有額外的key</h3><p>new_options.assert_valid_keys(:user, :lang)，如果有額外的key的話就會出現警示訊息<br><img src="https://lh3.googleusercontent.com/-BuXD1yd6ELg/VAlzlXcFaOI/AAAAAAAAC4U/HwFcTSDaNLA/w1472-h424-no/Screen%2BShot%2B2014-09-05%2Bat%2B16.25.34.png"></p><h1 id="core-extensions-integer"><a href="#core-extensions-integer" class="headerlink" title="core extensions: integer"></a>core extensions: integer</h1><h2 id="odd-or-even"><a href="#odd-or-even" class="headerlink" title="odd or even"></a>odd or even</h2><p>index.odd?<br>index.even?<br><img src="https://lh3.googleusercontent.com/-wqEF5xlbw6I/VAl4Aad_csI/AAAAAAAAC5A/SIbmaS-L2Nw/w1753-h853-no/Screen%2BShot%2B2014-09-05%2Bat%2B16.44.04.png"></p><h2 id="ordinallize"><a href="#ordinallize" class="headerlink" title="ordinallize"></a>ordinallize</h2><p>“#{1.ordinalize} place!”<br>“#{2.ordinalize} place!”<br>“#{3.ordinalize} place!”<br><img src="https://lh6.googleusercontent.com/-UOYnfA1u4gs/VAl4AeYO7NI/AAAAAAAAC44/pLotT1TEP7A/w1755-h1050-no/Screen%2BShot%2B2014-09-05%2Bat%2B16.44.12.png"></p><h2 id="pluralize-and-singularize"><a href="#pluralize-and-singularize" class="headerlink" title="pluralize and singularize"></a>pluralize and singularize</h2><p>轉換單字的單數與複數<br><img src="https://lh5.googleusercontent.com/-eIRkulMno2c/VAl4AhVM0vI/AAAAAAAAC5E/xTXoDHRDGfk/w1755-h745-no/Screen%2BShot%2B2014-09-05%2Bat%2B16.44.24.png"></p><h2 id="titleize-and-humznize"><a href="#titleize-and-humznize" class="headerlink" title="titleize and humznize"></a>titleize and humznize</h2><p><img src="https://lh4.googleusercontent.com/-qlpsYKkMB4U/VAl4BvlyLRI/AAAAAAAAC5I/uMGS4bSgBrk/w1753-h658-no/Screen%2BShot%2B2014-09-05%2Bat%2B16.44.29.png"></p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p>看完還是有點霧煞煞，接著來看<a href="http://ihower.tw/rails3/activesupport.html">ihower實戰聖經:active support</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 3 )：Class</title>
      <link href="/2014/09/05/old%20posts/2014-09-05-ruby-bits-3-class/"/>
      <url>/2014/09/05/old%20posts/2014-09-05-ruby-bits-3-class/</url>
      
        <content type="html"><![CDATA[<p>上一個禮拜想要嘗試更多的動手記憶，經過實驗證明，還是需要筆記的輔助反覆記憶會比較好。經過這次的練習之後會更注重學習本身的強度。</p><h2 id="ENCAPSULATION封裝"><a href="#ENCAPSULATION封裝" class="headerlink" title="ENCAPSULATION封裝"></a>ENCAPSULATION封裝</h2><p>跟物件本身有關的method，使用class會比使用許多的method來的好。</p><h2 id="VISIBILITY"><a href="#VISIBILITY" class="headerlink" title="VISIBILITY"></a>VISIBILITY</h2><p>有一些method你並不想給外面的人直接使用他，那麼宣告成private，限制這些private method不能給外面的人所使用。</p><pre><code class="rb">class User  def up_vote(friend)    bump_karma    friend.bump_karma  end  protected  def bump_karma    puts &quot;karma up for #&#123;name&#125;&quot;  endend</code></pre><h1 id="INHERITANCE"><a href="#INHERITANCE" class="headerlink" title="INHERITANCE"></a>INHERITANCE</h1><p>重複的程式碼使用繼承來避免。<br>原來程式碼：</p><pre><code class="rb">class Image    attr_accessor :title, :size, :url  def to_s      &quot;#&#123;@title&#125;,&#123;@size&#125;&quot;    endendclass Video    attr_accessor :title, :size, :url  def to_s      &quot;&#123;@title&#125;, &#123;@size&#125;&quot;  endend</code></pre><p>使用繼承後：</p><pre><code class="rb">class Attachment  attr_accessor :title, :size, :url  def to_s    &quot;#&#123;@title&#125;, #&#123;@size&#125;&quot;end endclass Image &lt; Attachmentendclass Video &lt; Attachmentend</code></pre><p>ruby內的繼承就用箭頭<code>&lt;</code>來表示</p><h2 id="SUPER"><a href="#SUPER" class="headerlink" title="SUPER"></a>SUPER</h2><p>ruby的super跟java的super只能夠繼承constructor一樣。（見下圖）<br><img src="https://lh3.googleusercontent.com/AXTNO38rF_Z5-Bvn6HEX96KsojxntcHjnKFdkpT-5-4=w1755-h923-no"></p><h3 id="super的省略寫法"><a href="#super的省略寫法" class="headerlink" title="super的省略寫法"></a>super的省略寫法</h3><p>super不僅可以在method裡面用，而且有省略寫法。<br>不過一開始學習還是把參數加上去避免混淆。<br><img src="https://lh4.googleusercontent.com/-3UdY2F0B16k/VAlinCbjwRI/AAAAAAAAC3c/aFwDasJziEo/w1755-h833-no/Screen%2BShot%2B2014-09-05%2Bat%2B15.12.39.png"></p><h3 id="overideing-methods以加強執行效率"><a href="#overideing-methods以加強執行效率" class="headerlink" title="overideing methods以加強執行效率"></a>overideing methods以加強執行效率</h3><p>原來寫法：使用case來判斷。</p><pre><code class="rb">class Attachment  def preview    case @type    when :jpg, :png, :gif            thumbnail    when :mp3      player        end  endend</code></pre><p>不如直接使用subclass，增加效率。</p><pre><code class="rb">class Attachment  def preview    thumbnail  endendclass Audio &lt; Attachment  def preview    player    endend</code></pre><h2 id="HIDE-INSTANCE-VARIABLES"><a href="#HIDE-INSTANCE-VARIABLES" class="headerlink" title="HIDE INSTANCE VARIABLES"></a>HIDE INSTANCE VARIABLES</h2><p>這節要討論的是如何簡化程式碼<br>原本</p><pre><code class="rb">class User  def tweet_header    [@first_name, @last_name].join(&#39; &#39;)  end  def profile    [@first_name, @last_name].join(&#39; &#39;) + @description    endend</code></pre><p>可以看到method內有重複的地方。把他們包起來獨立出來。</p><pre><code class="rb">class User  def display_name    [@first_name, @last_name].join(&#39; &#39;)  end  def tweet_header    display_name  end  def profile    display_name + @description  endend</code></pre><p>更漂亮的寫法?</p><pre><code class="rb">class User  def display_name    title = case @gender      when :female        married? ? &quot;Mrs.&quot; : &quot;Miss&quot;      when :male        &quot;Mr.&quot;    end    [title, @first_name, @last_name].join(&#39; &#39;)  endend</code></pre><h2 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h2><p>Override的方法很簡單，直接取相同的method名稱，就可以複寫掉父類別的method。</p><h2 id="最後一關"><a href="#最後一關" class="headerlink" title="最後一關"></a>最後一關</h2><p>重構程式碼 refactoring</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 2 ) : Methods and Classes</title>
      <link href="/2014/09/04/old%20posts/2014-09-04-ruby-bits-2-methods-and-classes/"/>
      <url>/2014/09/04/old%20posts/2014-09-04-ruby-bits-2-methods-and-classes/</url>
      
        <content type="html"><![CDATA[<h2 id="Hash-Argument"><a href="#Hash-Argument" class="headerlink" title="Hash Argument"></a>Hash Argument</h2><p><img src="https://lh4.googleusercontent.com/-hdUCbd8-xxI/VJ7OabbDJzI/AAAAAAAADVE/IVpvhmF0jME/w1755-h965-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.18.02.png"><br>每一個不同的欄位就多一個 argument不是個好方法，會造成很多欄位空在那邊。<br><img src="https://lh6.googleusercontent.com/-Gn4gNk7tPCE/VJ7ObUCXt5I/AAAAAAAADVQ/DmSN6NOzNLw/w1755-h958-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.18.18.png"><br>用 Hash argument 來解決這個問題。<br><img src="https://lh6.googleusercontent.com/-Gn4gNk7tPCE/VJ7ObUCXt5I/AAAAAAAADVQ/DmSN6NOzNLw/w1755-h958-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.18.18.png"><br>使用方法，因為 hash 是由 key-value 所組成，所以可以把需要的屬性設成 symbol ，也就是<code>:lat</code>這種樣子。後面指定它的 value，形成 key-value 的形式。<br><img src="https://lh5.googleusercontent.com/-6bgtAU3Clbg/VJ7ObPXoEWI/AAAAAAAADVM/0UnTaLC-y8o/w1755-h933-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.18.31.png"><br>改寫成 1.9 以後的 hash<img src="https://lh5.googleusercontent.com/-Kig_SWyG0Bc/VJ7Odqbjh0I/AAAAAAAADVY/fZtWyQP4WPQ/w1755-h855-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.19.22.png"><br>hash 中的 key 可以省略，只寫出某幾個就可以，就連hash argument 本身都可以省略，。<br><img src="https://lh6.googleusercontent.com/-SoTADybAdlA/VJ7OfHNTvJI/AAAAAAAADVg/bWIor1roiY8/w1755-h663-no/Screen%2BShot%2B2014-12-27%2Bat%2B23.19.42.png"></p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p><img src="https://lh6.googleusercontent.com/-q7ZbxrQ8BHU/VJ7ZaBfnJ2I/AAAAAAAADV4/7G0z1kMaJXk/w1753-h933-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.05.23.png"><br>當 tweets 是空的時候，我希望我會知道這個訊息，這時候 Exception 就派上用場了。</p><pre><code class="rb">def get_tweets(list)  unless list.authorized?(@user)    raise AuthorizationException.new    end    list.tweetsend</code></pre><p>現在我有一個 method 叫做 get_tweets(list)，當他發現 user 沒有認證的時候，它就會丟出AuthorizationException這個例外，對應的程式碼是<code>raise AuthorizationException.new</code>，接下來再用另外一段程式碼，把剛剛上面的程式碼包起來，因為我們接下來要做的是對拋出的例外做一些處理，好讓我們可以藉由 exception 更輕鬆的了解到錯誤出現在哪裡。</p><pre><code class="rb">begin  tweets = get_tweets(my_list)rescue AuthorizationException  warn &quot;You are not authorized to access this list.&quot;end</code></pre><p>1<del>2行，先執行我們剛剛建立的method 叫做 get_tweet(my_list)，接著 3</del>4 行的意思是當發現有認證例外（AuthorizationException）產生時，就會跳出警告<code>&quot;You are not authorized to access this list.&quot;</code>。<br>延伸閱讀：<br><a href="http://rubylearning.com/satishtalim/ruby_exceptions.html">Ruby Exceptions</a><br><a href="http://www.tutorialspoint.com/ruby/ruby_exceptions.htm">tutorial point ruby exception</a><br><a href="http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling/">ruby exceptions and error handling</a></p><h2 id="Splat-Argument"><a href="#Splat-Argument" class="headerlink" title="Splat Argument"></a>Splat Argument</h2><p><img src="https://lh3.googleusercontent.com/--O8ZvriOtYI/VJ7frL2bYtI/AAAAAAAADWU/Vudg3_RSJnY/w1748-h260-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.34.16.png"><br>前面有加 * 字號的變數代表傳入的會是 Array，依序傳入為 Array[0]、Array[1]、Array[2]…以此類推。<br><img src="https://lh3.googleusercontent.com/m_IMEQvAM5O6a-_I801MNkMBy3b6Ksklu_-wnlDo5T8=w1755-h415-no"></p><h2 id="You-Need-a-Class-When-…"><a href="#You-Need-a-Class-When-…" class="headerlink" title="You Need a Class When …"></a>You Need a Class When …</h2><p><img src="https://lh4.googleusercontent.com/-A_2YsWJ-dzQ/VJ7j1AQW5kI/AAAAAAAADW4/pkW88PelvLU/w1755-h1005-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.48.34.png"><br><img src="https://lh6.googleusercontent.com/-koGBR2kSY74/VJ7jz1uHhMI/AAAAAAAADW0/J4GF70Xeeg4/w1753-h903-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.49.01.png"><br><img src="https://lh4.googleusercontent.com/-qcgWOVQOWl0/VJ7jz_THkII/AAAAAAAADWs/GiSTz8Od5uE/w1755-h855-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.49.23.png"></p><h2 id="OverSharing"><a href="#OverSharing" class="headerlink" title="OverSharing"></a>OverSharing</h2><p><img src="https://lh4.googleusercontent.com/-ySIcZkVxL1k/VJ7j3olxddI/AAAAAAAADXA/LGct57OmEoU/w1753-h973-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.50.40.png"><br><img src="https://lh4.googleusercontent.com/-G881X3MSHo8/VJ7j67Nk_vI/AAAAAAAADXM/ZkKMYHmRlY8/w1755-h960-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.50.48.png"></p><h2 id="Reopen-Classes"><a href="#Reopen-Classes" class="headerlink" title="Reopen Classes"></a>Reopen Classes</h2><p><img src="https://lh5.googleusercontent.com/-oHFPEKrFU0o/VJ7j71YNvoI/AAAAAAAADXQ/Y3IIxyyihG0/w1755-h968-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.51.02.png"></p><ul><li>You can re-open and change any class.</li><li>Beware! You don’t know who relies on the old functionality.</li><li>You should only re-open classes that you yourself own.</li></ul><h2 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h2><p><img src="https://lh6.googleusercontent.com/-gJ4xawZHjFY/VJ7j9YxS8bI/AAAAAAAADXY/UKRNKNzoTdA/w1755-h980-no/Screen%2BShot%2B2014-12-28%2Bat%2B00.51.54.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby bits ( 1 ) : Expression</title>
      <link href="/2014/09/03/old%20posts/2014-09-03-ruby-bits-1-expression/"/>
      <url>/2014/09/03/old%20posts/2014-09-03-ruby-bits-1-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="Unless"><a href="#Unless" class="headerlink" title="Unless"></a>Unless</h2><h3 id="Unless-is-more-intuitive"><a href="#Unless-is-more-intuitive" class="headerlink" title="Unless is more intuitive"></a>Unless is more intuitive</h3><p>用 unless 代替 if! 更加直覺<br><img src="https://lh6.googleusercontent.com/-5bBGYT1k2-A/VJ6nejJKOhI/AAAAAAAADSo/1-o4flu-7Ys/w1753-h923-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.21.26.png"></p><h3 id="Unless-with-else-is-confusing"><a href="#Unless-with-else-is-confusing" class="headerlink" title="Unless with else is confusing"></a>Unless with else is confusing</h3><p>unless 和 else 一起用的時候令人困惑<br><img src="https://lh6.googleusercontent.com/-5bBGYT1k2-A/VJ6nejJKOhI/AAAAAAAADSo/1-o4flu-7Ys/w1753-h923-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.21.26.png"></p><h2 id="NIL"><a href="#NIL" class="headerlink" title="NIL"></a>NIL</h2><h3 id="NIL-IS-FALSE"><a href="#NIL-IS-FALSE" class="headerlink" title="NIL IS FALSE"></a>NIL IS FALSE</h3><p>因為 nil 的值等於 false 所以上面的程式可以簡化成下面這樣。<br><img src="https://lh5.googleusercontent.com/-d-D-pBa2YDg/VJ6nep0yXhI/AAAAAAAADS0/0Xxjj3Nio6s/w1755-h913-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.26.07.png"></p><h3 id="ONLY-NIL-IS-FALSE"><a href="#ONLY-NIL-IS-FALSE" class="headerlink" title="ONLY NIL IS FALSE"></a>ONLY NIL IS FALSE</h3><p>Rails 世界中只有 nil 的值是 false（除了 False 本身的值當然是 False 以外）。<br><img src="https://lh3.googleusercontent.com/-mdIOdhlh8D4/VJ6nevdeyvI/AAAAAAAADSw/1BiBgZAB4EQ/w1650-h900-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.29.07.png"></p><h2 id="inline-condition"><a href="#inline-condition" class="headerlink" title="inline condition"></a>inline condition</h2><p><img src="https://lh5.googleusercontent.com/-6w8mJFsayEk/VJ6nfsNXD6I/AAAAAAAADS4/cCaNA4Tc9AU/w1648-h870-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.33.55.png"></p><h2 id="short-circuit-assignment"><a href="#short-circuit-assignment" class="headerlink" title="short circuit assignment"></a>short circuit assignment</h2><p>指的是使用 and(&amp;&amp;) 和 or(||)來縮減 if-else</p><h3 id="Ex1-if-nil-default-to-empty-array"><a href="#Ex1-if-nil-default-to-empty-array" class="headerlink" title="Ex1 : if nil, default to empty array"></a>Ex1 : if nil, default to empty array</h3><p><img src="https://lh6.googleusercontent.com/-VGNyfeQzJ9o/VJ6tympvnJI/AAAAAAAADTc/lspZVQXK6cU/w1753-h805-no/Screen%2BShot%2B2014-12-27%2Bat%2B20.47.18.png"></p><h3 id="Ex2-sign-in"><a href="#Ex2-sign-in" class="headerlink" title="Ex2 : sign in"></a>Ex2 : sign in</h3><p>一個常見的例子是用在「判斷使用者有沒有登入」，如果 session 中有 user_id 就去找到相對的 user。 session 中沒有找不到 user_id 時才導向登入畫面。</p><pre><code class="ruby">def sign_in  current_session || sign_user_inend</code></pre><h2 id="conditional-assignment"><a href="#conditional-assignment" class="headerlink" title="conditional assignment"></a>conditional assignment</h2><p><img src="https://lh5.googleusercontent.com/N9asEu-OunIOpgTfsZhXbHzp9ryQbRF2T5cYHb--Xos=w1650-h813-no"></p><p>現在有一個敘述<code>i_was_set ||= 2</code>它的意思是如果 i_was_set 這個變數還沒被 assign 值，那就設定為2(下方的例子)。如果已經被 assign了值，i_was_set 的值保持原來 assign 的值（上方的例子）。</p><p><img src="https://lh3.googleusercontent.com/0BVEMiPeVwoOckMffgOffI50f7cPgrCeM81PXWn74SI=w1755-h783-no"></p><p>再看一個例子，如果變數未指定的話就會設成後面的值。</p><h2 id="conditional-return-values"><a href="#conditional-return-values" class="headerlink" title="conditional return values"></a>conditional return values</h2><p>利用 =if 來減少重複的程式碼。原理是再function中裸寫出一個值時，其實意義上等於 return 剛剛寫下的那個值。舉例來說</p><pre><code class="rb">if list_name  &quot;/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;else  &quot;/#&#123;user_name&#125;&quot;end</code></pre><p>會回傳<code>&quot;/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;</code>或<code>&quot;/#&#123;user_name&#125;&quot;</code>，所以如果寫下</p><pre><code class="ruby">options[:path] = if list_name  &quot;/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;else  &quot;/#&#123;user_name&#125;&quot;end</code></pre><p>其實就等於</p><pre><code class="ruby">if list_name  options[:path] = &quot;/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;else  options[:path] = &quot;/#&#123;user_name&#125;&quot;end</code></pre><p>上式先判斷listname的值，再指定給option[:path]，下式也是先判斷list_name的值，再指定給 option[:path]。可以發現兩者邏輯是相同的，只是書寫的方式看起來不同。</p><h2 id="conditional-return-values-ex2"><a href="#conditional-return-values-ex2" class="headerlink" title="conditional return values (ex2)"></a>conditional return values (ex2)</h2><pre><code class="rb">def list_url(user_name, list_name)  if list_name    url = &quot;https://twitter.com/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;  else    url = &quot;https://twitter.com/#&#123;user_name&#125;&quot;  end  urlend</code></pre><pre><code class="rb">def list_url(user_name, list_name)  if list_name      &quot;https://twitter.com/#&#123;user_name&#125;/#&#123;list_name&#125;&quot;  else      &quot;https://twitter.com/#&#123;user_name&#125;&quot;  endend</code></pre><h2 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h2><p>case 的用法跟java不太一樣，但是其實意義上有點類似，ruby裡面的case流程判斷的else就是java裡面switch流程判斷的default。然後java設定條件的地方用關鍵字 case 而 ruby 用關鍵字 when。</p><h3 id="CASE-RANGES"><a href="#CASE-RANGES" class="headerlink" title="CASE RANGES"></a>CASE RANGES</h3><pre><code class="rb">popularity = case tweet.retweet_count  when 0..9    nil  when 10..99    &quot;trending&quot;  else    &quot;hot&quot;end</code></pre><h3 id="CASE-REGEXPS"><a href="#CASE-REGEXPS" class="headerlink" title="CASE - REGEXPS"></a>CASE - REGEXPS</h3><pre><code class="rb">tweet_type = case tweet.status    when /\A@\w+/        :mention    when /\Ad\s+\w+/        :direct_message    else        :publicend</code></pre><h3 id="CASE-WHEN-THEN"><a href="#CASE-WHEN-THEN" class="headerlink" title="CASE - WHEN/THEN"></a>CASE - WHEN/THEN</h3><pre><code class="rb">tweet_type = case tweet.status    when /\A@\w+/    then :mention    when/\Ad\s+\w+/  then :direct_message    else                  :public  end</code></pre><p>這個設定滿方便，用java寫至少要拆成兩個物件才能夠取得return的值。(看不懂不要緊，我沒有說的很清楚，總之就記得ruby這樣的寫法是比較簡潔的即可)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ruby Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Return Flight Ch1 ( 1 )：Ajax Basics</title>
      <link href="/2014/08/25/old%20posts/2014-08-25-javascript-return-flight/"/>
      <url>/2014/08/25/old%20posts/2014-08-25-javascript-return-flight/</url>
      
        <content type="html"><![CDATA[<p>這是之前在try jQuery做過的例子。</p><p><img src="https://lh6.googleusercontent.com/-HjoupHhCEzM/U_qSn5aBcsI/AAAAAAAACxQ/tnBo1gSjLCM/w1755-h860-no/Screen%2BShot%2B2014-08-25%2Bat%2B09.33.46.png"></p><p>之前我們只能顯示localhost的圖片，現在我們要從server載圖片下來，並顯示之。<br>接下來來完成我們第一個Ajax程式。</p><pre><code class="js">$(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;button&#39;, function()&#123;  $.ajax(&#39;http://example.org/confirmation.html&#39;,  &#123;     success: function(response) &#123;       $(&#39;.ticket&#39;).html(response).slideDown();       &#125;    &#125;);&#125;);</code></pre><p>使用Ajax回傳的網頁並不是完整的網頁，而是只有局部更新。</p><pre><code class="html">&lt;div&gt; ...  &lt;strong&gt;Boarding Pass: &lt;/strong&gt;  &lt;a href=&#39;#&#39; class=&#39;view-boarding-pass&#39;&gt;View Boarding Pass&lt;/a&gt;  &lt;img src=&#39;ticket.png&#39; alt=&#39;Your boarding pass&#39; class=&#39;boarding-pass&#39; /&gt;&lt;/div&gt;</code></pre><h2 id="Aax使用的是相對網址-relative-URL"><a href="#Aax使用的是相對網址-relative-URL" class="headerlink" title="Aax使用的是相對網址(relative URL)"></a>Aax使用的是相對網址(relative URL)</h2><pre><code class="js">$(&#39;.confirmation&#39;).on(&#39;click&#39;, &#39;button&#39;, function()&#123; $.ajax(&#39;confirmation.html&#39;, &#123;     success: function(response) &#123;         $(&#39;.ticket&#39;).html(response).slideDown();     &#125; &#125;);&#125;);</code></pre><p>跟<a href="http://example.org/confirmation.html%E4%B8%80%E6%A8%A3%E7%9A%84%E6%95%88%E6%9E%9C%E3%80%82">http://example.org/confirmation.html一樣的效果。</a></p><h2 id="使用-get減少程式碼"><a href="#使用-get減少程式碼" class="headerlink" title="使用$.get減少程式碼"></a>使用$.get減少程式碼</h2><p>使用$.ajax</p><pre><code class="js">$.ajax(&#39;confirmation.html&#39;, &#123;     success: function(response) &#123;      $(&#39;.ticket&#39;).html(response).slideDown();    &#125;&#125;);</code></pre><p>使用$.get</p><pre><code class="js">$.get(&#39;confirmation.html&#39;, function(response) &#123;   $(&#39;.ticket&#39;).html(response).slideDown();&#125;);</code></pre><p>兩種方法效果完全一樣，用get的寫法比較精簡。格式是<code>$.get(url, success callback)</code></p><h2 id="Sending-parameters-with-requests"><a href="#Sending-parameters-with-requests" class="headerlink" title="Sending parameters with requests"></a>Sending parameters with requests</h2><p>有兩種寫法，作用是相等的。<br>第一種把網址填入url</p><pre><code class="js">$.ajax(&#39;confirmation.html?confNum=1234&#39;, &#123; success: function(response) &#123;     $(&#39;.ticket&#39;).html(response).slideDown();   &#125;&#125;);</code></pre><p>第二種將網址寫在data項目之下</p><pre><code class="js">$.ajax(&#39;confirmation.html&#39;, &#123;   success: function(response) &#123;     $(&#39;.ticket&#39;).html(response).slideDown();   &#125;,   data: &#123; &quot;confNum&quot;: 1234 &#125;   &#125;&#125;);</code></pre><p>這兩種方法都是寫死的，正常來說資料是會變動的，所以應該要用以下寫法。</p><pre><code class="html">&lt;div class=&#39;ticket&#39; data-confNum=&#39;1234&#39;&gt;</code></pre><pre><code class="js">$.ajax(&#39;confirmation.html&#39;, &#123;     success: function(response) &#123;       $(&#39;.ticket&#39;).html(response).slideDown();     &#125;,     data: &#123; &quot;confNum&quot;: $(&quot;.ticket&quot;).data(&quot;confNum&quot;)     &#125;&#125;);</code></pre><h3 id="1-6-Ajax-Data"><a href="#1-6-Ajax-Data" class="headerlink" title="1.6 Ajax Data"></a>1.6 Ajax Data</h3><p>原本會顯示全部的圖片，透過修改data對應的url，變成只顯示london這張圖片<br>我的答案是這樣</p><pre><code class="js">$(document).ready(function() &#123;  $(&quot;#tour&quot;).on(&quot;click&quot;, &quot;button&quot;, function() &#123;    $.ajax(&#39;/photos.html&#39;, &#123;      data: &#123;location:&#39;london&#39;&#125;,      success: function(response) &#123;        $(&#39;.photos&#39;).html(response).fadeIn();      &#125;    &#125;);  &#125;);&#125;);</code></pre><p>這時候出現了以下的錯誤<br><img src="https://lh6.googleusercontent.com/zmzYKG0zPFrQtQuetAmUASzkGppMbCiTAMpblaBAhcY=w1748-h223-no"></p><p>因為我把值寫死了，使用data來對應是比較好的作法。</p><pre><code class="js">$(document).ready(function() &#123;  $(&quot;#tour&quot;).on(&quot;click&quot;, &quot;button&quot;, function() &#123;    var el = $(&quot;#tour&quot;);    $.ajax(&#39;/photos.html&#39;, &#123;      data: &#123;location: el.data(&#39;location&#39;)&#125;,      success: function(response) &#123;        $(&#39;.photos&#39;).html(response).fadeIn();      &#125;    &#125;);  &#125;);&#125;);</code></pre><h1 id="Ajax-options"><a href="#Ajax-options" class="headerlink" title="Ajax options"></a>Ajax options</h1><h2 id="使用error處理失敗的request"><a href="#使用error處理失敗的request" class="headerlink" title="使用error處理失敗的request"></a>使用error處理失敗的request</h2><p><img src="https://lh5.googleusercontent.com/-Ho8DXLjqFms/U_qfnpPOAOI/AAAAAAAACyU/0Bm0X2lg8zI/w1755-h885-no/Screen%2BShot%2B2014-08-25%2Bat%2B10.24.28.png"></p><h2 id="使用beforeSend和Complete製作Loading效果"><a href="#使用beforeSend和Complete製作Loading效果" class="headerlink" title="使用beforeSend和Complete製作Loading效果"></a>使用beforeSend和Complete製作Loading效果</h2><p><img src="https://lh6.googleusercontent.com/-CiUYsr6XJpg/U_qfny5n5vI/AAAAAAAACyk/pxPMu-k_URk/w1755-h925-no/Screen%2BShot%2B2014-08-25%2Bat%2B10.23.49.png"></p><h2 id="使用delegation解決錯誤"><a href="#使用delegation解決錯誤" class="headerlink" title="使用delegation解決錯誤"></a>使用delegation解決錯誤</h2><p>因為DOM在一進入頁面的時候就載入，所以如果用第一個寫法會發生錯誤，因為根本就還沒有這個物件。<br><img src="https://lh4.googleusercontent.com/-F0Ta3-SweHU/U_qfowcrybI/AAAAAAAACys/nwHPzkl773c/w1755-h875-no/Screen%2BShot%2B2014-08-25%2Bat%2B10.28.02.png"><br>這時候需要delegate，在觸發事件的後面跟著設定一個selector，符合這個selector才會執行。<br><img src="https://lh4.googleusercontent.com/-U03mkyStXcs/U_qfpEdT5FI/AAAAAAAACyo/pth2HCRfKFM/w1753-h423-no/Screen%2BShot%2B2014-08-25%2Bat%2B10.28.33.png"><br><a href="http://api.jquery.com/delegate/">delegate官方文件</a></p><h2 id="1-8-在-photos內顯示新的-lt-li-gt"><a href="#1-8-在-photos內顯示新的-lt-li-gt" class="headerlink" title="1.8 在.photos內顯示新的&lt;li&gt;"></a>1.8 在.photos內顯示新的<code>&lt;li&gt;</code></h2><pre><code class="html">&lt;div id=&quot;tour&quot; data-location=&quot;london&quot;&gt;  &lt;button&gt;Get Photos&lt;/button&gt;  &lt;ul class=&quot;photos&quot;&gt;  &lt;/ul&gt;&lt;/div&gt;</code></pre><pre><code class="js"> $(&#39;.photos&#39;).html(&#39;&lt;li&gt;There was a problem fetching the latest photos. Please try again.&lt;/li&gt;&#39;);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Ajax </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sitcon workshop：Git 入門到進階與實務經驗談</title>
      <link href="/2014/08/11/old%20posts/2014-08-11-sitcon-git-workshop/"/>
      <url>/2014/08/11/old%20posts/2014-08-11-sitcon-git-workshop/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-入門到進階與實務經驗談"><a href="#Git-入門到進階與實務經驗談" class="headerlink" title="Git 入門到進階與實務經驗談"></a>Git 入門到進階與實務經驗談</h1><p><a href="http://sitcon.kktix.cc/events/sitcon-workshop-2014">workshop網頁</a><br>sitcon這次舉辦的為期五天的workshop<br>每天不一樣的主題，我參加的有</p><ol><li>8/11 Git 入門到進階與實務經驗談</li><li>8/14 那些學校沒教的黑魔法攻防</li><li>8/15 學習設計：從一個網站的設計開始</li></ol><p>這是第一天 Git workshop 的學習筆記<br>主講人:Denny<br>投影片: <a href="http://denny0223.github.io/SITCON-workshop-2014-git/">連結</a></p><h2 id="第零部分：前置設定"><a href="#第零部分：前置設定" class="headerlink" title="第零部分：前置設定"></a>第零部分：前置設定</h2><h3 id="1-讓你的termenal可以顯示出精美的彩色branch樹狀圖"><a href="#1-讓你的termenal可以顯示出精美的彩色branch樹狀圖" class="headerlink" title="1. 讓你的termenal可以顯示出精美的彩色branch樹狀圖"></a>1. 讓你的termenal可以顯示出精美的彩色branch樹狀圖</h3><pre><code>git config --global alias.lg &quot;log --color --graph --all --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --&quot;</code></pre><p>這些設定會存在.gitconfig ，因為指令加上–global，會加到user的設定上，而不是rep。<br>設定完成後以後輸入<code>git lg</code>就會顯示樹狀圖與commit詳細資訊。</p><pre><code>git lg</code></pre><p>將commit再終端機中顯示成樹狀圖。</p><h3 id="2-在terminal顯示branch名稱"><a href="#2-在terminal顯示branch名稱" class="headerlink" title="2. 在terminal顯示branch名稱"></a>2. 在terminal顯示branch名稱</h3><pre><code>function parse_git_branch &#123;   git branch --no-color 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/ (.)/(\1)/&#39;&#125;export PS1=&quot;\h:\W \u\$(parse_git_branch)$ &quot;</code></pre><p>將以上代碼貼到.bashrc profile，</p><h2 id="第一部分：git基本操作"><a href="#第一部分：git基本操作" class="headerlink" title="第一部分：git基本操作"></a>第一部分：git基本操作</h2><pre><code>ls -al</code></pre><p>顯示資料夾內的隱藏檔案。</p><h3 id="認識git儲存的結構"><a href="#認識git儲存的結構" class="headerlink" title="認識git儲存的結構"></a>認識git儲存的結構</h3><p><img src="https://lh6.googleusercontent.com/-QXaRQdFQ51U/U-gsMJNN7xI/AAAAAAAACt8/gl7wpuNUmBI/w1916-h1146-no/Screen%2BShot%2B2014-08-11%2Bat%2B10.23.51.png"></p><p>working space是你的工作目錄<br>staging area 代表這些檔案等著進rep<br>repository則是儲存庫</p><h3 id="牛刀小試"><a href="#牛刀小試" class="headerlink" title="牛刀小試"></a>牛刀小試</h3><pre><code>git add</code></pre><p>輸入<code>git add</code> . 將檔案抓進staging area。</p><pre><code>git reset</code></pre><p>輸入<code>git reset</code>，將staging area把檔案拿出來。</p><pre><code>git status</code></pre><p>輸入<code>git status</code>可以查看目前的狀態。<br>untracked files內的資料代表在staging area的檔案。</p><h3 id="gitingnore與gitkeep"><a href="#gitingnore與gitkeep" class="headerlink" title="gitingnore與gitkeep"></a>gitingnore與gitkeep</h3><h4 id="1-使用gitignore來設定不需要版本控制的檔案"><a href="#1-使用gitignore來設定不需要版本控制的檔案" class="headerlink" title="1.使用gitignore來設定不需要版本控制的檔案"></a>1.使用gitignore來設定不需要版本控制的檔案</h4><pre><code>.gitignore</code></pre><p>像binary這種佔空間且無法比較，就不存放在rep裡。</p><h4 id="2-使用gitkeep將資料夾加進版本控制之中"><a href="#2-使用gitkeep將資料夾加進版本控制之中" class="headerlink" title="2.使用gitkeep將資料夾加進版本控制之中"></a>2.使用gitkeep將資料夾加進版本控制之中</h4><pre><code>.gitkeep</code></pre><p>建造一個空資料夾時，git並不會把它直接加進版本控制中，而加入gitkeep後讓這個新的資料夾加入版本控制中。</p><h3 id="使用git-diff來檢查差異"><a href="#使用git-diff來檢查差異" class="headerlink" title="使用git diff來檢查差異"></a>使用git diff來檢查差異</h3><pre><code>git diff</code></pre><p>可以看到目前版本與前一個版本的差異</p><pre><code>git diff --cached</code></pre><p>可以看到rep和staging area的差異</p><h3 id="git-commit與patch-commit"><a href="#git-commit與patch-commit" class="headerlink" title="git commit與patch commit"></a>git commit與patch commit</h3><pre><code>git commit</code></pre><p>除了第一行外，其他部分可以寫詳細的演算法、作法，可以使用git log來看完整的內容。(git status只看的到第一行)</p><pre><code>git commit -m &quot;commit message&quot;</code></pre><p>當commit不需太多說明時，使用單行的commit可以使用此指令。</p><pre><code>git add --patch</code></pre><p><a href="https://www.youtube.com/watch?v=Wl0NfWYrvlY">youtube - Intro to git add patch mode tutorial</a></p><pre><code>git commit --patch</code></pre><p>對某幾行commit而非整個檔案。</p><pre><code>git commit -a</code></pre><p>跳過staging area從work directory直接丟進rep。</p><h3 id="使用-git-show-顯示-commit-資訊"><a href="#使用-git-show-顯示-commit-資訊" class="headerlink" title="使用 git show 顯示 commit 資訊"></a>使用 git show 顯示 commit 資訊</h3><pre><code>git show = git show HEAD</code></pre><p>HEAD表示最新的一筆，所以git show就是顯示最新的一個commit。</p><pre><code>git show HEAD^</code></pre><p>表示HEAD的前一筆</p><h3 id="認識git-rm"><a href="#認識git-rm" class="headerlink" title="認識git rm"></a>認識git rm</h3><p>git rm不只能夠刪除檔案還能夠取消追蹤檔案。</p><pre><code>git rm &lt;file&gt;</code></pre><p>Remove file</p><pre><code>git rm --cached &lt;file&gt;</code></pre><p>Untrack file</p><h3 id="認識-git-checkout"><a href="#認識-git-checkout" class="headerlink" title="認識 git checkout"></a>認識 git checkout</h3><p>git checkout HEAD^<br>HEAD變成前一筆。</p><pre><code>git checkout master</code></pre><p>返回最新版</p><pre><code>git checkout &lt;reversion&gt; &lt;file&gt;</code></pre><p>把以前版本的單一檔案拿回來。</p><h3 id="認識git-stash"><a href="#認識git-stash" class="headerlink" title="認識git stash"></a>認識git stash</h3><pre><code>git stash</code></pre><p>把工作區原封不動的保存起來（本地沒有變動的時候會不給暫存）。</p><pre><code>git stash list</code></pre><p>看到目前暫存的東西</p><pre><code>git stash pop</code></pre><p>把暫存的東西拿出來</p><pre><code>git stash show stash@&#123;0&#125;</code></pre><p>顯示修改後的檔案</p><pre><code>git stash show -p stash@&#123;0&#125;</code></pre><p>顯示修改後的檔案內容</p><pre><code>git stash drop</code></pre><p>把暫存區的東西刪掉</p><h3 id="認識git-reset"><a href="#認識git-reset" class="headerlink" title="認識git reset"></a>認識git reset</h3><pre><code>git reset HEAD^</code></pre><p>刪掉一筆commit，但會保留目前檔案的內容。</p><pre><code>git reset HEAD^ --hard</code></pre><p>刪掉一筆commit，連檔案內容都刪掉。</p><h3 id="認識git-revert"><a href="#認識git-revert" class="headerlink" title="認識git revert"></a>認識git revert</h3><pre><code>git revert</code></pre><p>將別人所做的commit取消，讓revert的東西存在commit之中。</p><h2 id="第二部分：推上遠端rep-Github"><a href="#第二部分：推上遠端rep-Github" class="headerlink" title="第二部分：推上遠端rep(Github)"></a>第二部分：推上遠端rep(Github)</h2><pre><code>git push origin master</code></pre><p>本地會跟著名稱相同的遠端rep</p><pre><code>git push origin -u master</code></pre><p>讓本機知道要跟著origin這條，以後只要打git push就可以推上去。這個路徑檔寫入在.git/config裡面。</p><pre><code>git branch -avv</code></pre><p>看所有的-a -avv看更詳細</p><pre><code>git remote</code></pre><p>可以看到目前有的分支</p><pre><code>git remote -v</code></pre><p>可以看到目前分支的詳細資訊</p><pre><code>git remote show</code></pre><h3 id="Cache-https-password"><a href="#Cache-https-password" class="headerlink" title="Cache https password"></a>Cache https password</h3><p>使用cache記錄帳號密碼，可以設定可維持的時間。</p><pre><code>git config --global credential.helper cachegit config --global credential.helper &quot;cache --timeout=3600&quot;</code></pre><h3 id="ssh小概念"><a href="#ssh小概念" class="headerlink" title="ssh小概念"></a>ssh小概念</h3><p>id_rsa.pub 公鑰 - 可以發給網路上的人<br>id_rsa 私鑰 - 絕對不可以流出去</p><h3 id="本機不知道該跟哪條branch的時候"><a href="#本機不知道該跟哪條branch的時候" class="headerlink" title="本機不知道該跟哪條branch的時候"></a>本機不知道該跟哪條branch的時候</h3><p>使用XXX可以修改指令。</p><h3 id="練習：解決衝突"><a href="#練習：解決衝突" class="headerlink" title="練習：解決衝突"></a>練習：解決衝突</h3><p>先來製造點衝突<br>開兩個terminal 分別是原來是repo與用git clone回來的repo<br>接下來各下一個新的commit，修改同一檔案。<br>並且push上遠端。<br>第二個修改的commit需要先使用git pull把新版本拉回來，解決完衝突才能繼續push。<br>(git pull = git fetch + git merge)</p><h2 id="第三部分：初探branch"><a href="#第三部分：初探branch" class="headerlink" title="第三部分：初探branch"></a>第三部分：初探branch</h2><p>branch的用法很廣泛，一般來說分為三種主要的branch。不同branch的東西是不會互相污染的。</p><p>developer branch - 主要人員都在developer branch上開發。<br>release branch - 穩定版本<br>feature branch - 開發新功能</p><h3 id="git-pull-與-git-pull-–rebase-的差異"><a href="#git-pull-與-git-pull-–rebase-的差異" class="headerlink" title="git pull 與 git pull –rebase 的差異"></a>git pull 與 git pull –rebase 的差異</h3><pre><code>git pull</code></pre><p>merge 完的 branch 會顯示分支</p><pre><code>git pull --rebase</code></pre><p>merge 完的branch不會顯示不必要的分支。（因為本來就是同一個branch）</p><p>更詳細的介紹請參照</p><p><a href="http://ihower.tw/blog/archives/3843">使用 git rebase 避免無謂的 merge</a></p><h3 id="Create-a-branch"><a href="#Create-a-branch" class="headerlink" title="Create a branch"></a>Create a branch</h3><pre><code>git branch &lt;branch name&gt;git checkout -b &lt;branch name&gt;</code></pre><p>直接跳過去dev順便創造。</p><h3 id="查詢branch的資訊"><a href="#查詢branch的資訊" class="headerlink" title="查詢branch的資訊"></a>查詢branch的資訊</h3><pre><code>git branch -agit branch -vgit branch -vvgit branch -avv</code></pre><p>顯示的資訊最詳細，所以用這個就好</p><h3 id="把branch推上遠端rep"><a href="#把branch推上遠端rep" class="headerlink" title="把branch推上遠端rep"></a>把branch推上遠端rep</h3><pre><code>git push origin dev</code></pre><p>把dev推上去</p><h3 id="把dev-merge回master"><a href="#把dev-merge回master" class="headerlink" title="把dev merge回master"></a>把dev merge回master</h3><p>git merge dev</p><h3 id="Fast-forward"><a href="#Fast-forward" class="headerlink" title="Fast forward"></a>Fast forward</h3><ol><li>當master未新增東西時，branch有新東西。這時會發生fast forward現象。也就是branch直接接回master。</li><li>想保持branch的資訊依然存在，這時可以使用</li></ol><pre><code>git merge --no-ff</code></pre><h3 id="刪除一個branch"><a href="#刪除一個branch" class="headerlink" title="刪除一個branch"></a>刪除一個branch</h3><pre><code>branch -D</code></pre><p>把branch砍掉。</p><h3 id="使用cherry-pick"><a href="#使用cherry-pick" class="headerlink" title="使用cherry-pick"></a>使用cherry-pick</h3><pre><code>git cherry-pick &lt;reversion&gt;</code></pre><p>把某一個branch的其中一個commit拿過來用。</p><h2 id="第四部分：其他常用指令"><a href="#第四部分：其他常用指令" class="headerlink" title="第四部分：其他常用指令"></a>第四部分：其他常用指令</h2><h3 id="Modify-commit-history"><a href="#Modify-commit-history" class="headerlink" title="Modify commit history"></a>Modify commit history</h3><pre><code>git commit --amend</code></pre><p>修改commit message，commit時會產生的commit id，建議只有在還沒推到server的時候做。</p><pre><code>git commit --amend --date=&quot;Mar 15 00:00 2014&quot;</code></pre><p>修改commit的時間</p><pre><code>git rebase -i &lt;reversion&gt;</code></pre><h3 id="用-git-relog-把-git-reset-–hard-的東西救回來"><a href="#用-git-relog-把-git-reset-–hard-的東西救回來" class="headerlink" title="用 git relog 把 git reset –hard 的東西救回來"></a>用 git relog 把 git reset –hard 的東西救回來</h3><ol><li>git reflog</li><li>git reset –hard 要切回的分支id</li></ol><h3 id="More-about-git-log"><a href="#More-about-git-log" class="headerlink" title="More about git log"></a>More about git log</h3><pre><code>git log -p --statgit log --onelinegit log --graphgit log --abbrev-commitgit log --pretty=%angit whatchangedgit log --author=&quot;Denny Huang&quot;</code></pre><p>查詢某人對專案的貢獻</p><pre><code>git log --since=&#123;2014-07-01&#125; --until=&quot;1 week ago&quot;</code></pre><p>查詢時間內的log</p><h3 id="search-by-regex"><a href="#search-by-regex" class="headerlink" title="search by regex"></a>search by regex</h3><pre><code>git log -p -i -G &#39;regex&#39;</code></pre><h3 id="想知道誰動了哪一行"><a href="#想知道誰動了哪一行" class="headerlink" title="想知道誰動了哪一行"></a>想知道誰動了哪一行</h3><pre><code>git blame &lt;filepath&gt;</code></pre><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="http://blog.yorkxin.org/posts/2011/07/29/git-rebase">Git-rebase 小筆記</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星期三搞定一週 88% 工作</title>
      <link href="/2014/08/09/old%20posts/2014-08-09-get-things-down-at-wednesday/"/>
      <url>/2014/08/09/old%20posts/2014-08-09-get-things-down-at-wednesday/</url>
      
        <content type="html"><![CDATA[<h2 id="Part-1-工作清單以一週為規劃"><a href="#Part-1-工作清單以一週為規劃" class="headerlink" title="Part 1:工作清單以一週為規劃"></a>Part 1:工作清單以一週為規劃</h2><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol><li>不需要每天製工作清單，可以節省時間精力。</li><li>一年原本365份的工作清單，縮減成52份。</li><li>有足足一週可以進行最終的彙整工作，消除「工作未完成」的心理壓力。</li><li>可嚴選真正重要的工作：一天的工作量僅為一週的七分之一，審視一週所有的工作，較易依工作重要性決定優先次序。</li><li>提昇完成工作的成就感，比幾每天完成小部分工作，一週完成一項中大型工作可獲得較高的成就感。</li></ol><h2 id="Part2-一週只有三天，以星期三為最後期限"><a href="#Part2-一週只有三天，以星期三為最後期限" class="headerlink" title="Part2:一週只有三天，以星期三為最後期限"></a>Part2:一週只有三天，以星期三為最後期限</h2><p>為工作添加一些限制，像是「一週只有三天」，「星期三是最後的截止期限」這樣絕對可以讓自己以驚人的高效率、迅速完成工作。<br>因為把工作集中在一個禮拜的前三天完成，這樣高密度的工作下，在經驗中反覆學習改進，自然可以養成高效率、高集中力的工作能力。（p39分析了禮拜中的每一天可能的心態，最後選擇了星期三當做最後期限。）</p><h3 id="加班只能星期三"><a href="#加班只能星期三" class="headerlink" title="加班只能星期三"></a>加班只能星期三</h3><ol><li>有些企業會將每月或每週的某天，規定為「不得加班的一天」。有「每週有一天絕對不加班」的自我約束，對於減少拖拖拉拉而加班可是相當的有效。</li><li>松本幸夫提出的理論是「除了星期三外，一律不加班」才是最佳方式。這個理論應是針對工作上的事務，限制自己一定要在上班時間處理完。這樣下班時間就可以享受、或是學習自己所需要的技能。</li><li>如果工作量太大無法實行只有星期三加班，那可以改成實行「每個禮拜的星期四不加班」的方式來解決。</li></ol><h3 id="星期三絕對不能延期"><a href="#星期三絕對不能延期" class="headerlink" title="星期三絕對不能延期"></a>星期三絕對不能延期</h3><p>在瞬息萬變的時代，若是要求「所有的工作都不得延期」，如此嚴苛的條件相信大家看到都冷汗直流吧。因此在逼不得已的情況下，將工作延期，重新規劃也無訪。但是唯獨在決戰之日星期三這天，就算眼前工作堆積如山，也要以「馬上動手做」取代延期。只要決戰星期三能安然度過，接著就可以以無比輕鬆的心情迎接星期四、星期五和週末。</p><h3 id="如何精簡星期三的工作"><a href="#如何精簡星期三的工作" class="headerlink" title="如何精簡星期三的工作"></a>如何精簡星期三的工作</h3><h3 id="了解80-即可宣告大功告成的工作"><a href="#了解80-即可宣告大功告成的工作" class="headerlink" title="了解80%即可宣告大功告成的工作"></a>了解80%即可宣告大功告成的工作</h3><p>工作並不需要都已100%完成為目標，有些情況下只要完成80%即可宣告大功告成，將時間精力留給其他工作。<br>這代表此項工作並未有應達到完成80%以上的必要性。以一週的前三天較要完成一週的工作的理想時，「不得不<br>做」的工作自然是越少越好。在必要時請將「80%即可宣告大功告成的工作」省略。</p><h3 id="區分可省略的工作-vs-不可省略的工作"><a href="#區分可省略的工作-vs-不可省略的工作" class="headerlink" title="區分可省略的工作 vs 不可省略的工作"></a>區分可省略的工作 vs 不可省略的工作</h3><p>省略重要性低的工作、專注於重要工作上使工作計畫與行程簡潔明瞭，工作效率自然提昇。</p><p>不可省略的工作：</p><ol><li>信用</li><li>安全</li><li>個人情報</li><li>金錢</li><li>品質</li><li>人才培育</li></ol><p>可省略的工作:</p><ol><li>僅限公司內部使用的文件</li><li>自己可以完成的工作</li><li>除了「不可省略」的工作外，都可以視為「可省略」的工作。</li></ol><h2 id="徹底活用「星期三」的關鍵"><a href="#徹底活用「星期三」的關鍵" class="headerlink" title="徹底活用「星期三」的關鍵"></a>徹底活用「星期三」的關鍵</h2><p>以星期三為重點安排工作計畫時，應符合以下兩點原則：</p><ol><li>工作的截止期限，集中於星期三。</li><li>優先度高的重要工作，集中於星期三。</li></ol><p>在達成此兩點的原則上，我們還可以進一步思考，<br>如何百分之百充分運用重要無比的星期三。<br>工作計畫應確實執行下列三點：</p><ol><li>在星期三排定下週的工作計畫</li><li>規劃「思考的時間」</li><li>保留「空白的時間」</li></ol><h3 id="1-在星期三發動下週工作計畫"><a href="#1-在星期三發動下週工作計畫" class="headerlink" title="1.在星期三發動下週工作計畫"></a>1.在星期三發動下週工作計畫</h3><p>主張以星期三視為黃金工作天，以此概念延伸的工作方法有「必殺絕招」就是：在星期三排定規劃工作計畫的時間。<br>實行的關鍵在於：重視一週的前半段，即星期一、星期二、星期三。在確實留意「在星期三前將一週工作完成時」，<br>自然可以確保星期一、星期二與星期三的工作計畫。</p><h3 id="2-思考的時間"><a href="#2-思考的時間" class="headerlink" title="2. 思考的時間"></a>2. 思考的時間</h3><p>松本幸夫認為思考亦是工作的一環。一心專注工作易陷入思考狹隘的陷阱，<br>甚至犯下不應該出現的粗心過失。<br>正因為思考的重要性，因此更應在時間計畫中優先考慮。</p><h3 id="3-空檔時間專用的工作清單"><a href="#3-空檔時間專用的工作清單" class="headerlink" title="3. 空檔時間專用的工作清單"></a>3. 空檔時間專用的工作清單</h3><p>在工作或私人形成之間免不了會空下十分鐘、十五分鐘的時間，就是所謂的「空檔時間」。<br>光是在24小時內累積的空檔時間，仔細算算絕對不少。<br>因為空檔時間無法預料何時發生，也當然無法規劃。空檔時間產生後，常常因為不知道這段時間該怎麼辦，<br>就白白浪費了這段寶貴的時間。</p><p>為了有效的利用空檔時間，請注意以下幾點：</p><ol><li>一有空檔時間應馬上行動</li><li>為了可以立即反應，應事先將代辦事項列成工作清單。了解以上兩點後，製作「空檔時間專用的工作清單」之重要性不言而喻：</li><li>不需複雜思考亦可以完成的事。</li><li>低重要性卻非做不可的雜事。</li><li>15分鐘內可完成的簡單工作。例如：回覆email…等等</li></ol><h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><ol><li>不論學習了多麼高明的時間管理技巧，若是罹患了「明日病」，一切只是枉然。</li><li>追求成功的關鍵在於儘早擺脫時間的奴隸，化身為時間的主人。安排工作時間時，優先排定對自己而言重要的工作，讓重要工作擁有充足的時間。</li><li>為了避免生活失去平衡，請先優先安排私人行程。私人享樂擺第一。私人享樂所帶來的期待和快樂將成為工作的原動力。</li></ol><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>有些有參考價值的書，寫成網誌來整理似乎還不錯，加深印象，整理出來的內容更便於回顧。<br>這本書是每年開課超過220堂的時間管理學大師松本幸夫所著。<br>推翻每天列工作清單的方法，採用「工作以週為單位」的時間管理方法。讀了之後發現跟我的習慣很接近，<br>我也是喜歡以「工作成果」來估量自己的效率，並且喜歡在短時間內解決大量的工作。這跟松本幸夫所提出的<br>利用一半時間就完成工作的理念不謀而合。既然是這麼適合自己的書，就來發掘一下有什麼重要的觀念需要注意！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Discover Meteor Ch5：Routing</title>
      <link href="/2014/08/05/old%20posts/2014-08-05-discover-meteor-ch5-routing/"/>
      <url>/2014/08/05/old%20posts/2014-08-05-discover-meteor-ch5-routing/</url>
      
        <content type="html"><![CDATA[<p>現在要做的事情是點選<a href="http://myapp.com/posts/post_id%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%B0%8D%E6%87%89%E5%88%B0post%E7%9A%84%E7%B6%B2%E9%A0%81%E3%80%82">http://myapp.com/posts/post_id，就可以對應到post的網頁。</a></p><p>加入iron router這個package。<br>$ mrt add iron-router</p><h1 id="知識補充站"><a href="#知識補充站" class="headerlink" title="知識補充站"></a>知識補充站</h1><h2 id="Iron-Router"><a href="#Iron-Router" class="headerlink" title="Iron Router"></a>Iron Router</h2><p>Not only does it help with routing (setting up paths), but it can also take care of filters (assigning actions to some of these paths) and even manage subscriptions (control which path has access to what data). (Note: Iron Router was developed in part by Discover Meteor co-author Tom Coleman.)</p><h2 id="Router-Vocabulary"><a href="#Router-Vocabulary" class="headerlink" title="Router Vocabulary"></a>Router Vocabulary</h2><ul><li><strong>Routes</strong>: A route is the basic building block of routing. It’s basically the set of instructions that tell the app where to go and what to do when it encounters a URL.</li><li><strong>Paths</strong>: A path is a URL within your app. It can be static (/terms_of_service) or dynamic (/posts/xyz), and even include query parameters (/search? keyword=meteor).</li><li><strong>Segments</strong>: The different parts of a path, delimited by forward slashes (/).</li><li><strong>Hooks</strong>: Hooks are actions that you’d like to perform before, after, or even during the routing process. A typical example would be checking if the user has the proper rights before displaying a page.</li><li><strong>Filters</strong>: Filters are simply hooks that you define globally for one or more routes.</li><li><strong>Route Templates</strong>: Each route needs to point to a template. If you don’t specify one,the router will look for a template with the same name as the route by default.</li><li><strong>Layouts</strong>: You can think of layouts as one of those digital photo frames. They contain all the HTML code that wraps the current template, and will remain the same even if the template changes.</li><li><strong>Controllers</strong>: Sometimes, you’ll realize that a lot of your templates are reusing the same parameters. Rather than duplicate your code, you can let all these routes inherit from a single routing controller which will contain all the routing logic.</li></ul><h2 id="The-lib-folder"><a href="#The-lib-folder" class="headerlink" title="The /lib folder"></a>The /lib folder</h2><p>Anything you put inside the /lib folder is guaranteed to load first before anything else in your app . This makes it a great place to put any helper code that needs to be available at all times.<br>A bit of warning though: note that since the /lib folder is neither inside /client or /server, this means its contents will be available to both environments.</p><h1 id="Layout-Template與"><a href="#Layout-Template與" class="headerlink" title="Layout, Template與"></a>Layout, Template與</h1><p>This  helper will define a special dynamic zone that will automatically render whichever template corresponds to the current route<br><img src="https://lh5.googleusercontent.com/fF4eK0g64rmCDr44cdBam6d--3ldM46wZK0Oalhftws=w1192-h986-no"></p><h1 id="Routing的使用方式"><a href="#Routing的使用方式" class="headerlink" title="Routing的使用方式"></a>Routing的使用方式</h1><ol start="2"><li>建立layout</li><li>建立route.js</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Meteor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discover meteor Ch4：Collection</title>
      <link href="/2014/08/05/old%20posts/2014-08-05-discover-meteor-ch4-collection/"/>
      <url>/2014/08/05/old%20posts/2014-08-05-discover-meteor-ch4-collection/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>新增一個collection</p><pre><code>collections/posts.js</code></pre><pre><code class="js">Posts = new Meteor.Collection(&#39;posts&#39;);</code></pre><p>除了client與server以外的資料夾會在兩者都執行。<br>所以Posts collection在client和server都可以使用。<br>這裡的Posts前面不加var，這樣整個app都可以存取到Posts。</p><pre><code>git commit -m &quot;Added a posts collection&quot;</code></pre><h3 id="Collection的性質"><a href="#Collection的性質" class="headerlink" title="Collection的性質"></a>Collection的性質</h3><p>On the server, the collection has the job of talking to the Mongo database, and reading and writing any changes. In this sense, it can be compared to a standard database library. On the client however, the collection is a secure copy of a subset of the real, canonical collection. The client-side collection is constantly and (mostly) transparently kept up to date with that subset in real-time.</p><h2 id="Server-Side-Collection"><a href="#Server-Side-Collection" class="headerlink" title="Server-Side Collection"></a>Server-Side Collection</h2><p>On the server, the collection acts as an API into your Mongo database.</p><p>##Client-Side Collection<br>client side Mongo稱為MiniMongo，如字面所述，它不支援所有的Mongo的特徵。<br>###三個理解重點</p><ol><li>we talk about a client-side collections being a “cache”, we mean it in the sense that it contains a subset of your data, and offers very quick access to this data.</li><li>In general, a client side collection consists of a subset of all the documents stored in the Mongo collection</li><li>Secondly, those documents are stored in browser memory, which means that accessing them is basically instantaneous.</li></ol><blockquote><p>Mongo on Meteor.com<br>當你的app deploy上meteor之後，輸入<code>meteor mongo myApp</code>就可以存取網路上的mongodb。</p></blockquote><p>#正式開始</p><ol><li><p>輸入meteor reset重置資料庫。確保資料庫是乾淨的。</p></li><li><p>建立fixture.js</p><pre><code>server/fixtures.js</code></pre><pre><code class="js">if (Posts.find().count() === 0) &#123;   Posts.insert(&#123;     title: &#39;Introducing Telescope&#39;,     author: &#39;Sacha Greif&#39;,     url: &#39;http://sachagreif.com/introducing-telescope/&#39;   &#125;);   Posts.insert(&#123;     title: &#39;Meteor&#39;,     author: &#39;Tom Coleman&#39;, url: &#39;http://meteor.com&#39;   &#125;);   Posts.insert(&#123;     title: &#39;The Meteor Book&#39;, author: &#39;Tom Coleman&#39;,     url: &#39;http://themeteorbook.com&#39;   &#125;);&#125;</code></pre></li><li><p>Commit 4-2<br>Added data to the posts collection.</p></li><li><p>修改posts_list.js</p><pre><code>client/views/posts/posts_list.js</code></pre><pre><code class="js">Template.postsList.helpers(&#123; posts: function() &#123;     return Posts.find();   &#125;&#125;);</code></pre></li><li><p>Commit 4-3</p><pre><code>git commit -m &quot;Wired collection into postsList template.&quot;</code></pre><blockquote><p>Inspecting DOM Changes這邊看不太懂</p></blockquote></li><li><p> 刪除autopulish這個package</p><pre><code>$ meteor remove autopublish</code></pre></li><li><p>新增publication.js</p><pre><code>server/publications.js</code></pre><pre><code class="js">Meteor.publish(&#39;posts&#39;, function() &#123;       return Posts.find();&#125;);</code></pre></li><li><p>在main.js中subscribe posts</p><pre><code>client/main.js</code></pre><pre><code class="js">Meteor.subscribe(&#39;posts&#39;);</code></pre></li><li><p>commit 4-4<br>Removed autopublich and set up a basic publication.</p></li></ol><p>還是不懂在幹嘛？ 接著要解釋的就是publication與subscription</p><h1 id="4-5-Publications-and-Subscriptions"><a href="#4-5-Publications-and-Subscriptions" class="headerlink" title="4.5 Publications and Subscriptions"></a>4.5 Publications and Subscriptions</h1><h2 id="Rails-App的做法"><a href="#Rails-App的做法" class="headerlink" title="Rails App的做法"></a>Rails App的做法</h2><ol><li>當user造訪你的網頁，client送出一個request給server。</li><li>你的app的第一個工作是找到user所需要的資料。</li><li>當找到以後，server會把資料轉換成人類可讀的html。</li><li>最後server會將html送給瀏覽器，也就是client。</li><li>這樣一個動作就完成了，你的app繼續等待下一個request。</li></ol><h2 id="Meteor的做法"><a href="#Meteor的做法" class="headerlink" title="Meteor的做法"></a>Meteor的做法</h2><p>根據剛剛的介紹可以了解到Rails app只能在server處理資訊。而Meteor在Client也就是你的瀏覽器中就可以處理資訊。<br>這就像書店的店員不只是針對你的需求把書給你，而且他還跟著你回家把書的內容讀給妳聽。</p><h3 id="This-has-two-big-implications"><a href="#This-has-two-big-implications" class="headerlink" title="This has two big implications:"></a>This has two big implications:</h3><p>first, instead of sending HTML code to the client, a Meteor app will send the actual, raw data and let the client deal with it (data on the wire).<br>Second, you’ll be able to access that data instantaneously without having to wait for a round-trip to the server (latency compensation).</p><h2 id="Publishing"><a href="#Publishing" class="headerlink" title="Publishing"></a>Publishing</h2><p>We’ll need a way to tell Meteor which subset of data can be sent to the client, and we’ll accomplish this through a publication.</p><h2 id="Whats-is-DDP"><a href="#Whats-is-DDP" class="headerlink" title="Whats is DDP?"></a>Whats is DDP?</h2><p>這種利用publication/subscription系統的protocol，就稱為Distributed Data Protocol。</p><h2 id="Subscribing"><a href="#Subscribing" class="headerlink" title="Subscribing"></a>Subscribing</h2><h3 id="how-you-make-a-meteor-app-scalable-in-client-side"><a href="#how-you-make-a-meteor-app-scalable-in-client-side" class="headerlink" title="how you make a meteor app scalable in client-side"></a>how you make a meteor app scalable in client-side</h3><ol><li>修改publication(server)</li></ol><pre><code class="js">Meteor.publish(&#39;posts&#39;, function(author) &#123;          return Posts.find(&#123;flagged: false, author: author&#125;);&#125;);</code></pre><ol start="2"><li>在client subscribe</li></ol><pre><code class="js">// on the clientMeteor.subscribe(&#39;posts&#39;, &#39;bob-smith&#39;);</code></pre><h2 id="Autopulish"><a href="#Autopulish" class="headerlink" title="Autopulish"></a>Autopulish</h2><p>Automatically mirroring all data from the server on the client</p><h3 id="實際運作"><a href="#實際運作" class="headerlink" title="實際運作"></a>實際運作</h3><p>如果你去看<a href="http://docs.meteor.com/#publishandsubscribe">Publish and subscribe</a>的說明，你會發現實際使用的方法並不是那麼的簡潔，那是因為meteor提供了一個方變的method叫做_publishCursor()。當你在return一個cursor的時候，就會使用到它（例如：  return Posts.find({flagged: false, author: author});）。</p><h3 id="publishCursor-做了哪些事？"><a href="#publishCursor-做了哪些事？" class="headerlink" title="_publishCursor() 做了哪些事？"></a>_publishCursor() 做了哪些事？</h3><ul><li>It checks the name of the server-side collection.</li><li>It pulls all matching documents from the cursor and sends it into a client-side collection of the same name. (It uses .added() to do this).</li><li>Whenever a document is added, removed or changed, it sends those changes down to the client-side collection. (It uses .observe() on the cursor and .added(), .changed() and removed() to do this).</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Meteor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Dinner - 好玩又有效的 CSS 教學</title>
      <link href="/2014/08/03/old%20posts/2014-08-03-css-dinner/"/>
      <url>/2014/08/03/old%20posts/2014-08-03-css-dinner/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Dinner"><a href="#CSS-Dinner" class="headerlink" title="CSS Dinner"></a>CSS Dinner</h1><p><a href="http://flukeout.github.io/">CSS Diner</a> 是一個很有趣的小遊戲，你必須使用css來選取桌上扭動的物體，<br>全部26關玩完對 CSS selector 想忘也忘不了。<br>css selector 在 javascript 或是 jQeury 也會用到，不熟的話到時候還是需要花額外的時間加強。<br>有神人整理成一系列好玩練習效果又顯著的教學，好教學不玩嘛？XD</p><h2 id="學習目標"><a href="#學習目標" class="headerlink" title="學習目標"></a>學習目標</h2><ol><li>Univeral, Type selector, Class selector, ID selector的用法。</li><li>了解<code>ul &gt; ui &#123;&#125;</code>和<code>ul ui&#123;&#125;</code>的不同</li><li>了解A+B與A~B的不同。</li><li>了解pasudo selector的用法。</li></ol><h2 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h2><h3 id="1-A-B-與-A-B-的不同"><a href="#1-A-B-與-A-B-的不同" class="headerlink" title="1. A+B 與 A~B 的不同"></a>1. <code>A+B</code> 與 <code>A~B</code> 的不同</h3><p>A+B 代表與 A 相鄰的 B。A~B 代表與 A 同一層的 B 都選。</p><h3 id="2-Pseudo-Class-Selector"><a href="#2-Pseudo-Class-Selector" class="headerlink" title="2. Pseudo Class Selector"></a>2. Pseudo Class Selector</h3><p><a href="http://css-tricks.com/pseudo-class-selectors/">Meet the Pseudo  Class Selectors</a></p><h2 id="關卡筆記"><a href="#關卡筆記" class="headerlink" title="關卡筆記"></a>關卡筆記</h2><h3 id="第12關-Adjacent-sibling-combinator"><a href="#第12關-Adjacent-sibling-combinator" class="headerlink" title="第12關 Adjacent sibling combinator"></a>第12關 Adjacent sibling combinator</h3><p>卡了很久，想說 <code>div+apple</code> 應該沒錯，不然 <code>.table+apple</code> 應該萬無一失。<br>忽略了在桌子上面有其他的蘋果。<br>最後使用了 <code>plate+apple</code> 解決了這套題目。</p><h3 id="第13關-General-sibling-combinator"><a href="#第13關-General-sibling-combinator" class="headerlink" title="第13關 General sibling combinator"></a>第13關 General sibling combinator</h3><p><code>A ~ B</code> will select all B that follow a A</p><h3 id="第17關-Last-Child-Pseudo-selector"><a href="#第17關-Last-Child-Pseudo-selector" class="headerlink" title="第17關 Last Child Pseudo-selector"></a>第17關 Last Child Pseudo-selector</h3><p>這關要用last-child來抓出需要的兩個元素，不可以使用其他的方式。<br>div plate apple:last-child, div pickle:last-child</p><h3 id="破關心得"><a href="#破關心得" class="headerlink" title="破關心得"></a>破關心得</h3><p>全部做完後，發現他每一題都沒有重複，有些selector感覺上不太用的到，但是確實很熟練了selector的作法。<br>有些容易混淆的東西一定要搞清楚，並且記熟。</p><h2 id="參考的小抄"><a href="#參考的小抄" class="headerlink" title="參考的小抄"></a>參考的小抄</h2><p><a href="http://css-tricks.com/child-and-sibling-selectors/">Child and Sibling Selectors</a><br><a href="http://bombertw.logdown.com/posts/2014/04/18/bomber-day-8-introduction-to-css">CSS筆記</a><br><a href="http://www.w3schools.com/cssref/sel_gen_sibling.asp">W3Cschool A~B</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Roadtrip 3 Closure</title>
      <link href="/2014/07/29/old%20posts/2014-07-29-javascript-roadtrip-closure/"/>
      <url>/2014/07/29/old%20posts/2014-07-29-javascript-roadtrip-closure/</url>
      
        <content type="html"><![CDATA[<p>這一章講的是closure，很奇妙的東西。<br><a href="http://www.cnblogs.com/xdp-gacl/p/3703876.html">JavaScript学习总结(十六)——Javascript闭包（Closure）</a><br>這個網站寫的不錯，看來以後要拜讀一下他的文章。</p><h2 id="2-1-影片"><a href="#2-1-影片" class="headerlink" title="2.1 影片"></a>2.1 影片</h2><pre><code class="js">￼￼function buildCoveTicketMaker( transport ) &#123;         return function ( name ) &#123;alert(&quot;Here is your transportation ticket via the &quot; + transport + &quot;.\n&quot; +      &quot;Welcome to the Cold Closures Cove, &quot; + name + &quot;!&quot;);￼￼&#125; &#125;```￼```js￼var getSubmarineTicket = buildCoveTicketMaker(&quot;Submarine&quot;);var getBattleshipTicket = buildCoveTicketMaker(&quot;Battleship&quot;);var getGiantSeagullTicket = buildCoveTicketMaker(&quot;Giant Seagull&quot;);</code></pre><p>第一次呼叫的時候先初始化transport，<br>因為回傳的是一個function，這時候getSubmarineTicket儲存的已經是內部的inner function，又稱為closure。<br>下次可以直接使用closure這個內部函式，如下</p><pre><code class="js￼">getSubmarineTicket(&quot;Mario&quot;);￼￼￼￼￼￼getBattleshipTicket(&quot;Luigi&quot;);getGiantSeagullTicket(&quot;Bowser&quot;);```￼即會顯示出![Screen Shot 2014-07-29 at 13.19.36.png](http://user-image.logdown.io/user/6619/blog/6590/post/211815/AprhkyhjSF6LexQr6iGl_Screen%20Shot%202014-07-29%20at%2013.19.36.png)## 2.8呼叫closure顯示訊息。## 2.11將location存進陣列中。這題滿值得做的，能夠利用closure來儲存陣列，給五顆星。## 2.12比想像中的複雜，先記錄起來。```jsfunction warningMaker( obstacle )&#123;  var count = 0;  var zones = [];  return function ( number, location ) &#123;    count++;    var isThere = false;    for (var ii = 0;ii&lt;zones.length;ii++)&#123;      if(zones[ii][0]==location)&#123;        zones[ii][1]=zones[ii][1]+number;        isThere = true;        break;      &#125;&#125;      if (!isThere)&#123;        zones.push([location,number]);      &#125;    var list = &quot;&quot;;    for(var i = 0; i&lt;zones.length; i++)&#123;        list = list + &quot;\n&quot; + zones[i][0] +          &quot; (&quot; +zones[i][1]+&quot;)&quot;;    &#125;    alert(&quot;Beware! There have been &quot; +          obstacle +          &quot; sightings in the Cove today!\n&quot; +          number +          &quot; &quot; +          obstacle +          &quot;(s) spotted at the &quot; +          location +          &quot;!\n&quot; +          &quot;This is Alert #&quot; +          count +          &quot; today for &quot; +          obstacle +          &quot; danger.\n&quot; +          &quot;Current danger zones are: &quot; +          list         );  &#125;;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meteor專用的Sublime套件：TernJs</title>
      <link href="/2014/07/23/old%20posts/2014-07-23-tools-meteor-sublime-suites/"/>
      <url>/2014/07/23/old%20posts/2014-07-23-tools-meteor-sublime-suites/</url>
      
        <content type="html"><![CDATA[<p>終於安裝好這個Sublime套件了，安裝上有點麻煩，步驟很多，每次用的時候都要設定一下才能用。不過裝好之後爽度還是挺高的</p><ul><li><a href="https://www.youtube.com/watch?v=5cAHxpNEHTc">demo影片</a></li><li><a href="https://github.com/Slava/tern-meteor">github</a></li></ul><h1 id="簡單記錄一下安裝過程"><a href="#簡單記錄一下安裝過程" class="headerlink" title="簡單記錄一下安裝過程"></a>簡單記錄一下安裝過程</h1><ol><li>從finder開啟~/Library/Application Support/Sublime Text 3/Packages資料夾</li><li>把github上的meteor.js丟進這個資料夾中的TernJS/ternjs/plugin，如果沒有這三個資料夾，就創一個。</li><li>打開sublime &gt; project &gt; save project as &gt; 儲存project</li><li>sublime &gt; project &gt; edit project &gt; 修改json檔案成（以官網為準）</li></ol><pre><code class="json">&#123;      &quot;folders&quot;:      [               ... don&#39;t touch this part, leave it as it was ...      ],      // add this! ternjs object      &quot;ternjs&quot;: &#123;        &quot;libs&quot;: [&quot;browser&quot;, &quot;underscore&quot;, &quot;jquery&quot;],        &quot;plugins&quot;: &#123;          &quot;meteor&quot;: &#123;&#125;        &#125;      &#125;&#125;</code></pre><h2 id="以後開發-meteor-專案時"><a href="#以後開發-meteor-專案時" class="headerlink" title="以後開發 meteor 專案時"></a>以後開發 meteor 專案時</h2><ol><li>先 open sublime-project</li><li>把要開發的 meteor 專案的檔案全部加進來</li><li>即可開始使用強大的 ternjs 套件</li></ol><p>註：不然英打太慢關鍵字又記不清楚頭好暈阿＠＠</p>]]></content>
      
      
      
        <tags>
            
            <tag> Sublime </tag>
            
            <tag> Text Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap 學習筆記</title>
      <link href="/2014/07/23/old%20posts/2014-07-23-basic-bootstrap-practice/"/>
      <url>/2014/07/23/old%20posts/2014-07-23-basic-bootstrap-practice/</url>
      
        <content type="html"><![CDATA[<p>sublime的套件安裝與使用方式請看<a href="http://bombertw.logdown.com/posts/2014/07/17/web-tools-sublime-3">這裡</a></p><h2 id="學習-Bootstrap-的幾個重點"><a href="#學習-Bootstrap-的幾個重點" class="headerlink" title="學習 Bootstrap 的幾個重點"></a>學習 Bootstrap 的幾個重點</h2><ol><li>學會使用grid system切版。</li><li>找相似的範例來練習版面。</li><li>練習熟練到可以直接打指令叫出想要的元件。</li><li>懂得微調成自己想要的。</li><li>了解如何傳值給後端(selector)。</li><li>多練習各種不同的版面</li><li>儲存成gist</li></ol><p>最後練習 build 各種版面來熟練 bootstrap。</p><p>學習原則：相同的東西、學一遍就好，然後一個目標一個目標去扎實的達成，相信是最快的方式。<br>所以直接從3開始學習，看的是</p><h2 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h2><ul><li><a href="http://kimix.name/bootstrap-rwd-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E7%90%86/">Bootstrap RWD 使用方法及原理</a></li><li><a href="http://limestrap.blogspot.tw/">limestrap</a></li><li><a href="https://www.youtube.com/watch?v=VWp6J7Q59KE">Sublimte Text 3 + Bootstrap Snippets - Create simple login form</a><br>一個簡單的範例</li><li><a href="http://getbootstrap.com/">bootstrap 3 官網</a></li><li><a href="https://coders-guide.com/course.php?c=bootstrap-3">Coder’s Guide</a><br>一套很不錯的bootstrap教學</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.youtube.com/watch?v=u9CsdaFBw6o&list=PLK6iOan9XxVmDTKUWj3i3T3MoJn5j3eEO&index=4">Bootstrap 3 Tutorial 4 - Using Bootsnipp to Copy &amp; Paste HTML5 Web Elements</a><br><a href="http://bootsnipp.com/">Bootsnipp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 3 套件整理</title>
      <link href="/2014/07/17/old%20posts/2014-07-17-web-tools-sublime-3/"/>
      <url>/2014/07/17/old%20posts/2014-07-17-web-tools-sublime-3/</url>
      
        <content type="html"><![CDATA[<p>學習網頁一直以來有個困擾，打括號真的是慢到不行，原來sublime這個文字編輯器有許多方便的套件可以用。用簡單的指令就可以架構出一個網站。</p><ol><li><p>先安裝必備的套件管理工具</p></li><li><p>ConvertToUTF8 ： 解決 Sublime Text 3 預設不支援 Big5 與其他 CJK 編碼的問題</p></li><li><p>Emmet: 前端工程師必備的擴充套件 ( 參見 <a href="http://emmet.io/">http://emmet.io</a> 官網 )<br>傳說中的 Zen Coding 就是這一套。</p></li><li><p>AdvancedNewFile<br>快速建立檔案的套件，只要輸入<code>Option+Command+n</code>就可以快速建立檔案。<br><a href="https://github.com/skuroda/Sublime-AdvancedNewFile/blob/master/README.md">官方使用說明</a></p></li><li><p>BootStrap 3 Snippets</p></li><li><p>HTML5<br>Html5的Snippets</p></li><li><p>SublimeLinter<br>可以檢查錯誤的套件<br><a href="https://www.youtube.com/watch?v=Yfy1gkNjjsU">demo影片</a></p></li><li><p>GIST<br><a href="https://www.youtube.com/watch?v=jS6MNwPYa9A#t=325">影片</a></p></li><li><p>Sublime-Better-Completion<br><a href="https://github.com/Pleasurazy/Sublime-Better-Completion">github</a><br>用clone的方式還是靠譜的多</p></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://limestrap.blogspot.in/2013/09/11-configure-sublime-text-2.html">1.1 Configure Sublime Text 2 for BootStrap &amp; PHP</a><br>一整系列使用sublime來快速撰寫bootstrap的教學，這篇是安裝套件篇。</p><p><a href="http://blog.miniasp.com/post/2014/01/07/Useful-tool-Sublime-Text-3-Quick-Start.aspx">Sublime Text 3 新手上路：必要的安裝、設定與基本使用教學</a></p><p><a href="http://blog.lyhdev.com/2013/10/sublime-text-snippets-bootstrap-3-html.html">使用 Sublime Text Snippets 快速編輯 Bootstrap 3 的 HTML 代碼</a></p><p><a href="https://www.youtube.com/watch?v=8n923UBjV9w">Sublime Text Tutorials #17 - Write HTML Quickly with Emmet</a><br>一套完整的sublime教學，我只挑了html的部份先看，以後再針對需要學習。教學中使用的是Emmet這個套件。下面連結有比較詳細的安裝教學。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Sublime </tag>
            
            <tag> Text Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - 3週不間斷學習演算法之心得</title>
      <link href="/2014/06/16/old%20posts/2014-06-16-what-i-learned-after-learning-algorithms/"/>
      <url>/2014/06/16/old%20posts/2014-06-16-what-i-learned-after-learning-algorithms/</url>
      
        <content type="html"><![CDATA[<p>這個禮拜花了大量的時間研讀演算法，紀錄下學習過程與心得。</p><h3 id="清點在這一週中學到了什麼"><a href="#清點在這一週中學到了什麼" class="headerlink" title="清點在這一週中學到了什麼"></a>清點在這一週中學到了什麼</h3><ol><li>了解演算法所解決的問題(Problem)</li><li>了解各個演算法的解決問題策略與方式。</li><li>部分的演算法我能夠以Java來實現。</li><li>了解了足夠數量的演算法。</li></ol><h3 id="學習演算法的三個階段"><a href="#學習演算法的三個階段" class="headerlink" title="學習演算法的三個階段"></a>學習演算法的三個階段</h3><ol><li>看的懂演算法，並且能用真正的程式語言實現出來。</li><li>了解演算法，可以利用演算法的特性解決教科書以外的問題。</li><li>設計演算法，這部分需要進修另一門課 - 演算法設計。工作或研究上有需求才進修至此階段。</li></ol><p>一般學習上到第二個階段就足夠了。也就是說有兩個大方向，一是實現演算法，二是以課本上的演算法為基礎學習其他的演算法。這樣一來就不難聯想，<strong>如果我要比別人有優勢，我要：</strong></p><ol><li>了解每個演算法所解決的問題。</li><li>熟練實現演算法的過程。</li><li>了解除了課本上基礎演算法的變形，讓演算法可以適用在更多的場景。</li><li>演算法會用到許多的資料結構，學習演算法的同時可以幫助了解資料結構的特性。</li></ol><p>沒有學習過演算法的人可能需要花一些時間了解這個演算法怎麼使用，而我可以快速並且更正確的使用它，減少冤枉路。演算法的變形建立於某演算法的特性之上，因此學習演算法的變形可以更了解演算法的特性。</p><h3 id="實現-implement-的方式"><a href="#實現-implement-的方式" class="headerlink" title="實現(implement)的方式"></a>實現(implement)的方式</h3><p>implement的方式以課本的為主比較好，等到實作出來了以後再看看別人怎麼寫，不然網路上的寫法其實非常多種，令人眼花撩亂，要找到一個符合自己口味的並不是太容易。幸運的找到了一個符合調性的blog也有可能作者用不同的寫法來寫，學習上並不特別效率。自己實作是比較理想的做法，訓練<strong>把自己的想法轉變為程式的能力。</strong>是個不錯的努力方向。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - 時間複雜度整理</title>
      <link href="/2014/06/15/old%20posts/2014-06-15-algorithm-notes-time-complexity/"/>
      <url>/2014/06/15/old%20posts/2014-06-15-algorithm-notes-time-complexity/</url>
      
        <content type="html"><![CDATA[<p>以下資料摘自Ting的小筆記</p><p>###Sorting Algorithms<br><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205697/YsOupGDzSjSsir8T9rcD_1362037892-2193125962.png" alt="1362037892-2193125962.png"></p><p>###Graph Algorithms<br>|      | Graph algorithm       　 | 時間複雜度   | strategy | negative weight |<br>| —- | ———————— | ———— | ——– | ————— |<br>| Ch22 | BFS(Breath-First Search) | O(V+E)       | greedy   |                 |<br>|      | DFS(Depth-First Search)  | O(V+E)       | greedy   |                 |<br>| Ch23 | Kruskal                  | O(E lgV)     | greedy   | allowed         |<br>|      | Prim                     | O(E+V lgV)   | greedy   | allowed         |<br>| Ch24 | Bellman-Ford             | O(VE)        | DP       | allowed         |<br>|      | Dijkstra’s               | O(E+V lgV)   | greedy   | not allowed     |<br>| Ch25 | Floyd-Warchall           | O(V^3)       | DP       | allowed         |<br>|      | Johnson’s                | O(VE+V^2lgV) | gd + DP  | allowed         |</p><p>###參考資料<br><a href="http://tingtseng.pixnet.net/blog/post/39924871-algorithm-time-complexity-%E6%BC%94%E7%AE%97%E6%B3%95%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E6%95%B4%E7%90%86">Ting的小筆記 - Algorithm time complexity 演算法時間複雜度整理</a><br><a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Sorting%20Algorithms/sorting.html">Sorting Introduction</a><br><a href="http://www.cprogramming.com/tutorial/computersciencetheory/sortcomp.html">Sorting Comparison</a><br><a href="http://emn178.pixnet.net/blog/post/93779892-%E6%B0%A3%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95%28bubble-sort%29">小殘 - Bubble sort</a><br><a href="http://spaces.isu.edu.tw/upload/18833/3/web/sorting.htm">排序(sorting)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming cheatsheet</title>
      <link href="/2014/06/14/old%20posts/2014-06-14-dymamic-programming-cheatsheet/"/>
      <url>/2014/06/14/old%20posts/2014-06-14-dymamic-programming-cheatsheet/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem-1-A-manufacturing-problem-to-find-the-fast-way-through-a-factory"><a href="#Problem-1-A-manufacturing-problem-to-find-the-fast-way-through-a-factory" class="headerlink" title="Problem 1:A manufacturing problem to find the fast way through a factory"></a>Problem 1:A manufacturing problem to find the fast way through a factory</h2><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/206136/3p1qeGZRqOow47xZp4kQ_2014-06-15_030907.jpg" alt="2014-06-15_030907.jpg"></p><h2 id="Problem-2-The-matrix-chain-multiplication-problem"><a href="#Problem-2-The-matrix-chain-multiplication-problem" class="headerlink" title="Problem 2:The matrix-chain multiplication problem"></a>Problem 2:The matrix-chain multiplication problem</h2><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/206136/vuWGWtHSzCid5oZAdR4A_2014-06-14_000158.jpg" alt="2014-06-14_000158.jpg"></p><h2 id="Problem-3-LCS"><a href="#Problem-3-LCS" class="headerlink" title="Problem 3:LCS"></a>Problem 3:LCS</h2><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/206136/Tck4uLmeR4ONR0P8PFY0_2014-06-14_000306.jpg" alt="2014-06-14_000306.jpg"></p><h4 id="LCS程式實作"><a href="#LCS程式實作" class="headerlink" title="LCS程式實作"></a>LCS程式實作</h4><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/206136/AxfyKWwTTUunsDqifBfI_2014-06-15_184126.jpg" alt="2014-06-15_184126.jpg"></p><h2 id="Problem-4-Floyd’s-algorithm"><a href="#Problem-4-Floyd’s-algorithm" class="headerlink" title="Problem 4:Floyd’s algorithm"></a>Problem 4:Floyd’s algorithm</h2><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/206136/C2VwuLVwQTiISQ2pXGUx_2014-06-14_001328.jpg" alt="2014-06-14_001328.jpg"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.google.com.tw/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CB0QFjAA&url=http://sjchen.im.nuu.edu.tw/Algorithms_final.html&ei=TcaeU4LiLNjr8AX4i4CIDg&usg=AFQjCNHLdz37yeBzT-c_F200evIh4mPCpA">杰哥數位教室–演算法課程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Quick sort</title>
      <link href="/2014/06/12/old%20posts/2014-06-12-algorithm-notes-quick-sort/"/>
      <url>/2014/06/12/old%20posts/2014-06-12-algorithm-notes-quick-sort/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>從數列中挑選一個pivot，大於pivot放在右邊，小於pivot放在左邊，重複循環最後得出的陣列即為排序結果。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>(請搭配虛擬碼的QUICKSORT主程式一起服用)</p><ol><li>選擇陣列中的一個元素作為pivot</li><li>比pivot小的都移到pivot的左邊，比pivot大的都移到pivot的右邊。</li><li>對pivot左邊和右邊的兩個陣列分別再做一次QUICKSORT()，形成一個遞迴呼叫。<br><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205864/WGqApmAOSfylxMIEmhql_quicksort.jpg" alt="quicksort.jpg"></li></ol><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><pre><code>QUICKSORT(A,p,r)1  if p &lt; r2     q = PARTITION(A,p,r)3     QUICKSORT(A,p,q-1)4     QUICKSORT(A,q+1,r)</code></pre><p>PARTITION()這個副程式的作用是將比pivot小的數放在pivot左邊，比pivot大的放在pivot的右邊。最後回傳pivot所在的位置存到變數q裡面，方便下一次quicksort的執行。</p><pre><code>PARTITION(A,p,r)1  x = A[r]2  i = p - 13  for j = p to r-14     if A[j] &lt;= x5        i = i + 16        exchange A[i] with A[j]7  exchange A[i+1] with A[r]8  return i+1</code></pre><h3 id="Java實現"><a href="#Java實現" class="headerlink" title="Java實現"></a>Java實現</h3><pre><code class="java">package quicksort;/** * * @author Steven */public class QuickSort  &#123;private float[] arr ;  public void sort(float[] array) &#123;    this.arr = array;    quickSort( 0 , array.length - 1);  &#125; public void quickSort(int left, int right) &#123;      int pivot = partition(left, right);      if (left &lt; pivot - 1)            quickSort(left, pivot - 1);      else if (pivot &lt; right)            quickSort( pivot, right); &#125; public void findSmallest(float arr[], int k)&#123;     quickSort( 0 , arr.length - 1, k); &#125; private  void quickSort( int lefe, int right,int k)&#123;     int pivot = partition(lefe, right);     if(pivot == k-1)&#123;         System.out.printf(&quot;第%d小數為%.2f\n&quot;, k, arr[pivot]);     &#125;     else if (pivot &gt; k-1)         quickSort( lefe, pivot-1 , k);     else         quickSort( pivot, right, k); &#125;  private int partition(int left, int right)  &#123;      int i = left, j = right;      float tmp;      float pivot = arr[(left + right) / 2];      while (i &lt;= j) &#123;            while (arr[i] &lt; pivot)                  i++;            while (arr[j] &gt; pivot)                  j--;            if (i &lt;= j) &#123;                  tmp = arr[i];                  arr[i] = arr[j];                  arr[j] = tmp;                  i++;                  j--;            &#125;      &#125;;      return i;   &#125;&#125;</code></pre><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://emn178.pixnet.net/blog/post/88613503-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%B3%95(quick-sort)">小殘 - Quick Sort</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Merge sort(ch2.3)</title>
      <link href="/2014/06/12/old%20posts/2014-06-12-algorithm-notes-merge-sort/"/>
      <url>/2014/06/12/old%20posts/2014-06-12-algorithm-notes-merge-sort/</url>
      
        <content type="html"><![CDATA[<p>#原理<br>每跑過一次merge-sort主程式都會把陣列分割成兩半。直到分成每個元素分離之後，再開始兩兩的排序並合併。合併到最後即為排序好的結果。<br><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205863/zNf6ZUBgTYeikWTg5zfb_Merge_sort_algorithm_diagram.svg.png" alt="Merge_sort_algorithm_diagram.svg.png"></p><p>#程式碼說明<br>MERGE-SORT主程式負責分割陣列，等到分割到不能分割，也就是每個陣列剩下一個元素的時候，改由MERGE副程式兩兩進行合併，合併的時候加以排序，等到全部合併成一個陣列之後，剛好就排序完成了。</p><pre><code>MERGE-SORT(A,p,r)1  if p &lt; r2     q = (p+r)/23     MERGE-SORT(A,p,q)4     MERGE-SORT(A,q+1,r)5     MERGE(A,p,q,r)</code></pre><pre><code class="psuedocode">MERGE(A,p,q,r)1  n1 = q - p + 12  n2 = r - q3  let L[1..n1+1] and R[1..n2+1] be new arrays4  for i = 1 to n15     L[i] = A[p+i-1]6  for j = 1 to n27     R[j] = A[q+j]8  L[n1+1] = INF9  R[n1+1] = INF10 i = 111 j = 112 for k = p to r13    if L[i] &lt;= R[j]14       A[k] = L[i]15       i = i + 116    else17       A[k] = R[j]18       j = j + 1</code></pre><p>#Java程式碼實作<br>使用下列網站的範例做說明<br><a href="http://www.vogella.com/tutorials/JavaAlgorithmsMergesort/article.html">Mergesort in Java - Tutorial - Lars Vogel</a></p><pre><code class="java">package de.vogella.algorithms.sort.mergesort;public class Mergesort &#123;  private int[] numbers;  private int[] helper;  private int number;  public void sort(int[] values) &#123;    this.numbers = values;    number = values.length;    this.helper = new int[number];    mergesort(0, number - 1);  &#125;  private void mergesort(int low, int high) &#123;    // check if low is smaller then high, if not then the array is sorted    if (low &lt; high) &#123;      int middle = low + (high - low) / 2;      mergesort(low, middle);      mergesort(middle + 1, high);      // Combine them both      merge(low, middle, high);    &#125;  &#125;  private void merge(int low, int middle, int high) &#123;    // Copy both parts into the helper array    for (int i = low; i &lt;= high; i++) &#123;      helper[i] = numbers[i];    &#125;    int i = low;    int j = middle + 1;    int k = low;    // Copy the smallest values from either the left or the right side back    // to the original array    while (i &lt;= middle &amp;&amp; j &lt;= high) &#123;      if (helper[i] &lt;= helper[j]) &#123;        numbers[k] = helper[i];        i++;      &#125; else &#123;        numbers[k] = helper[j];        j++;      &#125;      k++;    &#125;    // Copy the rest of the left side of the array into the target array    while (i &lt;= middle) &#123;      numbers[k] = helper[i];      k++;      i++;    &#125;  &#125;&#125;</code></pre><p>#參考資料<br><a href="http://blog.kuoe0.tw/posts/2013/03/06/sort-about-merge-sort">[Sort] 淺談 merge sort</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Heap sort</title>
      <link href="/2014/06/12/old%20posts/2014-06-12-algorithm-notes-heap-sort/"/>
      <url>/2014/06/12/old%20posts/2014-06-12-algorithm-notes-heap-sort/</url>
      
        <content type="html"><![CDATA[<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>heap可看作是幾乎完整的二元樹的陣列。<br><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205838/SpOCGl2zTWCZWgroz4ow_%E5%9C%96%E7%89%871.png" alt="圖片1.png"><br><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205838/AyITvrIOS4uyIiqC1OIn_%E5%9C%96%E7%89%872.png" alt="圖片2.png"></p><pre><code>PARENT(i)return i/2LEFT(i)return 2iRIGHT(i)return 2i+1</code></pre><h2 id="Max-heap與Min-heap"><a href="#Max-heap與Min-heap" class="headerlink" title="Max heap與Min heap"></a>Max heap與Min heap</h2><p>Max heap最大的元素在根部<br>Min heap最小的元素在根部</p><p>heapsort用的是Max heap<br>而priority queue用的則是Min heap，每次取出的會是最小的值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Bellman-Ford Algorithm(ch24.1)</title>
      <link href="/2014/06/11/old%20posts/2014-06-11-algorithm-notes-bellman-ford-algorithmch/"/>
      <url>/2014/06/11/old%20posts/2014-06-11-algorithm-notes-bellman-ford-algorithmch/</url>
      
        <content type="html"><![CDATA[<h3 id="BELLMAN-FORD-Algorithm"><a href="#BELLMAN-FORD-Algorithm" class="headerlink" title="BELLMAN-FORD Algorithm"></a>BELLMAN-FORD Algorithm</h3><p>BELLMAN-FORD演算法是個很容易撰寫的演算法。而且他可以偵測負重量循環(negative weight cycle)。</p><pre><code>BELLMAN-FORD(G,w,s)1.  INITIALIZE-SINGLE-SOURCE(G,s)2.  for i = 1 to |G.V|-13.     for each edge (u,v) ∈ G.E4.        RELAX(u,v,w)5.  for each edge (u,v) ∈ G.E6.     if v.d &gt; u.d + w(u,v)7.        return FALSE8.  return TRUE</code></pre><p>第2-4行的for迴圈執行Graph所有的邊的數量-1次，對每個邊做<a href="http://logdown.com/account/posts/205707-algorithm-notes-bellman-ford-algorithm/preview">鬆弛</a>一次。<br>第5-8行檢查是否有負重量循環，回傳TRUE的話代表有負重量循環，換句話說正常情況下會回傳FALSE。</p><pre><code>INITIALIZE-SINGLE-SOURCE(G,s)1.  for each vertex v ∈ G.V2.     v.d = ∞3.     v.pi = NIL4.  s.d = 0</code></pre><pre><code>RELAX(u,v,w)1.  if v.d &gt; u.d + w(u,v)2.     v.d = u.d + w(u,v)3.     v.pi = u</code></pre><h3 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><p>Initialize d’s, π’s, and set s.d = 0<br>⇒ O(V)<br>Loop |V|-1 times through all edges checking the relaxation condition to compute minimum distances<br>⇒ (|V|-1) O(E) = O(VE)<br>Loop through all edges checking for negative weight cycles which occurs if any of the relaxation conditions fail<br>⇒ O(E)<br><strong>The run time of the Bellman-Ford algorithm is O(V + VE + E) = O(VE)</strong>.</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://faculty.ycp.edu/~dbabcock/cs360/lectures/lecture21.html">Lecture 21: Single Source Shortest Paths - Bellman-Ford Algorithm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - 最短路徑問題(ch24)</title>
      <link href="/2014/06/11/old%20posts/2014-06-11-algorithm-notes-shortest-path/"/>
      <url>/2014/06/11/old%20posts/2014-06-11-algorithm-notes-shortest-path/</url>
      
        <content type="html"><![CDATA[<h3 id="最短路徑問題-Shortest-Path"><a href="#最短路徑問題-Shortest-Path" class="headerlink" title="最短路徑問題(Shortest Path)"></a>最短路徑問題(Shortest Path)</h3><p>以下說明摘錄自<a href="http://www.csie.ntnu.edu.tw/~u91029/Path.html#2">Algorithm</a><br>「最短路徑」是由起點到終點、權重最小的路徑。</p><p>最短路徑問題包括下列幾種：<br>Point-to-Point Shortest Path，點到點最短路徑：<br>給定起點、終點，求出起點到終點的最短路徑。一對一。</p><p>Single Source Shortest Paths，單源最短路徑：<br>給定起點，求出起點到圖上每一點的最短路徑。一對全。</p><p>All Pairs Shortest Paths，全點對最短路徑：<br>求出圖上所有兩點之間的最短路徑。全對全。</p><h3 id="Relaxation（鬆弛）"><a href="#Relaxation（鬆弛）" class="headerlink" title="Relaxation（鬆弛）"></a>Relaxation（鬆弛）</h3><p>最短路徑有算法一個共通的重要概念。簡單的說找到捷徑以縮短原本路徑，便是 relaxation 。</p><pre><code>INITIALIZE-SINGLE-SOURCE(G,s)1.  for each vertex v ∈ G.V2.     v.d = ∞3.     v.pi = NIL4.  s.d = 0</code></pre><p>跟之前一樣先初始化v.d與v.pi。</p><pre><code>RELAX(u,v,w)1.  if v.d &gt; u.d + w(u,v)2.     v.d = u.d + w(u,v)3.     v.pi = u</code></pre><p>透過Relaxation我們可以測試可否利用頂點u來增進v的最短路徑。如果可以就更新v.d與v.pi。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://www.csie.ntnu.edu.tw/~u91029/Path.html#2">演算法筆記-Path</a><br><a href="http://faculty.ycp.edu/~dbabcock/cs360/lectures/lecture21.html">Lecture 21: Single Source Shortest Paths - Bellman-Ford Algorithm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - DFS(Depth-First Search)(ch22.3)</title>
      <link href="/2014/06/11/old%20posts/2014-06-11-algorithm-notes-dfs-depth-first-searchch/"/>
      <url>/2014/06/11/old%20posts/2014-06-11-algorithm-notes-dfs-depth-first-searchch/</url>
      
        <content type="html"><![CDATA[<h3 id="頂點的資料結構"><a href="#頂點的資料結構" class="headerlink" title="頂點的資料結構"></a>頂點的資料結構</h3><p>DFS與BFS不同的是，在頂點上須標明兩個時間標籤(Timestamp，以頂點v為例子，就是v.d和v.f這兩個屬性。所以變成以下三個。<br>u.π - predecessor vertex.<br>u.d - timestamp when the vertex is first discovered (and is subsequently colored gray)<br>u.f - timestamp when the vertex has been fully explored (and is subsequently colored black) ⇒ u.d &lt; u.f</p><h3 id="DFS-深度優先搜尋演算法"><a href="#DFS-深度優先搜尋演算法" class="headerlink" title="DFS 深度優先搜尋演算法"></a>DFS 深度優先搜尋演算法</h3><pre><code>DFS(G)1.  for each vertex u ∈ G.V2.     u.color = WHITE3.     u.pi = NIL4.  time = 05.  for each vertex u ∈ G.V6.     if u.color == WHITE7.        DFS-VISIT(G,u)</code></pre><p>第1-4行進行初始化。把Graph中的所有點設為白色（代表未造訪的意思），先輩(predecessor)設為nill。第四行重置全域時間計數器。<br>第5-8行檢查是否要進入DFS-VISIT: 輪流檢查頂點V的adjacent list裡面的每個頂點，如果碰到白色頂點就使用DFS-VISIT來造訪它。</p><pre><code>DFS-VISIT(G,u)1.  time = time + 12.  u.d = time3.  u.color = GRAY4.  for each v ∈ G.Adj[u]5.     if v.color == WHITE6.        v.pi = u7.        DFS-VISIT(G,v)8.  u.color = BLACK9.  time = time + 110. u.f = time</code></pre><p>第1行全域變數time+1，第2行把更新過的時間存進頂點u的時間標籤d內。<br>第3行在u是白色的時候呼叫DFS-VISIT(G,u)，這時u已經造訪過了，塗成灰色。<br>第4-7行檢查鄰接u的每個頂點v，如果v是白色的就遞迴地拜訪之。<br>第8行當u的鄰接頂點v都被拜訪過後，此時把u塗成黑色。<br>第9-10行，將全域時間變數time+1並儲存到u.f。<br>每呼叫一次DFS-VISIT(G,u)就會創造一顆根為u的DFS-Tree，所以在DFS-VISIT(G,u)中的遞迴呼叫結構會構成一個DFS森林(DFS-Forest)。</p><h3 id="邊的分類"><a href="#邊的分類" class="headerlink" title="邊的分類"></a>邊的分類</h3><p>After DFS, all of the edges in the graph can then be classified as either:<br>DFS還有一個額外的功能，它可以辨別邊的種類，而邊有下列四種：</p><p><strong>Tree edge</strong> - edge in one of the depth-first trees,<br>i.e. v is first discovered from u ⇒ if v is white when (u,v) is explored, then (u,v) is a tree edge<br><strong>Back edge</strong> - non-tree edges connecting u to an ancestor of v<br>⇒ if v is gray when (u,v) is explored, then (u,v) is a back edge<br><strong>Forward edge</strong> - non-tree edges connecting u to a decendant of v<br>⇒ if v is black when (u,v) is explored and u.d &lt; v.d, then (u,v) is a forward edge<br><strong>Cross edge</strong> - all other edges<br>⇒ if v is black when (u,v) is explored and v.d &lt; u.d, then (u,v) is a cross edge</p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - BFS(Breadth-first Search)(ch22.1 22.2)</title>
      <link href="/2014/06/10/old%20posts/2014-06-10-algorithm-notes-fundamental-graphics-algorithms-and-bfs/"/>
      <url>/2014/06/10/old%20posts/2014-06-10-algorithm-notes-fundamental-graphics-algorithms-and-bfs/</url>
      
        <content type="html"><![CDATA[<h2 id="Graph-algorithm-符號說明"><a href="#Graph-algorithm-符號說明" class="headerlink" title="Graph algorithm 符號說明"></a>Graph algorithm 符號說明</h2><p>  Graph用<code>G=(V,E)</code>來表示，V是Vertex的縮寫，也就是頂點。E是Edge的縮寫，也就是邊。理解V和E分別是頂點和邊之後，就不難理解Graph是由點和邊構成，所以表示成<code>G=(V,E)</code>。從頂點u到頂點v的一個邊則用<code>(u,v)</code>來表示。</p><p>  表示Graph <code>G=(V,E)</code>有兩種方式，分別是adjacent matrix與adajecent list。比較常用adjacent list來表示graph，因為它花費的cose比較小。表示一個儲存Graph中鄰近u的所有頂點的adjacent list，用<code>Adj[u]</code>來表示。</p><h1 id="Breadth-first-Search-寬度優先搜尋"><a href="#Breadth-first-Search-寬度優先搜尋" class="headerlink" title="Breadth-first Search(寬度優先搜尋)"></a>Breadth-first Search(寬度優先搜尋)</h1><p>Minimum spanning tree中的Prim演算法和單一來源最短路徑問題中的dijkatra演算法都使用類似BFS的演算法的方法。BFS有系統的搜尋Graph <code>G=(V,E)</code>的邊來發現可以從<code>Source(起始點，之後縮寫成S)</code>到達的每個頂點。</p><h1 id="BFS-Tree的建構"><a href="#BFS-Tree的建構" class="headerlink" title="BFS-Tree的建構"></a>BFS-Tree的建構</h1><p>BFS-Tree : 產生一棵以<code>S</code>為根的BFS-Tree來包含所有可到達的頂點。</p><ol><li>最初只包含他的根，即來源頂點S。</li><li>每當掃瞄一個已經被發現的頂點u的adjacent list時，發現有白色的頂點V，麼頂點V和邊(u,v)就會被加入樹中。因為經由u才找到v，所以稱u是v的<code>predecessor</code>(先輩)或稱為parent。</li></ol><h3 id="頂點上的資料結構"><a href="#頂點上的資料結構" class="headerlink" title="頂點上的資料結構"></a>頂點上的資料結構</h3><p>每個頂點儲存了一些屬性(attribute)來幫助實現BFS-Tree。<br>u.color - 表示頂點u的顏色<br>u.π - predecessor vertex，用來紀錄頂點的先輩。<br>u.d - 儲存起點s到u點的距離</p><p>除了頂點的資料結構之外，還需要一個queue來管理灰色的頂點，代號<code>Q</code>。</p><p>BFS將頂點塗成白色、灰色與黑色來區分他們的狀態。<br><strong>白色</strong>代表未造訪過。<br><strong>黑色</strong>代表所有鄰近的頂點都被發現了。<br><strong>灰色</strong>則是介於兩者之間。<br>一個頂點在第一次造訪的時候，從白色變成灰色或黑色，稱為discover(被發現)。</p><h3 id="BFS演算法"><a href="#BFS演算法" class="headerlink" title="BFS演算法"></a>BFS演算法</h3><pre><code>BFS(G,s)1.  for each vertex u ∈ G.V - &#123;s&#125;2.     u.color == WHITE3.     u.d = INF4.     u.pi = NIL5.  s.color = GRAY6.  s.d = 07.  s.pi = NIL8.  Q = ∅9.  ENQUEUE(Q,s)10. while Q ≠ ∅11.    u = DEQUEUE(Q)12.    for each v ∈ G.Adj[u]13.       if v.color == WHITE14.          v.color = GRAY15.          v.d = u.d + 116.          v.pi = u17.          ENQUEUE(Q,v)18.    u.color = BLACK</code></pre><p>程式說明: 1-9行是程式初始化。1-4行，將在Graph中頂點塗成白色，意思是未探索過。因為所有的點還未走訪過，所以把d設為INF代表的意思是無限大。還沒有predecessor所以先設為nill，代表空的意思。5-7行設定來源頂點s為灰色，d的定義是離s的距離有多遠，s離s的距離是0，所以設為0。來源點s沒有先輩，所以設為null。8-9行把Q這個queue初始化，裡面只存放來源頂點s。</p><p>第10-18行被一個while迴圈包住，當沒有灰色頂點的時候才會跳出，也就是當Q中沒有存放任何灰色頂點，Q=null時才會結束。<br>第11-12行，從Q中取出一個灰色頂點u。把u的相鄰邊，也就是這個頂點u的adjacent list中儲存的相鄰頂點v(可能有很多個)，用for迴圈一一讀出來。13-17行，如果取出的頂點是白色，那就把它塗成灰色，標記他為造訪過的頂點。距離+1。pi先輩設為u。把v加入到Q中。最後頂點u的所有鄰近的頂點都被發現了，所以設為黑色。</p><h3 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><p><img src="http://user-image.logdown.io/user/6141/blog/6148/post/205643/fYcrGvLnQYaCdOXKppAG_2014-06-11_115545.jpg" alt="2014-06-11_115545.jpg"></p><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="http://faculty.ycp.edu/~dbabcock/cs360/lectures/lecture16.html">ycp cs 360</a><br>Introduce to algorithm</p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm - Dijkstra&#39;s Algorithm</title>
      <link href="/2014/06/10/old%20posts/2014-06-10-algorithm-notes-dijkstras-algorithm/"/>
      <url>/2014/06/10/old%20posts/2014-06-10-algorithm-notes-dijkstras-algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="資料結構"><a href="#資料結構" class="headerlink" title="資料結構"></a>資料結構</h3><p>Q是一個以d值來做鍵值的Queue，取出時會從最小的d開始取，也就是取出距離最短的頂點V。<br>S是一個頂點的集合，用來存放從Q中刪除的頂點。</p><h3 id="Dijkstra’s-Algorithm"><a href="#Dijkstra’s-Algorithm" class="headerlink" title="Dijkstra’s Algorithm"></a>Dijkstra’s Algorithm</h3><pre><code>DIJKSTRA(G,w,s)1.  INITIALIZE-SINGLE-SOURCE(G,s)2.  S = ∅3.  Q = G.V4.  while Q ≠ ∅5.     u = EXTRACT-MIN(Q)6.     S = S ∪ &#123;u&#125;7.     for each vertex v ∈ G.Adj[u]8.        RELAX(u,v,w)</code></pre><p>第3行初始化Q包含Graph中所有的頂點V。<br>第5行EXTRACT-MIN(Q)搜尋了Q中有最小的u.d的頂點u，將u從Q中刪除，並返回給用戶。<br>第6行把u加到S中。</p><pre><code>INITIALIZE-SINGLE-SOURCE(G,s)1.  for each vertex v ∈ G.V2.     v.d = ∞3.     v.pi = NIL4.  s.d = 0</code></pre><pre><code>RELAX(u,v,w)1.  if v.d &gt; u.d + w(u,v)2.     v.d = u.d + w(u,v)3.     v.pi = u</code></pre><h3 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><p>Basically the algorithm works as follows:</p><ol><li>Initialize d’s, π’s, set s.d = 0, set S = ∅, and Q = G.V (i.e. put all the vertices into the queue with the source vertex having the smallest distance)</li><li>While the queue is not empty, extract the minimum vertex (whose distance will be the shortest path distance at this point), add this vertex to S, and relax (using the same condition as Bellman-Ford) all the edges in the vertex’s adjacency list for vertices still in Q reprioritizing the queue if necessary</li></ol><p>The run time of Dijkstra’s algorithm depends on how Q is implemented:</p><ul><li>Simple array with search ⇒ O(V2 + E) = O(V2)</li><li>Binary min-heap (if G is sparse) ⇒ O((V + E) lg V) = O(E lg V)</li><li>Fibonacci heap ⇒ O(V lg V + E)</li></ul><h3 id="Dijkstra’s-Algorithm的正確性"><a href="#Dijkstra’s-Algorithm的正確性" class="headerlink" title="Dijkstra’s Algorithm的正確性"></a>Dijkstra’s Algorithm的正確性</h3><p>因為Dijkstra’s Algorithm永遠選擇最輕或最靠近的頂點來加入S，所以說們說它是採用貪婪的策略。貪婪策略不是擁有都會得到最佳的結果，所以我們必須推論它。因為太長就不推倒，詳見Theo24.6。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://faculty.ycp.edu/~dbabcock/cs360/lectures/lecture22.html">Dijkstra’s Algorithm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML額外標籤</title>
      <link href="/2014/04/18/old%20posts/2014-04-18-html-tags/"/>
      <url>/2014/04/18/old%20posts/2014-04-18-html-tags/</url>
      
        <content type="html"><![CDATA[<p>因為學習HTML在一般的標籤上並沒有遇到什麼問題，所以就不多做說明。<br>直接進入比較容易混淆不理解的地方，就是HTML的額外標籤。</p><h2 id="HTML的額外標示"><a href="#HTML的額外標示" class="headerlink" title="HTML的額外標示"></a>HTML的額外標示</h2><hr><p>一般常見的標籤，很容易理解，所以特別針對HTML的額外標示來加強需具備的Web知識。</p><h3 id="1-DOCTYPE"><a href="#1-DOCTYPE" class="headerlink" title="1. DOCTYPE"></a>1. DOCTYPE</h3><p>html經歷了不同版本，所以每個網頁一開始都應該告訴瀏覽器使用的html版本。<br><code>&lt;!DOCTYPE html&gt;</code></p><h3 id="2-註解"><a href="#2-註解" class="headerlink" title="2. 註解"></a>2. 註解</h3><p>html裡的註解以<!-- -->表示</p><h3 id="3-id屬性"><a href="#3-id屬性" class="headerlink" title="3. id屬性"></a>3. id屬性</h3><p>a) 每個HTML屬性都可以使用id屬性，將某元素「獨立」辨識出來，也就是說它是唯一的。<br>b) 同一個頁面上的兩個元素不能有相同的id屬性，否則該值就不再唯一。<br>c) 學習javascript時，id屬性可以讓程式碼與特定元素互動。<br>d) 屬性是全域變數(global attribute)。</p><h3 id="4-class屬性"><a href="#4-class屬性" class="headerlink" title="4. class屬性"></a>4. class屬性</h3><p>如果你想做的並非獨立辨識文件中的單一元素，而是選取特定的幾個元素，對這幾個元素進行「分組」的動作，這樣一來你就可以一次美化使用相同class屬性的所有成員。例如：你想區別內部連結與外部連結。就可以使用class屬性來標示它們。</p><blockquote><p>quote 在任何屬性上的class屬性都可以套用相同的值。</p></blockquote><h3 id="5-Block（區塊元素）"><a href="#5-Block（區塊元素）" class="headerlink" title="5. Block（區塊元素）"></a>5. Block（區塊元素）</h3><p>有些元素會在瀏覽器視窗另起一行，稱為block level的元素。。</p><h3 id="6-Inline（行內元素）"><a href="#6-Inline（行內元素）" class="headerlink" title="6. Inline（行內元素）"></a>6. Inline（行內元素）</h3><p>有些元素會跟鄰近元素保持在同一行，這些稱為行內元素。</p><h3 id="7-div"><a href="#7-div" class="headerlink" title="7. div"></a>7. div</h3><p>元素<code>&lt;div&gt;</code>可以將一組元素全組起來，成為一個block level的方塊。<br>因為div可以用在很多地方，在<code>&lt;/div&gt;</code>後面加一個註解，可以大大提昇可讀性。<br>使用<code>&lt;div&gt;</code>元素來容納頁面的不同區域，可以讓管理原始碼的工作更容易。</p><h3 id="8-span"><a href="#8-span" class="headerlink" title="8. span"></a>8. span</h3><p>元素<code>&lt;span&gt;</code>的作用就像<code>&lt;div&gt;</code>元素的inline版本。也就是它是一個inline level的元素。</p><h3 id="9-iframe"><a href="#9-iframe" class="headerlink" title="9. iframe"></a>9. iframe</h3><p>元素<code>&lt;iframe&gt;</code>就像網頁上的一個小窗戶，透過這個小窗戶你可以看到其他網頁。常見的像是youtube或是google map都是這種用法。</p><h3 id="10-meta"><a href="#10-meta" class="headerlink" title="10. meta"></a>10. meta</h3><p>元素<code>&lt;meta&gt;</code>標示位在<code>&lt;head&gt;</code>元素內，包含網頁相關資訊。<br>有以下幾個properties<br>description:<br>網頁的描述，有時候會在搜尋結果中出現。<br>robots:<br>此屬性標明搜尋引擎是否要將此頁面加到搜尋結果中。</p><h3 id="11-其他"><a href="#11-其他" class="headerlink" title="11. 其他"></a>11. 其他</h3><p>一些不受到html5支援的額外標示就不在此寫出，需要用到的時候再去查詢即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS簡介</title>
      <link href="/2014/04/18/old%20posts/2014-04-18-introduction-to-css/"/>
      <url>/2014/04/18/old%20posts/2014-04-18-introduction-to-css/</url>
      
        <content type="html"><![CDATA[<h2 id="了解CSS運作方式的關鍵"><a href="#了解CSS運作方式的關鍵" class="headerlink" title="了解CSS運作方式的關鍵"></a>了解CSS運作方式的關鍵</h2><p>想像每個HTML元素四周都有看不見得方框，使用Rules來改變呈現的方式。</p><p><img src="http://user-image.logdown.io/user/6619/blog/6590/post/194664/wtO9ePsOQXeb1jMxn0gq_Screen%20Shot%202014-04-18%20at%2013.34.34.png" alt="Screen Shot 2014-04-18 at 13.34.34.png"></p><h2 id="CSS的運作方式"><a href="#CSS的運作方式" class="headerlink" title="CSS的運作方式"></a>CSS的運作方式</h2><p>CSS associates style rules with html elements<br>（CSS的運作方式是將HTML和Rules連結起來。）</p><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>rules包含兩個部分：selector與declaration。</p><p><img src="http://user-image.logdown.io/user/6619/blog/6590/post/194664/uH31Fj02ThGmlBrqJ81r_Screen%20Shot%202014-04-18%20at%2013.05.37.png" alt="Screen Shot 2014-04-18 at 13.05.37.png"></p><h3 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h3><p>Declaration包含了Property和Value。</p><p><img src="http://user-image.logdown.io/user/6619/blog/6590/post/194664/BbOEyLrBS8WKEy3bDErG_Screen%20Shot%202014-04-18%20at%2013.05.53.png" alt="Screen Shot 2014-04-18 at 13.05.53.png"><br>CSS properties affect how elementts are displayed</p><h2 id="selector的分類"><a href="#selector的分類" class="headerlink" title="selector的分類"></a>selector的分類</h2><p><img src="http://user-image.logdown.io/user/6619/blog/6590/post/194664/cVDmOfcQxuK94c0FvhE3_Screen%20Shot%202014-04-18%20at%2013.06.54.png" alt="Screen Shot 2014-04-18 at 13.06.54.png"></p><p>==============================================================================<br>參考資料：HTML &amp; CSS DeSign and buiLd Webdites 最好的HTML&amp;CSS書籍</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爆炸性的學習</title>
      <link href="/2014/03/20/old%20posts/2014-03-20-explosive-learning/"/>
      <url>/2014/03/20/old%20posts/2014-03-20-explosive-learning/</url>
      
        <content type="html"><![CDATA[<p>這學期我的目標是成為一個有爆炸學習速度的男人<br>忽然想到很多值得一試的方法：</p><ol><li><p>聚焦<br>一段時間內聚焦於一個小目標，不顧一切的把它完成。避免游移所造成的浪費。</p></li><li><p>用大量的小目標代替一個大目標<br>像演算法這種需要大量時間摸索的科目，設立一些小目標，一一達成目標。</p></li><li><p>捲起袖子下去實作是進步最快的方式<br>不斷的練習可以幫助熟練，第一天也許比較痛苦，第二天第三天重複一樣的動作，就會慢慢漸入佳進，不斷的練習！！</p></li><li><p>早上起來固定看一些影片<br>將原本會浪費時間的習慣用一些學習的習慣來替代，久而久之非常顯著。</p></li><li><p>快速的累積文章（以敏捷式開發代替完美主義）<br>我之前想寫design pattern文章的方式太過要求，想做到面面俱到，但這樣做往往會在某些點鑽牛角尖。用敏捷式開發吧！先寫出一篇來，聽取大家的建議，或是自己覺得不好的地方再做修改！這樣會有效率的多。</p></li><li><p>擁抱限制<br>常常因為效率不錯，就無限度的加長工作時間，卻沒想到沒有時間的限制下，動力會大大的降低。時間一長發現自己什麼都沒做到，於是只好再加長工作時間，惡性循環。給自己定下一個合理的工作時間吧！足夠學習，又不會令人喪失鬥志。如果再三小時內完成一個小功能是一個好玩的挑戰。若是覺得前三個小時效率不錯，那麼繼續工作9小時，是不是令人提不起勁呢？</p></li></ol><p>回頭想想，如果我可以快速的學會一個東西，那我不就有很好的素材可以寫。如果我為了寫網誌而拖累了學習速度，那我不僅寫得文章數少，學到的東西又更加少。完全本末倒置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML - Class Diagram</title>
      <link href="/2014/03/01/old%20posts/2014-03-01-uml-class-diagram/"/>
      <url>/2014/03/01/old%20posts/2014-03-01-uml-class-diagram/</url>
      
        <content type="html"><![CDATA[<p>Design Pattern的學習中頻繁的出現著Class Diagram，如果不仔細地了解箇中意思，將會學得很辛苦，因此特別介紹Class Diagram，也就是類別圖。UML中的專有名詞與一般寫程式的專有名詞並不完全相同，例如UML用的一般化（generalization）這個名詞就等於是物件導向語言中「繼承」。而這些UML特有的名詞經常會出現在學習的過程中，如果能夠了解，對學習來說很有幫助，因此建議熟記在Class Diagram中出現的專有名詞。</p><p>最後簡單的介紹一下UML，UML是描述物件導向程式的語言，使用圖形來表示我們設計的軟體。從需求設計實作，都可以用UML來表示。而Class Diagram描述著系統的結構，是UML中唯一可以對應實際物件導向程式的UML圖。</p><h3 id="能見度-Visibility"><a href="#能見度-Visibility" class="headerlink" title="能見度(Visibility)"></a>能見度(Visibility)</h3><p>加在Class中的變數或是方法前面。<br>public:大家都可以使用。<br>private:只能在自己本身的Class中使用。<br>protected:跟自己有繼承關係的class皆可共用。<br>package:在同package下可以使用。<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/182932/js4O4X8QuK0zy2iNhBHe_visibility.jpg" alt="visibility.jpg"></p><h3 id="多重性-multiplicity"><a href="#多重性-multiplicity" class="headerlink" title="多重性(multiplicity)"></a>多重性(multiplicity)</h3><h3 id="關係"><a href="#關係" class="headerlink" title="關係"></a>關係</h3><p>類別間的關係是最重要也是最需要釐清地部分，小小的不同意思都會差的很多，請特別注意。</p><p>** Generalization 一般化**<br>說明：物件導向程式中稱為Inheritance-繼承。表示繼承了父類別。<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/182932/4LLXgIJpR9akjqn1ExfC_2014-03-07_010113.jpg" alt="2014-03-07_010113.jpg"></p><p>** Realization 實現：**<br>說明：物件導向程式中的Implementation-實作。表示實作了介面。<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/182932/fSp6zw8yRHWzosqgUnSx_2014-03-07_010852.jpg" alt="2014-03-07_010852.jpg"></p><p>** dependency 相依關係**<br>說明：類別依賴於另一個類別所提供的功能。<br>從程式語言角度來看：當一個類別使用到另一個類別的方法(method)。</p><p>** associations 關聯**<br>說明：程式語言角度：類別之間的關聯，通常代表著一個類別的變數參考至(refer to)另一個類別。<br>舉例來說：</p><p><strong>navigable assovciations 有方向性的結合關係</strong><br>箭頭開始的那類別，擁有箭頭指向類別的參考(reference) 。</p><p>** aggregation 聚合**<br>說明：弱關連 - 整體(Whole)消失後，部分(part)還是繼續存在。有包含的意思，英文為is-part-of。例如：學生是學校的一部分，學校不見了，學生還是可以到別的學校讀書，並不會因為學校不見跟著消失。<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/182932/dojgQxczTwS8niQKmcCh_2014-03-07_011238.jpg" alt="2014-03-07_011238.jpg"></p><p>** Composition**<br>說明：強關連 - 比聚合更強的包含關係，整體消失，部分也會跟著消失。整體-部分的生命週期是一致的。<br>如果電話消失了，那麼按鍵也會跟著消失。<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/182932/p4ghACcQleb3VDv6Aahp_2014-03-07_013507.jpg" alt="2014-03-07_013507.jpg"></p><h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><p><a href="http://fengyu0318.myweb.hinet.net/ood.html">游峰碩老師個人網頁</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern - Command Pattern</title>
      <link href="/2014/02/08/old%20posts/2014-02-08-design-pattern-command-pattern/"/>
      <url>/2014/02/08/old%20posts/2014-02-08-design-pattern-command-pattern/</url>
      
        <content type="html"><![CDATA[<p>定義:</p><p>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations</p><p>粗分為兩部分:</p><ol><li>把request封裝成物件。</li><li>實踐queue、日誌、以及支援復原功能。<br>先來介紹的是沒有undo功能的Simple Command Pattern。</li></ol><h2 id="Simple-Command-Pattern"><a href="#Simple-Command-Pattern" class="headerlink" title="Simple Command Pattern"></a>Simple Command Pattern</h2><p>初步了解:<br>老方法，用Headfirst Design Pattern的範例熟悉一下Command Pattern。<br>這一章HeadFirst書上並沒有使用UML將範例畫出來，於是我稍作整理，以下是範例的UML:<br><img src="http://user-image.logdown.io/user/6619/blog/6590/post/178686/oGDG35GWRPmuif65ChcF_2014-02-13_095001.jpg" alt="2014-02-13_095001.jpg"><br>圖中有幾個主要角色:<br>Invoker:調用者，負責調用client端需要的命令，並執行之。<br>Command &lt;&lt; interface &gt;&gt;:透過這個介面Invoker可以調用各種實作這個介面的Command執行之。<br>Reciver:接收者，reciver接收到命令後執行相符合的動作。<br>Client:客戶端，發出命令者。</p><pre><code class="java">public class SimpleRemoteControl &#123;    Command slot;    public SimpleRemoteControl() &#123;&#125;    public void setCommand(Command command) &#123;        slot = command;    &#125;    public void buttonWasPressed() &#123;        slot.execute();    &#125;&#125;</code></pre><p>Command:<br>命令接收者(reciver)做出實際行動，Class名稱就是它要reciver做的事情。例如:</p><pre><code class="java">//LightOffCommand.javapublic class LightOffCommand implements Command &#123;    Light light;    public LightOffCommand(Light light) &#123;        this.light = light;    &#125;    public void execute() &#123;        light.off();    &#125;&#125;</code></pre><p>可以很清楚的知道，這個命令是要Light這個reciver去做開燈這件事。</p><p>從這個Simple Command pattern中可以觀察到幾個特性:</p><ol><li>原本需由Client端直接面對各種Reciver不同的API，現在只要setCommand，然後執行即可。讓Client端的程式碼更具有可讀性。</li><li>要設成Command的行為，必須要有一定的相似性，通常是輸入的變數都是同一類型。如開燈與開電視機他們都不需要輸入參數。</li><li>使用Command的行為盡量不要回傳值，或者回傳值即是需要的結果。簡化Client程式碼。</li></ol><p>##Meta Command Pattern<br>什麼是meta command pattern?<br>剛剛的simple command pattern，invoker使用setCommand()方法，一次可以設定一個command對吧。<br>現在我們把command存在陣列中，最後再使用executeAll()方法一次執行所有儲存的命令。<br>來做個比較便一目了然:</p><pre><code class="java">// SimpleCommandInvoker.javapublic class SimpleCommandInvoker &#123;    Command command;    public SimpleCommandInvoker() &#123;    &#125;    public void setCommand(Command command)&#123;        this.command = command;    &#125;    public void execute()&#123;        command.execute();    &#125;&#125;</code></pre><pre><code class="java">// MetaCommandInvoker.javapublic class MetaCommandInvoker &#123;    List&lt;Command&gt; commands = new ArrayList&lt;Command&gt;();  //把command儲存在List中，由executeAll一一執行。    public MetaCommandInvoker() &#123;        // TODO Auto-generated constructor stub    &#125;    public void setCommand(Command command)&#123;        commands.add(command);    &#125;    public void removeCommand(Command command)&#123;        commands.remove(command);    &#125;    public void executeAll()&#123;        for(Command c:commands)&#123;            c.execute();        &#125;    &#125;&#125;</code></pre><h2 id="Undo與NoCommand"><a href="#Undo與NoCommand" class="headerlink" title="Undo與NoCommand"></a>Undo與NoCommand</h2><p>這部分先行跳過，擇日補上，如果對復原有需要的朋友，請參閱Head First Design Pattern一書。</p><h2 id="延伸思考"><a href="#延伸思考" class="headerlink" title="延伸思考:"></a>延伸思考:</h2><ol><li>如果我們把Command用Abstract class或是Concrete Class實作一些方法，而非interface會怎麼樣?</li></ol><ol start="2"><li><p>Command Pattern or Stragery Pattern<br>一個情境，在登入時，能選擇google登入、facebook登入或者使用網站本身資料庫來登入，這種情形下，用Command Pattern比較好還是用Stragery Pattern比較好呢?</p></li><li><p>Command pattern與Facade Pattern<br>同樣都是在實際執行的物件和Client中間加上一個物件來降低藕合，差別在於facade必須為所有的method命名，例如開電視。而Command要使用哪一個才調用並執行，可以看得出Command Pattern適用於大量且不一定會使用的指令，而facade是讓你很明顯的看到，我這個系統有這些功能，扮演著介面的角色。</p></li></ol><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源:"></a>參考資源:</h2><p>Head First Design Pattern<br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/command-pattern.html">搞笑談軟工 重新整理Command Pattern</a><br><a href="http://rettamkrad.blogspot.tw/2013/06/commandstrategypattern.html">Command與Stragery Pattern的差異</a><br><a href="http://www.dotblogs.com.tw/ricochen/archive/2012/08/03/73801.aspx">Rico 技術農場 Command Pattern</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Python</title>
      <link href="/2014/01/01/python/hello-world/"/>
      <url>/2014/01/01/python/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 01 Python 基礎教學 </category>
          
          <category> 02 Python 爬蟲教學 </category>
          
          <category> 03 Python Flask 教學 </category>
          
          <category> 04 Python Django 教學 </category>
          
          <category> 05 Python 資料庫教學 </category>
          
          <category> 06 Python 資料分析 </category>
          
          <category> 07 Python 機器學習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern - 資源總整理</title>
      <link href="/2014/01/01/old%20posts/2014-01-01-design-pattern-resources/"/>
      <url>/2014/01/01/old%20posts/2014-01-01-design-pattern-resources/</url>
      
        <content type="html"><![CDATA[<h3 id="要學Design-Pattern之前-一定要先搞懂的物件導向基礎"><a href="#要學Design-Pattern之前-一定要先搞懂的物件導向基礎" class="headerlink" title="要學Design Pattern之前, 一定要先搞懂的物件導向基礎:"></a>要學Design Pattern之前, 一定要先搞懂的物件導向基礎:</h3><p>強烈建議先閱讀<a href="http://www.dotblogs.com.tw/hatelove/archive/2012/07/31/object-oriented-training-lsp-lkp-isp-dip-introduction.aspx">91Design Pattern學習的心得</a>之後，再開始學習Design Pattern。文中提到學Design Pattern時必須具備下列的物件導向知識。強調Design Pattern只是幫助物件導向程式達到「高內聚、低耦合」的目的。並且需遵照設計原則來使用。</p><ul><li>三大特性：<a href="http://ithelp.ithome.com.tw/question/10053333">封裝、繼承、多型</a></li><li>兩種抽象：<a href="http://www.dotblogs.com.tw/hatelove/archive/2010/10/15/abstract-interface-introduction-and-compare.aspx">interfact、abstract</a></li><li>目的：<a href="http://ithelp.ithome.com.tw/question/10053842">高內聚、低耦合</a></li><li>SOLID 原則：<a href="http://ithelp.ithome.com.tw/question/10054102">單一職責原則</a>、<a href="http://ithelp.ithome.com.tw/question/10054337">開放封閉原則</a>、<a href="http://ithelp.ithome.com.tw/question/10055044">里氏替換原則</a>、<a href="http://ithelp.ithome.com.tw/question/10054636">最小知識原則</a>、<a href="http://ithelp.ithome.com.tw/question/10054846">介面隔離原則</a>、<a href="http://ithelp.ithome.com.tw/question/10055368">依賴反轉原則</a></li><li>設計原則：DRY、KISS、YAGNI</li><li>設計方式：interface-driven、intention-driven、生成物件與使用物件分開</li><li>延伸閱讀：<br><a href="http://ihower.tw/blog/archives/7181">Kent Beck 的四個簡單程式設計原則</a><br><a href="http://blog.game2.tw/%E4%B8%80%E4%BA%9B%E8%BB%9F%E4%BB%B6%E8%A8%AD%E8%A8%88%E7%9A%84%E5%8E%9F%E5%89%87-2#.UsUW6pAW3Zg">一些軟件設計的原則</a></li></ul><p>文中提到，濫用Design Pattern的傷害很可能比不用Design Pattern還要大。使用時須根據需求來運用Design Pattern，而非無節制的使用Patterns。</p><h3 id="Pin-點部落"><a href="#Pin-點部落" class="headerlink" title="Pin 點部落"></a>Pin 點部落</h3><p><a href="http://www.dotblogs.com.tw/pin0513/category/3265.aspx">Design Pattern目錄</a><br>這是一個我很推薦的學習資源，內容以深入淺出設計模式的學習筆記為主要骨幹。深入淺出設計模式寫得很好，但稍嫌囉嗦，故事敘述往往花了很長的篇幅，因此我選擇精簡整理過的筆記，也就是這個網站的資源來學習。</p><h3 id="Teddy搞笑談軟工"><a href="#Teddy搞笑談軟工" class="headerlink" title="Teddy搞笑談軟工"></a>Teddy搞笑談軟工</h3><p>Teddy提到坊間的書籍，如大話設計模式、設計模式之禪……等等的書籍，以範例來說明Design Patern，以實際<br>程式來解說Desgin Pattern。諸如此類以「操作型定義」來學習，對於入門來說是個好方法。然而由GOF所著作的Design Pattern書中提到的抽象型定義，卻沒有書籍著重在這方面。因此Teddy使用6大元素，將抽象型定義囊括其中，藉以探究Design Pattern。</p><ul><li><p>Teddy流 - 物件導向核心概念<br><a href="http://teddy-chen-tw.blogspot.tw/2011/12/1.html">亂談軟體設計（1）：Cohesion and Coupling</a><br><a href="http://teddy-chen-tw.blogspot.tw/2011/12/2.html">亂談軟體設計（2）：Open-Closed Principle</a><br><a href="http://teddy-chen-tw.blogspot.tw/2011/12/3.html">亂談軟體設計（3）：Single-Responsibility Principle</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/01/4.html">亂談軟體設計（4）：Liskov Substitution Principle</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/01/5dependency-inversion-principle.html">亂談軟體設計（5）：Dependency-Inversion Principle</a><br><a href="https://www.google.com.tw/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&ved=0CDoQFjAB&url=http://teddy-chen-tw.blogspot.com/2012/01/6single-choice-principle.html&ei=8A_mUoGxF4jNkwW_2oCQDg&usg=AFQjCNHlleGb1DuNYItfrOtDbszN0pHiuQ&sig2=c9fw9g48hCient0437ihzQ">亂談軟體設計（6）：Single Choice Principle</a></p></li><li><p>Teddy流 - 設計與設計模式<br><a href="http://teddy-chen-tw.blogspot.tw/2013/06/blog-post_25.html">設計的定義</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/01/design-patterns.html">盤點 Design Patterns </a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/blog-post_2.html">設計模式的逆襲：種子篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/09/force.html">Force是什麼</a></p></li><li><p>Teddy流 - 從Force出發<br><a href="http://teddy-chen-tw.blogspot.tw/2013/07/force1force.html">了解Force讓你做出好設計（1）：自然界與設計界的Force</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/07/force2.html">了解Force讓你做出好設計（2）：一個軟體設計範例</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/09/forceobserver.html">尋找Force實驗1：Observer篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/09/force2state-pattern.html">尋找Force實驗2：State Pattern篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/force3adapter-pattern.htm">尋找Force實驗3：Adapter Pattern篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/force4facade.html">尋找Force實驗4：Facade篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/force5proxy.html">尋找Force實驗5：Proxy篇</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/force6singleton.html">尋找Force實驗6：Singleton篇</a></p></li><li><p>Teddy流-重新整理系列<br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/adapter-pattern.html">重新整理Adapter Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/singleton-pattern.html">重新整理Singleton Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/factory-method-pattern.html">重新整理Factory Method Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/abstract-factory-pattern.html">重新整理Abstract Factory Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/template-method-pattern.html">重新整理Template Method Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/composite-pattern.html">重新整理Composite Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/observer-pattern.html">重新整理Observer Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/facade-pattern.html">重新整理Facade Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/08/strategy-pattern.html">重新整理Strategy Pattern</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/07/state-pattern.html">重新整理State Pattern</a></p></li></ul><ul><li>Teddy流-要解決什麼問題系列<br><a href="http://teddy-chen-tw.blogspot.tw/2012/10/creational-patterns.html">Creational Patterns要解決什麼問題(上)?</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/11/creational-patterns.html">Creational Patterns要解決什麼問題(中)?</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/11/creational-patterns_26.html">Creational Patterns要解決什麼問題(下)?</a><br><a href="http://teddy-chen-tw.blogspot.tw/2012/11/structural-patterns.html">Structural Patterns要解決什麼問題(上)?</a><br><a href="http://teddy-chen-tw.blogspot.tw/2013/03/behavioral-patterns.html">Behavioral Patterns要解決什麼問題(一)?</a></li></ul><h3 id="91的站"><a href="#91的站" class="headerlink" title="91的站"></a>91的站</h3><p> 很棒的站，對於物件導向觀念一直延伸至Design Pattern，一整套的學習教材。進階版有實際範例將程式重構為Design Pattern的型式。</p><p> <a href="http://ithelp.ithome.com.tw/search/search_result?p=++91%E4%B9%8BASP.NET%E7%94%B1%E6%B7%BA%E5%85%A5%E6%B7%B1+%E4%B8%8D%E8%B2%A0%E8%B2%AC%E8%AC%9B%E5%BA%A7+&field=date&page=2">iT邦</a><br> <a href="http://www.dotblogs.com.tw/hatelove/category/4218.aspx">ASP.NET由淺入深 不負責講座系列</a><br> <a href="http://www.dotblogs.com.tw/hatelove/category/5036.aspx">重構之路系列</a></p><h3 id="參考書籍"><a href="#參考書籍" class="headerlink" title="參考書籍"></a>參考書籍</h3><ul><li><p>深入淺出設計模式<br>最多人推薦的教材，我也不例外，從最直覺但有缺陷的方式開始思考，慢慢推導致Design Pattern的產生。並不時檢視著SOLID五大原則。非常適合打基礎。缺點是故事篇幅啥在太長，常常看到恍神。書中只講解到其中幾種的Design Pattern並非全部。</p></li><li><p>大話設計模式<br>引導讀者進入情境，讓讀者思考該用甚麼方法解決問題，類似深入淺出設計模式。優點是故事較短，很容易閱讀。缺點是有些例子對Pattern的了解有限，程式碼有些是中文，較難閱讀。</p></li><li><p>設計樣式的解析與活用<br>Teddy在網站中推薦的教材，少數有提到抽象型定義的書籍。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
